{
  "id": "7bde5d99-8699-4255-bfd0-55ae6ddb865f",
  "prefix": "GetTablesHierarchyLevel",
  "description": "Get Hierarchy Level of Tables using Existing Foreign Keys",
  "body": "/* =============================================================================================================================================================\r\n-- Server\t\t: LOCALSERVER\r\n-- Database\t\t: USER Database\r\n-- Script\t\t: GetTablesHierarchyLevel\r\n-- Description\t: Get Hierarchy Level of Tables using Existing Foreign Keys\r\n-- **Note: Self Reference Foreign Keys will be Ignored to Avoid Infinite Looping\r\n============================================================================================================================================================= */\r\nSET NOCOUNT ON;\r\n;WITH _Dependencies -- Get Objects with FK Dependencies\r\nAS (\r\n\t\tSELECT C.CONSTRAINT_NAME AS \"ForeignKeyName\",\r\n\t\t\t   FK.TABLE_SCHEMA AS \"OBJECTschema\", FK.TABLE_NAME AS \"OBJECTname\",\r\n\t\t\t   PK.TABLE_SCHEMA AS \"DEPENDSschema\", PK.TABLE_NAME AS \"DEPENDSname\"\r\n\t\tFROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS C\r\n\t\tINNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS FK ON C.CONSTRAINT_NAME=FK.CONSTRAINT_NAME\r\n\t\tINNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS PK ON C.UNIQUE_CONSTRAINT_NAME=PK.CONSTRAINT_NAME\r\n\t\tWHERE NOT EXISTS\r\n\t\t\t(\r\n\t\t\t\tSELECT FK1.name AS ForeignKeyName,\r\n\t\t\t\t\t   OBJECT_SCHEMA_NAME(FK1.parent_object_id)+'.'+OBJECT_NAME(FK1.parent_object_id) AS MainTableName,\r\n\t\t\t\t\t   OBJECT_SCHEMA_NAME(FK1.referenced_object_id)+'.'+OBJECT_NAME(FK1.referenced_object_id) AS ReferTableName\r\n\t\t\t\tFROM sys.foreign_keys AS FK1\r\n\t\t\t\tINNER JOIN sys.foreign_keys AS FK2 ON FK1.parent_object_id = FK2.referenced_object_id AND FK2.parent_object_id=FK1.referenced_object_id\r\n\t\t\t\tWHERE FK1.name = C.CONSTRAINT_NAME OR FK2.name = C.CONSTRAINT_NAME\r\n\t\t\t)\r\n   ),--\r\n_NoDependencies -- The First Level Objects are with No Dependencies\r\nAS (\r\n\t\tSELECT T.TABLE_SCHEMA AS \"OBJECTschema\", T.TABLE_NAME AS \"OBJECTname\"\r\n\t\tFROM INFORMATION_SCHEMA.TABLES AS T\r\n\t\tWHERE T.TABLE_TYPE = 'BASE TABLE' -- Considering Tables Only But Not Views\r\n\t\t\tAND NOT EXISTS (SELECT 1 FROM _Dependencies AS D WHERE D.OBJECTschema = T.TABLE_SCHEMA AND D.OBJECTname = T.TABLE_NAME)\r\n   ),--\r\n_Recursive -- Recursive CTE to Get Dependencies\r\nAS (\r\n\t\tSELECT ND.OBJECTschema AS \"SchemaName\", ND.OBJECTname AS \"TableName\", 0 AS \"LVL\" -- Level 0 Indicates Tables with No Dependencies\r\n\t\tFROM _NoDependencies AS ND\r\n\t\tUNION ALL\r\n\t\tSELECT D.OBJECTschema AS \"SchemaName\", D.OBJECTname AS \"TableName\", R.LVL + 1 AS \"LVL\"\r\n\t\tFROM _Dependencies AS D\r\n\t\tINNER JOIN _Recursive AS R ON D.DEPENDSschema = R.SchemaName AND D.DEPENDSname = R.TableName\r\n   )--\r\nSELECT R.SchemaName, R.TableName, MAX(R.LVL) AS \"LVL\"\r\n/*\r\n\t, ISNULL((SELECT STUFF(((SELECT '; ' + 'ALTER TABLE ['+R.SchemaName+'].['+R.TableName+'] DISABLE TRIGGER ['+name+']'\r\n\t\t\t\t\t\t\t FROM sys.triggers AS DT --DisableTriggers\r\n\t\t\t\t\t\t\t WHERE DT.is_disabled = 0 AND OBJECT_SCHEMA_NAME(DT.parent_id) = R.SchemaName AND OBJECT_NAME(DT.parent_id) = R.TableName\r\n\t\t\t\t\t\t\t FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)')), 1, 2, '')) + '; ', '')\r\n\t+ 'DELETE FROM ['+R.SchemaName+'].['+R.TableName+'] WHERE 1=1; '\r\n\t+ ISNULL((SELECT STUFF(((SELECT ';' + ' ALTER TABLE ['+R.SchemaName+'].['+R.TableName+'] ENABLE TRIGGER ['+name+']'\r\n\t\t\t\t\t\t\t FROM sys.triggers AS ET --EnableTriggers\r\n\t\t\t\t\t\t\t WHERE ET.is_disabled = 0 AND OBJECT_SCHEMA_NAME(ET.parent_id) = R.SchemaName AND OBJECT_NAME(ET.parent_id) = R.TableName\r\n\t\t\t\t\t\t\t FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)')), 1, 2, '')) + ';', '')\r\n\t+ '/*LVL:' + CAST(MAX(r.LVL) AS VARCHAR(2)) + '*/' AS \"DELETE STATEMENT\"\r\n*/\r\nFROM _Recursive AS R\r\nGROUP BY R.SchemaName, R.TableName\r\nORDER BY LVL ASC, R.SchemaName ASC, R.TableName ASC;"
}
