{
  "id": "36ba9fe0-34a2-4932-9fe5-fdacbe254cd6",
  "prefix": "mvpED_sp_PressureDetector",
  "description": "quick and easy way to diagnose CPU or memory pressure on a SQL Server",
  "body": "SET ANSI_NULLS ON;\r\nSET ANSI_PADDING ON;\r\nSET ANSI_WARNINGS ON;\r\nSET ARITHABORT ON;\r\nSET CONCAT_NULL_YIELDS_NULL ON;\r\nSET QUOTED_IDENTIFIER ON;\r\nSET STATISTICS IO OFF;\r\nSET STATISTICS TIME OFF;\r\nGO\r\n\r\n/*\r\n\r\n██████╗ ██████╗ ███████╗███████╗███████╗██╗   ██╗██████╗ ███████╗  \r\n██╔══██╗██╔══██╗██╔════╝██╔════╝██╔════╝██║   ██║██╔══██╗██╔════╝  \r\n██████╔╝██████╔╝█████╗  ███████╗███████╗██║   ██║██████╔╝█████╗    \r\n██╔═══╝ ██╔══██╗██╔══╝  ╚════██║╚════██║██║   ██║██╔══██╗██╔══╝    \r\n██║     ██║  ██║███████╗███████║███████║╚██████╔╝██║  ██║███████╗  \r\n╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝  \r\n                                                                   \r\n██████╗ ███████╗████████╗███████╗ ██████╗████████╗ ██████╗ ██████╗ \r\n██╔══██╗██╔════╝╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗\r\n██║  ██║█████╗     ██║   █████╗  ██║        ██║   ██║   ██║██████╔╝\r\n██║  ██║██╔══╝     ██║   ██╔══╝  ██║        ██║   ██║   ██║██╔══██╗\r\n██████╔╝███████╗   ██║   ███████╗╚██████╗   ██║   ╚██████╔╝██║  ██║\r\n╚═════╝ ╚══════╝   ╚═╝   ╚══════╝ ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝\r\n\r\nCopyright 2021 Darling Data, LLC\r\nhttps://www.erikdarlingdata.com/\r\n\r\nFor usage and licensing details, run:\r\nEXEC sp_PressureDetector\r\n    @help = 1;\r\n\r\nFor support, head over to GitHub:\r\nhttps://github.com/erikdarlingdata/DarlingData                                                                   \r\n\r\n*/\r\n\r\n\r\nIF OBJECT_ID('dbo.sp_PressureDetector') IS  NULL\r\n    EXEC ('CREATE PROCEDURE dbo.sp_PressureDetector AS RETURN 138;');\r\nGO\r\n\r\nALTER PROCEDURE dbo.sp_PressureDetector \r\n(\r\n    @what_to_check nvarchar(6) = N'both',    \r\n    @skip_plan_xml bit = 0,\r\n    @help bit = 0,\r\n    @version varchar(5) = NULL OUTPUT,\r\n    @version_date datetime = NULL OUTPUT\r\n)\r\nWITH RECOMPILE\r\nAS \r\nBEGIN\r\n\r\nSET STATISTICS XML OFF;\r\nSET NOCOUNT, XACT_ABORT ON;\r\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n    \r\nSELECT \r\n    @version = '2.40', \r\n    @version_date = '20220401';\r\n\r\n\r\nIF @help = 1\r\nBEGIN\r\n\r\n    /*\r\n    Introduction\r\n    */\r\n    SELECT\r\n        introduction =\r\n           'hi, i''m sp_PressureDetector!' UNION ALL\r\n    SELECT 'you got me from https://www.erikdarlingdata.com/sp_pressuredetector/' UNION ALL\r\n    SELECT 'i''m a lightweight tool for monitoring cpu and memory pressure' UNION ALL\r\n    SELECT 'i''ll tell you how many worker threads and how much memory you have available' UNION ALL\r\n    SELECT 'and show you any running queries that are using cpu and memory';\r\n\r\n    /*\r\n    Parameters\r\n    */\r\n    SELECT\r\n        parameter_name =\r\n            ap.name,\r\n        data_type = t.name,\r\n        description =\r\n            CASE\r\n                ap.name\r\n                WHEN '@what_to_check' THEN 'areas to check for pressure '\r\n                WHEN '@skip_plan_xml' THEN 'if you want to skip getting plan XML'\r\n                WHEN '@version' THEN 'OUTPUT; for support'\r\n                WHEN '@version_date' THEN 'OUTPUT; for support'\r\n                WHEN '@help' THEN 'how you got here'\r\n            END,\r\n        valid_inputs =\r\n            CASE\r\n                ap.name\r\n                WHEN '@what_to_check' THEN '\"both\", \"cpu\", and \"memory\"'\r\n                WHEN '@skip_plan_xml' THEN '0 or 1'\r\n                WHEN '@version' THEN 'none'\r\n                WHEN '@version_date' THEN 'none'\r\n                WHEN '@help' THEN '0 or 1'\r\n            END,\r\n        defaults =\r\n            CASE\r\n                ap.name\r\n                WHEN '@what_to_check' THEN 'both'\r\n                WHEN '@skip_plan_xml' THEN '1'\r\n                WHEN '@version' THEN 'none'\r\n                WHEN '@version_date' THEN 'none'\r\n                WHEN '@help' THEN '0'\r\n            END\r\n    FROM sys.all_parameters AS ap\r\n    INNER JOIN sys.all_objects AS o\r\n        ON ap.object_id = o.object_id\r\n    INNER JOIN sys.types AS t\r\n        ON  ap.system_type_id = t.system_type_id\r\n        AND ap.user_type_id = t.user_type_id\r\n    WHERE o.name = N'sp_PressureDetector'\r\n    OPTION(RECOMPILE);\r\n\r\n    SELECT\r\n        mit_license_yo =\r\n           'i am MIT licensed, so like, do whatever' UNION ALL\r\n    SELECT 'see printed messages for full license';\r\n\r\n    RAISERROR('\r\nMIT License\r\n\r\nCopyright 2021 Darling Data, LLC\r\n\r\nhttps://www.erikdarlingdata.com/\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\r\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute,\r\nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\r\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n', 0, 1) WITH NOWAIT;\r\n\r\n    RETURN;\r\n\r\nEND;\r\n\r\n    /*    \r\n    Declarations of Variablependence\r\n    */\r\n    DECLARE\r\n        @azure bit = \r\n            CASE \r\n                WHEN \r\n                    CONVERT\r\n                    (\r\n                        sysname, \r\n                        SERVERPROPERTY('EDITION')\r\n                    ) = N'SQL Azure'\r\n                THEN 1\r\n                ELSE 0\r\n            END,\r\n        @pool_sql nvarchar(MAX) = N'',\r\n        @pages_kb bit = 0,\r\n        @mem_sql nvarchar(MAX) = N'',\r\n        @helpful_new_columns bit = 0,\r\n        @cpu_sql nvarchar(MAX) = N'',\r\n        @cool_new_columns bit = 0,\r\n        @reserved_worker_count_out nvarchar(10) = N'0',\r\n        @reserved_worker_count nvarchar(MAX) = N'\r\n            SELECT\r\n                @reserved_worker_count_out = \r\n                    SUM(deqmg.reserved_worker_count)\r\n            FROM sys.dm_exec_query_memory_grants AS deqmg;\r\n            ';\r\n\r\n    /*\r\n    Check to see if the DAC is enabled.\r\n    If it's not, give people some helpful information.\r\n    */           \r\n    IF \r\n    (\r\n        SELECT \r\n            c.value_in_use\r\n        FROM sys.configurations AS c\r\n        WHERE c.name = N'remote admin connections' \r\n    ) = 0\r\n    BEGIN\r\n        SELECT \r\n            message = \r\n                'This works a lot better on a troublesome server with the DAC enabled',\r\n            command_to_run = \r\n                'EXEC sp_configure ''remote admin connections'', 1; RECONFIGURE;',\r\n            how_to_use_the_dac = \r\n                'https://bit.ly/RemoteDAC';\r\n    END;\r\n    \r\n    /*\r\n    See if someone else is using the DAC.\r\n    Return some helpful information if they are.\r\n    */\r\n    IF @azure = 0\r\n    BEGIN\r\n        IF EXISTS \r\n        (\r\n            SELECT \r\n                1/0\r\n            FROM sys.endpoints AS ep\r\n            JOIN sys.dm_exec_sessions AS ses\r\n                ON ep.endpoint_id = ses.endpoint_id\r\n            WHERE ep.name = N'Dedicated Admin Connection'\r\n            AND   ses.session_id <> @@SPID \r\n        )\r\n        BEGIN\r\n            SELECT \r\n                dac_thief =\r\n                   'who stole the dac?',\r\n                ses.session_id,\r\n                ses.login_time,\r\n                ses.host_name,\r\n                ses.program_name,\r\n                ses.login_name,\r\n                ses.nt_domain,\r\n                ses.nt_user_name,\r\n                ses.status,\r\n                ses.last_request_start_time,\r\n                ses.last_request_end_time\r\n            FROM sys.endpoints AS ep\r\n            JOIN sys.dm_exec_sessions AS ses\r\n                ON ep.endpoint_id = ses.endpoint_id\r\n            WHERE ep.name = N'Dedicated Admin Connection'\r\n            AND   ses.session_id <> @@SPID\r\n            OPTION(MAXDOP 1, RECOMPILE);\r\n        END;\r\n    END;\r\n\r\n\r\n    /*Memory Grant info*/\r\n    IF @what_to_check IN (N'both', N'memory')\r\n    BEGIN   \r\n        IF\r\n        (\r\n            SELECT\r\n                COUNT_BIG(*)\r\n            FROM sys.all_columns AS ac \r\n            WHERE ac.object_id = OBJECT_ID(N'sys.dm_os_memory_clerks')\r\n            AND   ac.name = N'pages_kb'\r\n        ) = 1    \r\n        BEGIN\r\n            SET @pages_kb = 1;\r\n        END;\r\n    \r\n        /*\r\n        See buffer pool size, along with stolen memory\r\n        and top non-buffer pool consumers\r\n        */\r\n        SET @pool_sql += N'\r\n        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n        SELECT \r\n            memory_source = \r\n                N''Buffer Pool Memory'',\r\n            memory_consumer = \r\n                domc.type,\r\n            memory_consumed_gb = \r\n                CONVERT\r\n                (\r\n                    decimal(9, 2),\r\n                    SUM\r\n                    (\r\n                        ' +\r\n                          CASE @pages_kb\r\n                               WHEN 1 \r\n                               THEN\r\n                        N'domc.pages_kb + '\r\n                               ELSE \r\n                        N'domc.single_pages_kb +\r\n                        domc.multi_pages_kb + '\r\n                          END\r\n                        + N'\r\n                        domc.virtual_memory_committed_kb +\r\n                        domc.awe_allocated_kb +\r\n                        domc.shared_memory_committed_kb\r\n                    ) / 1024. / 1024. \r\n                )\r\n        FROM sys.dm_os_memory_clerks AS domc\r\n        WHERE domc.type = N''MEMORYCLERK_SQLBUFFERPOOL''\r\n        AND   domc.memory_node_id < 64\r\n        GROUP BY \r\n            domc.type\r\n        \r\n        UNION ALL\r\n        \r\n        SELECT\r\n            memory_source = \r\n                N''Non-Buffer Pool Memory: Total'',\r\n            memory_consumer = \r\n                dopc.counter_name,\r\n            memory_consumed_gb = \r\n                CONVERT\r\n                (\r\n                    decimal(9, 2), \r\n                    dopc.cntr_value / 1024. / 1024.\r\n                )\r\n        FROM sys.dm_os_performance_counters AS dopc\r\n        WHERE dopc.counter_name LIKE N''Stolen Server%''\r\n        \r\n        UNION ALL\r\n        \r\n        SELECT\r\n            memory_source = \r\n                N''Non-Buffer Pool Memory: Top Five'',\r\n            memory_consumer = \r\n                x.type, \r\n            memory_consumed_gb = \r\n                x.memory_used_gb\r\n        FROM\r\n        (\r\n            SELECT TOP (5)\r\n                domc.type,\r\n                memory_used_gb =\r\n                    CONVERT\r\n                    (\r\n                        decimal(9, 2), \r\n                        SUM\r\n                        (\r\n                        ' +\r\n                          CASE @pages_kb\r\n                               WHEN 1 \r\n                               THEN\r\n                        N'    domc.pages_kb '\r\n                               ELSE \r\n                        N'    domc.single_pages_kb +\r\n                            domc.multi_pages_kb '\r\n                          END\r\n                        + N'\r\n                        ) / 1024. / 1024. \r\n                    )\r\n            FROM sys.dm_os_memory_clerks AS domc\r\n            WHERE domc.type <> N''MEMORYCLERK_SQLBUFFERPOOL''\r\n            GROUP BY\r\n                domc.type\r\n            HAVING\r\n               SUM\r\n               (\r\n                   ' +\r\n                      CASE @pages_kb\r\n                           WHEN 1 \r\n                           THEN\r\n                    N'domc.pages_kb '\r\n                           ELSE \r\n                    N'domc.single_pages_kb +\r\n                    domc.multi_pages_kb '\r\n                      END\r\n                    + N'\r\n               ) / 1024. / 1024. > 0.\r\n            ORDER BY\r\n                memory_used_gb DESC\r\n        ) AS x\r\n        OPTION(MAXDOP 1, RECOMPILE);\r\n        ';\r\n        \r\n        EXEC sys.sp_executesql\r\n            @pool_sql;\r\n\r\n        /*\r\n        Look at wait stats related to memory, disk, and query performance\r\n        */\r\n        SELECT\r\n            hours_uptime =\r\n                (\r\n                    SELECT \r\n                        DATEDIFF\r\n                        (\r\n                            HOUR, \r\n                            osi.sqlserver_start_time, \r\n                            SYSDATETIME()\r\n                        )\r\n                    FROM sys.dm_os_sys_info AS osi\r\n                ),\r\n            dows.wait_type,\r\n            description = \r\n                CASE \r\n                    dows.wait_type\r\n                    WHEN N'PAGEIOLATCH_SH' \r\n                    THEN N'Selects reading pages from disk into memory'\r\n                    WHEN N'PAGEIOLATCH_EX'\r\n                    THEN N'Modifications reading pages from disk into memory'\r\n                    WHEN N'RESOURCE_SEMAPHORE' \r\n                    THEN N'Queries waiting to get memory to run'\r\n                    WHEN N'RESOURCE_SEMAPHORE_QUERY_COMPILE' \r\n                    THEN N'Queries waiting to get memory to compile'\r\n                    WHEN N'CXPACKET' \r\n                    THEN N'Parallelism'\r\n                    WHEN N'CXCONSUMER' \r\n                    THEN N'Parallelism'\r\n                    WHEN N'CXSYNC_PORT' \r\n                    THEN N'Parallelism'\r\n                    WHEN N'CXSYNC_CONSUMER' \r\n                    THEN N'Parallelism'\r\n                    WHEN N'SOS_SCHEDULER_YIELD' \r\n                    THEN N'Query scheduling'\r\n                    WHEN N'THREADPOOL' \r\n                    THEN N'Worker thread exhaustion'\r\n                END,\r\n            hours_wait_time = \r\n                CONVERT\r\n                (\r\n                    numeric(38, 9), \r\n                    dows.wait_time_ms / \r\n                        (1000. * 60. * 60.)\r\n                ),\r\n            hours_signal_wait_time = \r\n                CONVERT\r\n                (\r\n                    numeric(38, 9), \r\n                    dows.signal_wait_time_ms / \r\n                        (1000. * 60. * 60.)\r\n                ),\r\n            waiting_tasks_count = \r\n                REPLACE\r\n                (\r\n                    CONVERT\r\n                    (\r\n                        nvarchar(30), \r\n                        CONVERT\r\n                        (\r\n                            money,\r\n                            dows.waiting_tasks_count\r\n                        ), \r\n                        1\r\n                    ),\r\n                N'.00',\r\n                N''\r\n                ),\r\n            avg_ms_per_wait = \r\n                ISNULL\r\n                (\r\n                   CONVERT\r\n                   (\r\n                       numeric(38, 9), \r\n                       dows.wait_time_ms / \r\n                           NULLIF\r\n                           (\r\n                               1. * \r\n                               dows.waiting_tasks_count, 0.\r\n                           )\r\n                    ), \r\n                    0.\r\n                ),\r\n            avg_signal_ms_per_wait = \r\n                ISNULL\r\n                (\r\n                   CONVERT\r\n                   (\r\n                       numeric(38, 9), \r\n                       dows.signal_wait_time_ms / \r\n                           NULLIF\r\n                           (\r\n                               1. * \r\n                               dows.waiting_tasks_count, 0.\r\n                           )\r\n                    ), \r\n                    0.\r\n                )\r\n        FROM sys.dm_os_wait_stats AS dows\r\n        WHERE dows.wait_type IN \r\n              (\r\n                  /*Disk*/\r\n                  N'PAGEIOLATCH_SH', --Selects reading pages from disk into memory\r\n                  N'PAGEIOLATCH_EX', --Modifications reading pages from disk into memory\r\n                  /*Memory*/\r\n                  N'RESOURCE_SEMAPHORE', --Queries waiting to get memory to run\r\n                  N'RESOURCE_SEMAPHORE_QUERY_COMPILE', --Queries waiting to get memory to compile\r\n                  /*Parallelism*/\r\n                  N'CXPACKET', --Parallelism\r\n                  N'CXCONSUMER', --Parallelism\r\n                  N'CXSYNC_PORT', --Parallelism\r\n                  N'CXSYNC_CONSUMER', --Parallelism\r\n                  /*CPU*/\r\n                  N'SOS_SCHEDULER_YIELD', --Query scheduling\r\n                  N'THREADPOOL' --Worker thread exhaustion\r\n              )\r\n        ORDER BY dows.wait_time_ms DESC\r\n        OPTION(MAXDOP 1, RECOMPILE);\r\n\r\n        /*\r\n        Track down queries currently asking for memory grants\r\n        */\r\n        IF \r\n        (\r\n            SELECT \r\n                COUNT_BIG(*)\r\n            FROM sys.all_columns AS ac \r\n            WHERE ac.object_id = OBJECT_ID(N'sys.dm_exec_query_memory_grants')\r\n            AND   ac.name IN (N'reserved_worker_count', N'used_worker_count') \r\n        ) = 2\r\n        BEGIN\r\n            SET @helpful_new_columns = 1;\r\n        END;    \r\n        \r\n        SET @mem_sql += N'\r\n        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n        SELECT \r\n            deqmg.session_id,\r\n            database_name = \r\n                DB_NAME(deqp.dbid),\r\n            start_time = \r\n                deqmg.request_time,\r\n            query_text =\r\n                (\r\n                    SELECT\r\n                        [processing-instruction(query)] = \r\n                            SUBSTRING\r\n                            (\r\n                                dest.text, \r\n                                (der.statement_start_offset / 2) + 1,\r\n                                (\r\n                                    (\r\n                                        CASE \r\n                                            der.statement_end_offset \r\n                                            WHEN -1 \r\n                                            THEN DATALENGTH(dest.text) \r\n                                            ELSE der.statement_end_offset \r\n                                        END\r\n                                        - der.statement_start_offset \r\n                                    ) / 2 \r\n                                ) + 1\r\n                            )\r\n                       FROM sys.dm_exec_requests AS der\r\n                       WHERE der.session_id = deqmg.session_id\r\n                            FOR XML PATH(''''), \r\n                            TYPE\r\n                ),'\r\n            + CASE \r\n                  WHEN @skip_plan_xml = 0\r\n                  THEN N'\r\n            deqp.query_plan,'\r\n                  ELSE N''\r\n              END + N'\r\n            deqmg.request_time,\r\n            deqmg.grant_time,\r\n            requested_memory_mb = \r\n                (deqmg.requested_memory_kb / 1024.),\r\n            granted_memory_mb = \r\n                (deqmg.granted_memory_kb / 1024.),\r\n            ideal_memory_mb = \r\n                (deqmg.ideal_memory_kb / 1024.),        \r\n            required_memory_mb = \r\n                (deqmg.required_memory_kb / 1024.),\r\n            used_memory_mb = \r\n                (deqmg.used_memory_kb / 1024.),\r\n            max_used_memory_mb = \r\n                (deqmg.max_used_memory_kb / 1024.),\r\n            deqmg.queue_id,\r\n            deqmg.wait_order,\r\n            deqmg.is_next_candidate,\r\n            wait_time_s = \r\n                (deqmg.wait_time_ms / 1000.),\r\n            waits.wait_type,\r\n            wait_duration_s = \r\n                (waits.wait_duration_ms / 1000.),\r\n            deqmg.dop,'\r\n            + CASE \r\n                  WHEN @helpful_new_columns = 1\r\n                  THEN N'\r\n            deqmg.reserved_worker_count,\r\n            deqmg.used_worker_count,'\r\n                  ELSE N''\r\n              END\r\n            + N'\r\n            deqmg.plan_handle\r\n        FROM sys.dm_exec_query_memory_grants AS deqmg\r\n        OUTER APPLY \r\n        (\r\n            SELECT TOP (1) \r\n                dowt.*\r\n            FROM sys.dm_os_waiting_tasks AS dowt\r\n            WHERE dowt.session_id = deqmg.session_id\r\n            ORDER BY dowt.wait_duration_ms DESC \r\n        ) AS waits\r\n        OUTER APPLY sys.dm_exec_query_plan(deqmg.plan_handle) AS deqp\r\n        OUTER APPLY sys.dm_exec_sql_text(deqmg.plan_handle) AS dest\r\n        WHERE deqmg.session_id <> @@SPID\r\n        ORDER BY requested_memory_mb DESC\r\n        OPTION(MAXDOP 1, RECOMPILE);\r\n        ';\r\n\r\n        EXEC sys.sp_executesql \r\n            @mem_sql;\r\n        \r\n        /*Resource semaphore info*/\r\n        SELECT  \r\n            deqrs.resource_semaphore_id,\r\n            max_server_memory = \r\n                (\r\n                    SELECT \r\n                        CONVERT\r\n                        (\r\n                            bigint,\r\n                            c.value_in_use\r\n                        )\r\n                    FROM sys.configurations AS c\r\n                    WHERE c.name = N'max server memory (MB)'\r\n                ),\r\n            target_memory_mb = \r\n                (deqrs.target_memory_kb / 1024.),\r\n            max_target_memory_mb =\r\n                (deqrs.max_target_memory_kb / 1024.),\r\n            total_memory_mb = \r\n                (deqrs.total_memory_kb / 1024.),\r\n            available_memory_mb = \r\n                (deqrs.available_memory_kb / 1024.),\r\n            granted_memory_mb = \r\n                (deqrs.granted_memory_kb / 1024.),\r\n            used_memory_mb = \r\n                (deqrs.used_memory_kb / 1024.),\r\n            deqrs.grantee_count,\r\n            deqrs.waiter_count,\r\n            deqrs.timeout_error_count,\r\n            deqrs.forced_grant_count,\r\n            deqrs.pool_id\r\n        FROM sys.dm_exec_query_resource_semaphores AS deqrs\r\n        WHERE deqrs.resource_semaphore_id = 0\r\n        AND   deqrs.pool_id > 1\r\n        OPTION(MAXDOP 1, RECOMPILE);\r\n        \r\n    END;\r\n\r\n    IF @what_to_check IN (N'cpu', N'both')\r\n    BEGIN\r\n\r\n        IF @helpful_new_columns = 1\r\n        BEGIN        \r\n            EXEC sys.sp_executesql\r\n                @reserved_worker_count,\r\n              N'@reserved_worker_count_out varchar(10) OUTPUT',\r\n                @reserved_worker_count_out OUTPUT;\r\n        END\r\n\r\n        /*Thread usage*/\r\n        SELECT\r\n            total_threads = \r\n                MAX(osi.max_workers_count),\r\n            used_threads = \r\n                SUM(dos.active_workers_count),\r\n            available_threads = \r\n                MAX(osi.max_workers_count) - SUM(dos.active_workers_count),\r\n            reserved_worker_count = \r\n                CASE @helpful_new_columns\r\n                     WHEN 1\r\n                     THEN ISNULL\r\n                          (\r\n                              @reserved_worker_count_out, \r\n                              N'0'\r\n                          )\r\n                     ELSE N'N/A'\r\n                END,\r\n            threads_waiting_for_cpu = \r\n                SUM(dos.runnable_tasks_count),\r\n            requests_waiting_for_threads = \r\n                SUM(dos.work_queue_count),\r\n            current_workers = \r\n                SUM(dos.current_workers_count),\r\n            high_runnable_percent = \r\n                MAX(ISNULL(r.high_runnable_percent, 0))\r\n        FROM sys.dm_os_schedulers AS dos\r\n        CROSS JOIN sys.dm_os_sys_info AS osi\r\n        OUTER APPLY \r\n        (\r\n            SELECT\r\n                high_runnable_percent = \r\n                    '' +\r\n                    RTRIM(y.runnable_pct) +\r\n                    '% of your queries are waiting to get on a CPU.'\r\n            FROM\r\n            (\r\n                SELECT\r\n                    x.total, \r\n                    x.runnable,\r\n                    runnable_pct = \r\n                        CONVERT\r\n                        (\r\n                            decimal(9,2),\r\n                            (\r\n                                x.runnable / \r\n                                    (1. * NULLIF(x.total, 0))\r\n                            )\r\n                        ) * 100.\r\n                FROM \r\n                (\r\n                    SELECT\r\n                        total = \r\n                            COUNT_BIG(*), \r\n                        runnable = \r\n                            SUM\r\n                            (\r\n                                CASE \r\n                                    WHEN r.status = N'runnable' \r\n                                    THEN 1 \r\n                                    ELSE 0 \r\n                                END\r\n                            )\r\n                    FROM sys.dm_exec_requests AS r\r\n                    WHERE r.session_id > 50\r\n                ) AS x\r\n            ) AS y\r\n            WHERE y.runnable_pct > 25.\r\n            AND   y.total > 10\r\n        ) AS r\r\n        WHERE dos.status = N'VISIBLE ONLINE'\r\n        OPTION(MAXDOP 1, RECOMPILE);\r\n        \r\n        \r\n        /*Any current threadpool waits?*/\r\n        SELECT \r\n            dowt.session_id,\r\n            dowt.wait_duration_ms,\r\n            dowt.wait_type\r\n        FROM sys.dm_os_waiting_tasks AS dowt\r\n        WHERE dowt.wait_type = N'THREADPOOL'\r\n        ORDER BY dowt.wait_duration_ms DESC\r\n        OPTION(MAXDOP 1, RECOMPILE);\r\n        \r\n        \r\n        /*Figure out who's using a lot of CPU*/    \r\n        IF \r\n        (\r\n            SELECT \r\n                COUNT_BIG(*)\r\n            FROM sys.all_columns AS ac \r\n            WHERE ac.object_id = OBJECT_ID(N'sys.dm_exec_requests')\r\n            AND ac.name IN \r\n                (\r\n                    N'dop', \r\n                    N'parallel_worker_count'\r\n                ) \r\n        ) = 2\r\n        BEGIN\r\n            SET @cool_new_columns = 1;\r\n        END;\r\n        \r\n        SET @cpu_sql += N'\r\n        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n        \r\n        SELECT \r\n            der.session_id,\r\n            database_name = \r\n                DB_NAME(der.database_id),\r\n            der.start_time,           \r\n            query_text =\r\n                (\r\n                    SELECT\r\n                        [processing-instruction(query)] = \r\n                            SUBSTRING\r\n                            (\r\n                                dest.text, \r\n                                (der.statement_start_offset / 2) + 1,\r\n                                (\r\n                                    (\r\n                                        CASE \r\n                                            der.statement_end_offset \r\n                                            WHEN -1 \r\n                                            THEN DATALENGTH(dest.text) \r\n                                            ELSE der.statement_end_offset \r\n                                        END\r\n                                        - der.statement_start_offset \r\n                                    ) / 2 \r\n                                ) + 1\r\n                            ) \r\n                            FOR XML PATH(''''), \r\n                            TYPE\r\n                ),'\r\n            + CASE \r\n                  WHEN @skip_plan_xml = 0\r\n                  THEN N'\r\n            deqp.query_plan,'\r\n                  ELSE N''\r\n              END\r\n            + N'\r\n            statement_start_offset = \r\n                (der.statement_start_offset / 2) + 1,\r\n            statement_end_offset = \r\n                (\r\n                    (\r\n                        CASE der.statement_end_offset \r\n                            WHEN -1 \r\n                            THEN DATALENGTH(dest.text) \r\n                            ELSE der.statement_end_offset \r\n                        END \r\n                        - der.statement_start_offset \r\n                    ) / 2 \r\n                ) + 1,\r\n            der.plan_handle,\r\n            der.status,\r\n            der.blocking_session_id,\r\n            der.wait_type,\r\n            der.wait_time,\r\n            der.wait_resource,\r\n            der.cpu_time,\r\n            der.total_elapsed_time,\r\n            der.reads,\r\n            der.writes,\r\n            der.logical_reads,\r\n            granted_query_memory_mb = \r\n                (der.granted_query_memory / 128.),\r\n            transaction_isolation_level = \r\n                CASE \r\n                    WHEN der.transaction_isolation_level = 0 \r\n                    THEN ''Unspecified''\r\n                    WHEN der.transaction_isolation_level = 1 \r\n                    THEN ''Read Uncommitted''\r\n                    WHEN der.transaction_isolation_level = 2 \r\n                    AND  EXISTS \r\n                         (\r\n                             SELECT \r\n                                 1/0 \r\n                             FROM sys.dm_tran_active_snapshot_database_transactions AS trn \r\n                             WHERE der.session_id = trn.session_id \r\n                             AND   trn.is_snapshot = 0 \r\n                         ) \r\n                    THEN ''Read Committed Snapshot Isolation''\r\n                    WHEN der.transaction_isolation_level = 2 \r\n                    AND  NOT EXISTS \r\n                             (\r\n                                 SELECT \r\n                                     1/0 \r\n                                 FROM sys.dm_tran_active_snapshot_database_transactions AS trn \r\n                                 WHERE der.session_id = trn.session_id \r\n                                 AND   trn.is_snapshot = 0 \r\n                             ) \r\n                    THEN ''Read Committed''\r\n                    WHEN der.transaction_isolation_level = 3 \r\n                    THEN ''Repeatable Read''\r\n                    WHEN der.transaction_isolation_level = 4 \r\n                    THEN ''Serializable''\r\n                    WHEN der.transaction_isolation_level = 5 \r\n                    THEN ''Snapshot''\r\n                    ELSE ''???''\r\n                END'\r\n            + CASE \r\n                  WHEN @cool_new_columns = 1\r\n                  THEN N',\r\n            der.dop,\r\n            der.parallel_worker_count'\r\n                  ELSE N''\r\n              END\r\n            + CONVERT\r\n              (\r\n                  nvarchar(MAX), \r\n                  N'\r\n        FROM sys.dm_exec_requests AS der\r\n        CROSS APPLY sys.dm_exec_sql_text(der.plan_handle) AS dest\r\n        CROSS APPLY sys.dm_exec_query_plan(der.plan_handle) AS deqp\r\n        WHERE der.session_id <> @@SPID\r\n        AND   der.session_id >= 50\r\n        ORDER BY ' \r\n        + CASE \r\n              WHEN @cool_new_columns = 1\r\n              THEN N'\r\n        der.cpu_time DESC,\r\n        der.parallel_worker_count DESC\r\n        OPTION(MAXDOP 1, RECOMPILE);'\r\n              ELSE N'\r\n        der.cpu_time DESC\r\n        OPTION(MAXDOP 1, RECOMPILE);'\r\n          END\r\n              );\r\n        EXEC sys.sp_executesql \r\n            @cpu_sql;\r\n    \r\n    END;\r\n\r\nEND;"
}