{
  "id": "93d4a456-2c3c-4a77-9cad-05b8c39256e5",
  "prefix": "mvpOH_CommandExecute",
  "description": "CommandExecute (By Ola Hallengren)",
  "body": "USE [master]\r\nGO\r\n\r\n/****** Object:  StoredProcedure [dbo].[CommandExecute] ******/\r\nIF OBJECT_ID('[dbo].[CommandExecute]', 'P') IS NOT NULL\r\n\tDROP PROCEDURE [dbo].[CommandExecute];\r\nGO\r\n\r\n/****** Object:  StoredProcedure [dbo].[CommandExecute] ******/\r\nSET ANSI_NULLS ON\r\nGO\r\n\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\n\r\nCREATE PROCEDURE [dbo].[CommandExecute]\r\n\r\n@DatabaseContext NVARCHAR(MAX),\r\n@Command NVARCHAR(MAX),\r\n@CommandType NVARCHAR(MAX),\r\n@Mode INT,\r\n@Comment NVARCHAR(MAX) = NULL,\r\n@DatabaseName NVARCHAR(MAX) = NULL,\r\n@SchemaName NVARCHAR(MAX) = NULL,\r\n@ObjectName NVARCHAR(MAX) = NULL,\r\n@ObjectType NVARCHAR(MAX) = NULL,\r\n@IndexName NVARCHAR(MAX) = NULL,\r\n@IndexType INT = NULL,\r\n@StatisticsName NVARCHAR(MAX) = NULL,\r\n@PartitionNumber INT = NULL,\r\n@ExtendedInfo XML = NULL,\r\n@LockMessageSeverity INT = 16,\r\n@ExecuteAsUser NVARCHAR(MAX) = NULL,\r\n@LogToTable NVARCHAR(MAX),\r\n@Execute NVARCHAR(MAX)\r\n\r\nAS\r\n\r\nBEGIN\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Source:  https://ola.hallengren.com                                                        //--\r\n  --// License: https://ola.hallengren.com/license.html                                           //--\r\n  --// GitHub:  https://github.com/olahallengren/sql-server-maintenance-solution                  //--\r\n  --// Version: 2020-12-31 18:58:56                                                               //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET NOCOUNT ON\r\n\r\n  DECLARE @StartMessage nvarchar(max)\r\n  DECLARE @EndMessage nvarchar(max)\r\n  DECLARE @ErrorMessage nvarchar(max)\r\n  DECLARE @ErrorMessageOriginal nvarchar(max)\r\n  DECLARE @Severity int\r\n\r\n  DECLARE @Errors TABLE (ID int IDENTITY PRIMARY KEY,\r\n                         [Message] nvarchar(max) NOT NULL,\r\n                         Severity int NOT NULL,\r\n                         [State] int)\r\n\r\n  DECLARE @CurrentMessage nvarchar(max)\r\n  DECLARE @CurrentSeverity int\r\n  DECLARE @CurrentState int\r\n\r\n  DECLARE @sp_executesql nvarchar(max) = QUOTENAME(@DatabaseContext) + '.sys.sp_executesql'\r\n\r\n  DECLARE @StartTime datetime2\r\n  DECLARE @EndTime datetime2\r\n\r\n  DECLARE @ID int\r\n\r\n  DECLARE @Error int = 0\r\n  DECLARE @ReturnCode int = 0\r\n\r\n  DECLARE @EmptyLine nvarchar(max) = CHAR(9)\r\n\r\n  DECLARE @RevertCommand nvarchar(max)\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check core requirements                                                                    //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF NOT (SELECT [compatibility_level] FROM sys.databases WHERE database_id = DB_ID()) >= 90\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The database ' + QUOTENAME(DB_NAME(DB_ID())) + ' has to be in compatibility level 90 or higher.', 16, 1\r\n  END\r\n\r\n  IF NOT (SELECT uses_ansi_nulls FROM sys.sql_modules WHERE [object_id] = @@PROCID) = 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'ANSI_NULLS has to be set to ON for the stored procedure.', 16, 1\r\n  END\r\n\r\n  IF NOT (SELECT uses_quoted_identifier FROM sys.sql_modules WHERE [object_id] = @@PROCID) = 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'QUOTED_IDENTIFIER has to be set to ON for the stored procedure.', 16, 1\r\n  END\r\n\r\n  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The table CommandLog is missing. Download https://ola.hallengren.com/scripts/CommandLog.sql.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check input parameters                                                                     //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DatabaseContext IS NULL OR NOT EXISTS (SELECT * FROM sys.databases WHERE name = @DatabaseContext)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DatabaseContext is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Command IS NULL OR @Command = ''\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Command is not supported.', 16, 1\r\n  END\r\n\r\n  IF @CommandType IS NULL OR @CommandType = '' OR LEN(@CommandType) > 60\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CommandType is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Mode NOT IN(1,2) OR @Mode IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Mode is not supported.', 16, 1\r\n  END\r\n\r\n  IF @LockMessageSeverity NOT IN(10,16) OR @LockMessageSeverity IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @LockMessageSeverity is not supported.', 16, 1\r\n  END\r\n\r\n  IF LEN(@ExecuteAsUser) > 128\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ExecuteAsUser is not supported.', 16, 1\r\n  END\r\n\r\n  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @LogToTable is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Execute NOT IN('Y','N') OR @Execute IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Execute is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Raise errors                                                                               //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  DECLARE ErrorCursor CURSOR FAST_FORWARD FOR SELECT [Message], Severity, [State] FROM @Errors ORDER BY [ID] ASC\r\n\r\n  OPEN ErrorCursor\r\n\r\n  FETCH ErrorCursor INTO @CurrentMessage, @CurrentSeverity, @CurrentState\r\n\r\n  WHILE @@FETCH_STATUS = 0\r\n  BEGIN\r\n    RAISERROR('%s', @CurrentSeverity, @CurrentState, @CurrentMessage) WITH NOWAIT\r\n    RAISERROR(@EmptyLine, 10, 1) WITH NOWAIT\r\n\r\n    FETCH NEXT FROM ErrorCursor INTO @CurrentMessage, @CurrentSeverity, @CurrentState\r\n  END\r\n\r\n  CLOSE ErrorCursor\r\n\r\n  DEALLOCATE ErrorCursor\r\n\r\n  IF EXISTS (SELECT * FROM @Errors WHERE Severity >= 16)\r\n  BEGIN\r\n    SET @ReturnCode = 50000\r\n    GOTO ReturnCode\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Execute as user                                                                            //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @ExecuteAsUser IS NOT NULL\r\n  BEGIN\r\n    SET @Command = 'EXECUTE AS USER = ''' + REPLACE(@ExecuteAsUser,'''','''''') + '''; ' + @Command + '; REVERT;'\r\n\r\n    SET @RevertCommand = 'REVERT'\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Log initial information                                                                    //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @StartTime = SYSDATETIME()\r\n\r\n  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,@StartTime,120)\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Database context: ' + QUOTENAME(@DatabaseContext)\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Command: ' + @Command\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  IF @Comment IS NOT NULL\r\n  BEGIN\r\n    SET @StartMessage = 'Comment: ' + @Comment\r\n    RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n  END\r\n\r\n  IF @LogToTable = 'Y'\r\n  BEGIN\r\n    INSERT INTO dbo.CommandLog (DatabaseName, SchemaName, ObjectName, ObjectType, IndexName, IndexType, StatisticsName, PartitionNumber, ExtendedInfo, CommandType, Command, StartTime)\r\n    VALUES (@DatabaseName, @SchemaName, @ObjectName, @ObjectType, @IndexName, @IndexType, @StatisticsName, @PartitionNumber, @ExtendedInfo, @CommandType, @Command, @StartTime)\r\n  END\r\n\r\n  SET @ID = SCOPE_IDENTITY()\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Execute command                                                                            //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Mode = 1 AND @Execute = 'Y'\r\n  BEGIN\r\n    EXECUTE @sp_executesql @stmt = @Command\r\n    SET @Error = @@ERROR\r\n    SET @ReturnCode = @Error\r\n  END\r\n\r\n  IF @Mode = 2 AND @Execute = 'Y'\r\n  BEGIN\r\n    BEGIN TRY\r\n      EXECUTE @sp_executesql @stmt = @Command\r\n    END TRY\r\n    BEGIN CATCH\r\n      SET @Error = ERROR_NUMBER()\r\n      SET @ErrorMessageOriginal = ERROR_MESSAGE()\r\n\r\n      SET @ErrorMessage = 'Msg ' + CAST(ERROR_NUMBER() AS nvarchar) + ', ' + ISNULL(ERROR_MESSAGE(),'')\r\n      SET @Severity = CASE WHEN ERROR_NUMBER() IN(1205,1222) THEN @LockMessageSeverity ELSE 16 END\r\n      RAISERROR('%s',@Severity,1,@ErrorMessage) WITH NOWAIT\r\n\r\n      IF NOT (ERROR_NUMBER() IN(1205,1222) AND @LockMessageSeverity = 10)\r\n      BEGIN\r\n        SET @ReturnCode = ERROR_NUMBER()\r\n      END\r\n\r\n      IF @ExecuteAsUser IS NOT NULL\r\n      BEGIN\r\n        EXECUTE @sp_executesql @RevertCommand\r\n      END\r\n    END CATCH\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Log completing information                                                                 //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @EndTime = SYSDATETIME()\r\n\r\n  SET @EndMessage = 'Outcome: ' + CASE WHEN @Execute = 'N' THEN 'Not Executed' WHEN @Error = 0 THEN 'Succeeded' ELSE 'Failed' END\r\n  RAISERROR('%s',10,1,@EndMessage) WITH NOWAIT\r\n\r\n  SET @EndMessage = 'Duration: ' + CASE WHEN (DATEDIFF(SECOND,@StartTime,@EndTime) / (24 * 3600)) > 0 THEN CAST((DATEDIFF(SECOND,@StartTime,@EndTime) / (24 * 3600)) AS NVARCHAR) + '.' ELSE '' END + CONVERT(NVARCHAR,DATEADD(SECOND,DATEDIFF(SECOND,@StartTime,@EndTime),'1900-01-01'),108)\r\n  RAISERROR('%s',10,1,@EndMessage) WITH NOWAIT\r\n\r\n  SET @EndMessage = 'Date and time: ' + CONVERT(NVARCHAR,@EndTime,120)\r\n  RAISERROR('%s',10,1,@EndMessage) WITH NOWAIT\r\n\r\n  RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n  IF @LogToTable = 'Y'\r\n  BEGIN\r\n    UPDATE dbo.CommandLog\r\n    SET EndTime = @EndTime,\r\n        ErrorNumber = CASE WHEN @Execute = 'N' THEN NULL ELSE @Error END,\r\n        ErrorMessage = @ErrorMessageOriginal\r\n    WHERE ID = @ID\r\n  END\r\n\r\n  ReturnCode:\r\n  IF @ReturnCode <> 0\r\n  BEGIN\r\n    RETURN @ReturnCode\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\nEND\r\nGO\r\n\r\n\r\n"
}