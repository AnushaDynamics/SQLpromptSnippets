{
  "id": "9be95094-4c35-4448-bb6b-b4868842472b",
  "prefix": "mvpAY_sp_helpExpandView",
  "description": "sp_helpExpandView will take a view & return a list of all objects referenced underneath.",
  "body": "USE Master;\r\nGO\r\nIF OBJECTPROPERTY(OBJECT_ID('sp_helpExpandView'), 'IsProcedure') = 1\r\n\tDROP PROCEDURE dbo.sp_helpExpandView\r\nGO\r\n/*===============================================================================\r\n-- sp_helpExpandView\r\n-- https://github.com/SQLBek/sp_helpExpandView\r\n-- Written By: Andy Yun\r\n-- Created On: 2015-02-27\r\n-- \r\n-- Summary:\r\n-- This tool script was written to aid in de-constructing nested views and\r\n-- identifying all base objects underneath.  \r\n--\r\n-- Supports:\r\n--      Scalar & Table-Valued Functions\r\n--      Schemas\r\n--      Synonyms to other DBs\r\n--\r\n-- \r\n-- Updates:\r\n-- Date\t\t\tDeveloper\tRemarks\r\n-- 2015-03-02\tAYun\t\tV1: Initial Release\r\n-- 2015-03-03\tAYun\t\tV2: Rewrote to properly handle external database \r\n--\t\t\t\t\t\t\treferences in child objects. \r\n-- 2015-03-03\tAYun\t\tV2.1: Tweaked to remove duplicate results.\r\n--\t\t\t\t\t\t\tAdded sorting to output\r\n-- 2015-03-09\tAYun\t\tV2.11: Adjusted horizontal output ORDER BY clause.\r\n-- 2015-03-30\tAYun\t\tV2.2: New Output - List all objects referenced & count\r\n-- 2015-05-20\tAYun\t\tV2.3: Corrected CURSOR & Database Name with space issue. \r\n--\t\t\t\t\t\t\tThanks Mickey Stuewe!\r\n-- 2016-05-05\tAYun\t\tV2.4: Corrected TINYINT overflow\r\n--\t\t\t\t\t\t\tThanks Erin Stellato!\r\n--\r\n--\t\t\t\t\t\t\tAdded Child_DBName to output for @ShowObjectCount = 1, \r\n--\t\t\t\t\t\t\taiding in multi-database view scenarios.\r\n--\t\t\t\t\t\t\tThanks Mickey Stuewe!\r\n---------------------------------------------------------------------------------\r\n-- License: \r\n-- This code is free to use for personal, educational, and internal corporate \r\n-- purposes provided that this header is preserved. \r\n-- (c) 2015 Andy Yun\r\n===============================================================================*/\r\nCREATE PROCEDURE dbo.sp_helpExpandView (\r\n\t@ViewName NVARCHAR(512),\r\n\t@OutputFormat VARCHAR(15) = 'All',\r\n\t@ShowObjectCount BIT = 0,\r\n\t@Debug BIT = 0\r\n)\r\nAS\r\nBEGIN\r\nBEGIN TRY\r\n\tIF OBJECT_ID(@ViewName) IS NULL\r\n\tBEGIN\r\n\t\tRAISERROR('@ViewName undefined or does not exist.', 11, 1);\r\n\tEND\r\n\r\n\tDECLARE @BaseObject_DBName NVARCHAR(256),\r\n\t\t@ChildObjectsFound SMALLINT = 1,\r\n\t\t@HierarchyLevelToSearch SMALLINT = 1,\r\n\t\t@MinObjectHierarchyID INT = 0,\r\n\t\t@TmpObjectHierarchyID INT = NULL,\r\n\t\t@MaxObjectHierarchyID INT = 1,\r\n\t\t@DBName NVARCHAR(256),\r\n\t\t@sqlCMD NVARCHAR(4000);\r\n\r\n\t-- sys.dm_sql_referenced_entities() dislikes brackets. Must strip out.\r\n\tSET @ViewName = REPLACE(REPLACE(@ViewName, ']', ''), '[', '');\r\n\r\n\t-- if no schema specified, append dbo\r\n\tIF CHARINDEX('.', @ViewName, 1) = 0\r\n\t\tSET @ViewName = 'dbo.' + @ViewName;\r\n\r\n\tIF @Debug = 1 SELECT '@ViewName', @ViewName\r\n\r\n\t-----\r\n\t-- Temp Tables\r\n\tIF OBJECT_ID('tempdb.dbo.#tmpObjectHierarchy', 'U') IS NOT NULL\r\n\t\tDROP TABLE #tmpObjectHierarchy;\r\n\r\n\tIF OBJECT_ID('tempdb.dbo.#tmpAllObjects', 'U') IS NOT NULL\r\n\t\tDROP TABLE #tmpAllObjects;\r\n\r\n\tIF OBJECT_ID('tempdb.dbo.#tmpExternalObjectsToProcess', 'U') IS NOT NULL\r\n\t\tDROP TABLE #tmpExternalObjectsToProcess;\r\n\r\n\t-- Create final output table containing full object hierarchy\r\n\tCREATE TABLE #tmpObjectHierarchy (\r\n\t\tObjectHierarchyID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,\r\n\t\tHierarchyLvl SMALLINT,\r\n\r\n\t\tBaseObject_DBName NVARCHAR(512),\r\n\t\tBaseObject_FullName NVARCHAR(512),\r\n\r\n\t\tChild_DBName NVARCHAR(512),\r\n\t\tChild_SchemaName NVARCHAR(256),\r\n\t\tChild_ObjectName NVARCHAR(256),\r\n\t\tChild_FullName NVARCHAR(512),\r\n\t\tChild_Type CHAR(2),\r\n\t\tChild_ObjectID INT,\r\n\t\tSynonym_BaseObjectName NVARCHAR(1035),\r\n\t\tSynonym_BaseObjectType NVARCHAR(2),\r\n\t\tParentObjectHierarchyID INT\r\n\t\t);\r\n\r\n\t-- Populate #tmpObjectHierarchy with base level data\r\n\tINSERT INTO #tmpObjectHierarchy (\r\n\t\tBaseObject_DBName,\r\n\t\tBaseObject_FullName,\r\n\t\tChild_FullName,\r\n\t\tChild_SchemaName,\r\n\t\tChild_ObjectName,\r\n\t\tChild_Type,\r\n\t\tChild_ObjectID,\r\n\t\tHierarchyLvl,\r\n\t\tChild_DBName,\r\n\t\tParentObjectHierarchyID\r\n\t\t)\r\n\tSELECT DISTINCT\r\n\t\tDB_NAME(),\r\n\t\t@ViewName,\r\n\t\tCOALESCE(schemas.name, dm_sql_referenced_entities.referenced_schema_name) + '.' + dm_sql_referenced_entities.referenced_entity_name, \r\n\t\tCOALESCE(schemas.name, dm_sql_referenced_entities.referenced_schema_name),\r\n\t\tdm_sql_referenced_entities.referenced_entity_name,\r\n\t\tCOALESCE(schemas.type, NULL),\r\n\t\tdm_sql_referenced_entities.referenced_id,\r\n\t\t1 AS HierarchyLvl,\r\n\t\tCOALESCE(dm_sql_referenced_entities.referenced_database_name, DB_NAME()),\r\n\t\t0 AS ParentObjectHierarchyID\r\n\tFROM sys.dm_sql_referenced_entities(@ViewName, 'OBJECT')\r\n\tLEFT OUTER JOIN (\r\n\t\tSELECT objects.object_id, schemas.name, objects.type\r\n\t\tFROM sys.objects\r\n\t\tINNER JOIN sys.schemas\r\n\t\t\tON objects.schema_id = schemas.schema_id\r\n\t) schemas\r\n\t\tON dm_sql_referenced_entities.referenced_id = schemas.object_id\r\n\tWHERE referenced_minor_id = 0;\r\n\r\n\tSELECT @MaxObjectHierarchyID = MAX(ObjectHierarchyID)\r\n\tFROM #tmpObjectHierarchy;\r\n\r\n\tIF @Debug = 1 SELECT '#tmpObjectHierarchy', * FROM #tmpObjectHierarchy;\r\n\r\n\t--SELECT '1-#tmpObjectHierarchy', * FROM #tmpObjectHierarchy;\r\n\r\n\t-----\r\n\t-- Loop for each new Hierarchy Level #tmpObjectHierarchy\r\n\tWHILE @MinObjectHierarchyID < @MaxObjectHierarchyID\r\n\tBEGIN\r\n\t\tIF @Debug = 1 SELECT @MinObjectHierarchyID AS '@MinObjectHierarchyID', @MaxObjectHierarchyID AS '@MaxObjectHierarchyID';\r\n\r\n\t\t-----\r\n\t\t-- For each DB found in #tmpObjectHierarchy, loop through each recordset of each Database\r\n\t\tDECLARE cursorEachDatabase CURSOR FAST_FORWARD\r\n\t\tFOR\r\n\t\tSELECT DISTINCT Child_DBName\r\n\t\tFROM #tmpObjectHierarchy;\r\n\r\n\t\tOPEN cursorEachDatabase;\r\n\r\n\t\tFETCH NEXT\r\n\t\tFROM cursorEachDatabase\r\n\t\tINTO @DBName\r\n\r\n\t\tWHILE @@FETCH_STATUS = 0\r\n\t\tBEGIN\r\n\t\t\tIF @Debug = 1 SELECT @DBName AS '@DBName';\r\n\t\t\t\r\n\t\t\tSET @sqlCMD = N'\r\n\t\t\tINSERT INTO #tmpObjectHierarchy (\r\n\t\t\t\tBaseObject_DBName,\r\n\t\t\t\tBaseObject_FullName,\r\n\t\t\t\tChild_FullName,\r\n\t\t\t\tChild_SchemaName,\r\n\t\t\t\tChild_ObjectName,\r\n\t\t\t\tChild_ObjectID,\r\n\t\t\t\tChild_Type,\r\n\t\t\t\tHierarchyLvl,\r\n\t\t\t\tChild_DBName,\r\n\t\t\t\tParentObjectHierarchyID\r\n\t\t\t\t)\r\n\t\t\tSELECT DISTINCT\r\n\t\t\t\t#tmpObjectHierarchy.Child_DBName,\r\n\t\t\t\t#tmpObjectHierarchy.Child_FullName,\r\n\t\t\t\tCOALESCE(dm_sql_referenced_entities.referenced_schema_name, schemas.name) + ''.'' + dm_sql_referenced_entities.referenced_entity_name,\r\n\t\t\t\tCOALESCE(dm_sql_referenced_entities.referenced_schema_name, schemas.name),\r\n\t\t\t\tdm_sql_referenced_entities.referenced_entity_name,\r\n\t\t\t\tdm_sql_referenced_entities.referenced_id,\r\n\t\t\t\tCOALESCE(schemas.type, NULL),\r\n\t\t\t\t#tmpObjectHierarchy.HierarchyLvl + 1 AS HierarchyLvl,\r\n\t\t\t\tCOALESCE(dm_sql_referenced_entities.referenced_database_name, #tmpObjectHierarchy.Child_DBName),\r\n\t\t\t\t#tmpObjectHierarchy.ObjectHierarchyID\r\n\t\t\tFROM #tmpObjectHierarchy\r\n\t\t\tCROSS APPLY [@DatabaseName].sys.dm_sql_referenced_entities(#tmpObjectHierarchy.Child_FullName, ''OBJECT'')\r\n\t\t\tLEFT OUTER JOIN (\r\n\t\t\t\tSELECT objects.object_id, schemas.name, objects.type\r\n\t\t\t\tFROM [@DatabaseName].sys.objects\r\n\t\t\t\tINNER JOIN [@DatabaseName].sys.schemas\r\n\t\t\t\t\tON objects.schema_id = schemas.schema_id\r\n\t\t\t) schemas\r\n\t\t\t\tON dm_sql_referenced_entities.referenced_id = schemas.object_id\r\n\t\t\tWHERE dm_sql_referenced_entities.referenced_minor_id = 0\r\n\t\t\t\tAND #tmpObjectHierarchy.Child_DBName = ''@DatabaseName''\r\n\t\t\t\tAND #tmpObjectHierarchy.ObjectHierarchyID >= @MinObjectHierarchyID;'\r\n\r\n\t\t\tSET @sqlCMD = REPLACE(@sqlCMD, '@MinObjectHierarchyID', @MinObjectHierarchyID)\r\n\t\t\tSET @sqlCMD = REPLACE(@sqlCMD, '@HierarchyLevelToSearch', @HierarchyLevelToSearch)\r\n\t\t\tSET @sqlCMD = REPLACE(@sqlCMD, '@DatabaseName', @DBName)\r\n\r\n\t\t\tIF @Debug = 1 PRINT @sqlCMD;\r\n\t\t\t\r\n\t\t\tEXECUTE sp_executesql @sqlCMD\r\n\r\n\t\t\t-- Must identify if any of these objects are synonyms.\r\n\t\t\tSET @sqlCMD = N'\r\n\t\t\t-- Update synonym objects with fully qualified base_object_name values\r\n\t\t\tUPDATE #tmpObjectHierarchy\r\n\t\t\tSET Child_Type = synonyms.type,\r\n\t\t\t\tChild_DBName = PARSENAME(synonyms.base_object_name, 3),\r\n\t\t\t\tSynonym_BaseObjectName = synonyms.base_object_name\r\n\t\t\tFROM [@DatabaseName].sys.synonyms\r\n\t\t\tINNER JOIN [@DatabaseName].sys.schemas\r\n\t\t\t\tON synonyms.schema_id = schemas.schema_id\r\n\t\t\tWHERE #tmpObjectHierarchy.Child_DBName = ''@DatabaseName''\r\n\t\t\t\tAND #tmpObjectHierarchy.ObjectHierarchyID >= @MinObjectHierarchyID\r\n\t\t\t\tAND synonyms.object_id = #tmpObjectHierarchy.Child_ObjectID;';\r\n\r\n\t\t\tSET @sqlCMD = REPLACE(@sqlCMD, '@MinObjectHierarchyID', @MinObjectHierarchyID)\r\n\t\t\tSET @sqlCMD = REPLACE(@sqlCMD, '@DatabaseName', @DBName)\r\n\r\n\t\t\tIF @Debug = 1 PRINT @sqlCMD;\r\n\r\n\t\t\tEXECUTE sp_executesql @sqlCMD\r\n\r\n\t\t\tFETCH NEXT\r\n\t\t\tFROM cursorEachDatabase\r\n\t\t\tINTO @DBName\r\n\t\tEND\r\n\r\n\t\tCLOSE cursorEachDatabase;\r\n\t\tDEALLOCATE cursorEachDatabase;\r\n\r\n\t\tSELECT \r\n\t\t\t@TmpObjectHierarchyID = @MinObjectHierarchyID,\r\n\t\t\t@MinObjectHierarchyID = @MaxObjectHierarchyID + 1,\r\n\t\t\t@MaxObjectHierarchyID = MAX(ObjectHierarchyID)\r\n\t\tFROM #tmpObjectHierarchy;\r\n\t\t\r\n\t\t-- Serialize \r\n\t\tINSERT INTO #tmpObjectHierarchy (\r\n\t\t\tBaseObject_DBName,\r\n\t\t\tBaseObject_FullName,\r\n\t\t\tChild_FullName,\r\n\t\t\tChild_SchemaName,\r\n\t\t\tChild_ObjectName,\r\n\t\t\tChild_ObjectID,\r\n\t\t\tHierarchyLvl,\r\n\t\t\tChild_DBName,\r\n\t\t\tParentObjectHierarchyID\r\n\t\t\t)\r\n\t\tSELECT DISTINCT\r\n\t\t\t#tmpObjectHierarchy.BaseObject_DBName AS BaseObject_DBName,\r\n\t\t\t#tmpObjectHierarchy.Child_FullName AS BaseObject_FullName,\r\n\t\t\tPARSENAME(Synonym_BaseObjectName, 2) + '.' + PARSENAME(Synonym_BaseObjectName, 1) AS Child_FullName,\r\n\t\t\tPARSENAME(Synonym_BaseObjectName, 2) AS Child_SchemaName,\r\n\t\t\tPARSENAME(Synonym_BaseObjectName, 1) AS Child_ObjectName,\r\n\t\t\tOBJECT_ID(#tmpObjectHierarchy.Synonym_BaseObjectName) AS Child_ObjectID,\r\n\t\t\t#tmpObjectHierarchy.HierarchyLvl + 1 AS HierarchyLvl,\r\n\t\t\t#tmpObjectHierarchy.Child_DBName AS Child_DBName,\r\n\t\t\t#tmpObjectHierarchy.ObjectHierarchyID AS ParentObjectHierarchyID\t\t\r\n\t\tFROM #tmpObjectHierarchy\r\n\t\tWHERE #tmpObjectHierarchy.Child_Type = 'SN'\r\n\t\t\tAND #tmpObjectHierarchy.ObjectHierarchyID > @TmpObjectHierarchyID;\r\n\t\t\t\r\n\t\tIF @Debug = 1 SELECT '2-#tmpObjectHierarchy', * FROM #tmpObjectHierarchy;\r\n\tEND\r\n\r\n\tIF @Debug = 1 SELECT '3-#tmpObjectHierarchy', * FROM #tmpObjectHierarchy;\r\n\t\t\r\n\t-- All children of synonyms will be missing a Type.  Need to go back through all DBs and materialize these.\r\n\tIF EXISTS(SELECT 1 FROM #tmpObjectHierarchy WHERE Child_Type IS NULL)\r\n\tBEGIN\r\n\r\n\t\t-----\r\n\t\t-- For each DB found in #tmpObjectHierarchy, loop through each recordset of each Database\r\n\t\tDECLARE cursorEachDatabase_2 CURSOR FAST_FORWARD\r\n\t\tFOR\r\n\t\tSELECT DISTINCT Child_DBName\r\n\t\tFROM #tmpObjectHierarchy\r\n\t\tWHERE Child_Type IS NULL;\r\n\r\n\t\tOPEN cursorEachDatabase_2;\r\n\r\n\t\tFETCH NEXT\r\n\t\tFROM cursorEachDatabase_2\r\n\t\tINTO @DBName\r\n\r\n\t\tWHILE @@FETCH_STATUS = 0\r\n\t\tBEGIN\r\n\t\t\tIF @Debug = 1 SELECT @DBName AS '@DBName';\r\n\r\n\t\t\tSET @sqlCMD = N'\r\n\t\t\tUPDATE #tmpObjectHierarchy\r\n\t\t\tSET Child_Type = objects.type\r\n\t\t\tFROM [@DatabaseName].sys.objects\r\n\t\t\tWHERE #tmpObjectHierarchy.Child_DBName = ''@DatabaseName''\r\n\t\t\t\tAND #tmpObjectHierarchy.Child_Type IS NULL\r\n\t\t\t\tAND #tmpObjectHierarchy.Child_ObjectID = objects.object_id;';\r\n\r\n\t\t\tSET @sqlCMD = REPLACE(@sqlCMD, '@DatabaseName', @DBName)\r\n\r\n\t\t\tIF @Debug = 1 PRINT @sqlCMD;\r\n\r\n\t\t\tEXECUTE sp_executesql @sqlCMD\r\n\r\n\t\t\tFETCH NEXT\r\n\t\t\tFROM cursorEachDatabase_2\r\n\t\t\tINTO @DBName\r\n\t\tEND\r\n\r\n\t\tCLOSE cursorEachDatabase_2;\r\n\t\tDEALLOCATE cursorEachDatabase_2;\r\n\r\n\tEND\r\n\r\n\t-----\r\n\t-- Unflattened Output\r\n\tIF (\r\n\t\t\t@OutputFormat = 'Vertical'\r\n\t\t\tOR @OutputFormat = 'All'\r\n\t\t\t)\r\n\tBEGIN\r\n\t\tSELECT DISTINCT\r\n\t\t\tHierarchyLvl,\r\n\t\t\tBaseObject_FullName,\r\n\t\t\tChild_DBName,\r\n\t\t\tChild_FullName,\r\n\t\t\tChild_Type,\r\n\t\t\tObjectHierarchyID,\r\n\t\t\tParentObjectHierarchyID\r\n\t\tFROM #tmpObjectHierarchy\r\n\t\tORDER BY HierarchyLvl,\r\n\t\t\tBaseObject_FullName,\r\n\t\t\tChild_DBName,\r\n\t\t\tChild_FullName\r\n\tEND\r\n\r\n\t-----\r\n\t-- Dynamically create flattened output\r\n\tIF (\r\n\t\t\t@OutputFormat = 'Horizontal'\r\n\t\t\tOR @OutputFormat = 'All'\r\n\t\t\t)\r\n\tBEGIN\r\n\t\tDECLARE @MaxHierarchyID INT,\r\n\t\t\t@HierarchyID INT = 2;\r\n\r\n\t\tSELECT @MaxHierarchyID = MAX(HierarchyLvl)\r\n\t\tFROM #tmpObjectHierarchy;\r\n\r\n\t\tDECLARE @sqlSelect NVARCHAR(4000) = N'\r\n\t\tSELECT DISTINCT\r\n\t\t\tLvl1.BaseObject_FullName\r\n\t\t\t, Lvl1.HierarchyLvl AS Lvl_1\r\n\t\t\t, Lvl1.Child_FullName AS Obj_1\r\n\t\t\t, Lvl1.Child_Type AS Typ_1',\r\n\t\t\t@sqlFrom NVARCHAR(4000) = N'\r\n\t\tFROM #tmpObjectHierarchy Lvl1';\r\n\r\n\t\tWHILE @HierarchyID <= @MaxHierarchyID\r\n\t\tBEGIN\r\n\t\t\tSET @sqlSelect = @sqlSelect + N'\r\n\t\t\t, COALESCE(Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.HierarchyLvl, ''' + CAST(@HierarchyID AS NVARCHAR(4000)) + ''') AS Lvl_' + CAST(@HierarchyID AS NVARCHAR(4000)) + '\r\n\t\t\t, COALESCE(Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.Child_FullName, SPACE(0)) AS Obj_' + CAST(@HierarchyID AS NVARCHAR(4000)) + '\r\n\t\t\t, COALESCE(Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.Child_Type, SPACE(0)) AS Typ_' + CAST(@HierarchyID AS NVARCHAR(4000));\r\n\t\t\tSET @sqlFrom = @sqlFrom + N'\r\n\t\tLEFT OUTER JOIN #tmpObjectHierarchy Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '\r\n\t\t\tON Lvl' + CAST((@HierarchyID - 1) AS NVARCHAR(4000)) + '.ObjectHierarchyID = Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.ParentObjectHierarchyID\r\n\t\t\tAND Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.HierarchyLvl = ' + CAST(@HierarchyID AS NVARCHAR(4000));\r\n\t\t\tSET @HierarchyID = @HierarchyID + 1;\r\n\t\tEND\r\n\r\n\t\tSET @sqlCMD = @sqlSelect + @sqlFrom + N'\r\n\t\tWHERE Lvl1.HierarchyLvl = 1\r\n\t\tORDER BY Lvl1.BaseObject_FullName, Lvl1.HierarchyLvl, Lvl1.Child_FullName;';\r\n\r\n\t\tEXEC sp_executesql @sqlCMD;\r\n\tEND\r\n\r\n\t-----\r\n\t-- If enabled, show list of all objects referenced & # of times referenced.\r\n\tIF @ShowObjectCount = 1\r\n\tBEGIN\r\n\t\tSELECT \r\n\t\t\tCASE\r\n\t\t\t\tWHEN #tmpObjectHierarchy.Child_Type = 'U'\r\n\t\t\t\t\tTHEN 'User Table'\r\n\t\t\t\tWHEN #tmpObjectHierarchy.Child_Type = 'S'\r\n\t\t\t\t\tTHEN 'System Table'\r\n\t\t\t\tWHEN #tmpObjectHierarchy.Child_Type = 'V'\r\n\t\t\t\t\tTHEN 'View'\r\n\t\t\t\tWHEN #tmpObjectHierarchy.Child_Type = 'FN'\r\n\t\t\t\t\tTHEN 'Scalar Function'\r\n\t\t\t\tWHEN #tmpObjectHierarchy.Child_Type = 'IF'\r\n\t\t\t\t\tTHEN 'Inline Function'\r\n\t\t\t\tWHEN #tmpObjectHierarchy.Child_Type = 'TF'\r\n\t\t\t\t\tTHEN 'Table Valued Function'\r\n\t\t\t\tWHEN #tmpObjectHierarchy.Child_Type = 'P'\r\n\t\t\t\t\tTHEN 'Stored Procedure'\r\n\t\t\t\tWHEN #tmpObjectHierarchy.Child_Type = 'SN'\r\n\t\t\t\t\tTHEN 'Synonym'\r\n\t\t\t\tELSE #tmpObjectHierarchy.Child_Type  \r\n\t\t\tEND AS ObjectType,\r\n\t\t\t#tmpObjectHierarchy.Child_DBName,\r\n\t\t\t#tmpObjectHierarchy.Child_FullName AS Object_FullName,\r\n\t\t\tCOUNT(1) AS ReferencedObjectCount\r\n\t\tFROM #tmpObjectHierarchy\r\n\t\tGROUP BY #tmpObjectHierarchy.Child_Type, \r\n\t\t\t#tmpObjectHierarchy.Child_DBName,\r\n\t\t\t#tmpObjectHierarchy.Child_FullName\r\n\t\tORDER BY ObjectType, \r\n\t\t\t#tmpObjectHierarchy.Child_DBName,\r\n\t\t\t#tmpObjectHierarchy.Child_FullName\r\n\tEND\r\nEND TRY\r\nBEGIN CATCH\r\n\tIF (SELECT CURSOR_STATUS('global','cursorEachDatabase')) >= -1\r\n\tBEGIN\r\n\t\tDEALLOCATE cursorEachDatabase\r\n\tEND\r\n\r\n\tIF (SELECT CURSOR_STATUS('global','cursorEachDatabase_2')) >= -1\r\n\tBEGIN\r\n\t\tDEALLOCATE cursorEachDatabase_2\r\n\tEND\r\n\r\n\tDECLARE \r\n\t\t@ErrorNumber INT,\r\n\t\t@ErrorSeverity INT,\r\n\t\t@ErrorState INT,\r\n\t\t@ErrorProcedure NVARCHAR(128),\r\n\t\t@ErrorLine INT,\r\n\t\t@ErrorMessage NVARCHAR(4000);\t\r\n\t\t\r\n\tSELECT\r\n\t\t@ErrorNumber = ERROR_NUMBER(),\r\n\t\t@ErrorSeverity = ERROR_SEVERITY(),\r\n\t\t@ErrorState = ERROR_STATE(),\r\n\t\t@ErrorProcedure = ERROR_PROCEDURE(),\r\n\t\t@ErrorLine = ERROR_LINE(),\r\n\t\t@ErrorMessage = ERROR_MESSAGE();\r\n\t\r\n\tSELECT\r\n\t\t@ErrorNumber AS ErrorNumber,\r\n\t\t@ErrorSeverity AS ErrorSeverity,\r\n\t\t@ErrorState AS ErrorState,\r\n\t\t@ErrorProcedure AS ErrorProcedure,\r\n\t\t@ErrorLine AS ErrorLine,\r\n\t\t@ErrorMessage AS ErrorMessage;\r\nEND CATCH\r\nEND\r\nGO\r\n\r\nEXEC sys.sp_MS_marksystemobject 'sp_helpExpandView';\r\nGO\r\n\r\n"
}