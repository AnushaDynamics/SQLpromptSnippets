{
  "id": "7f9b9a4b-2003-43be-aa22-bc644062939c",
  "prefix": "GetTableRowCountDifference",
  "description": "Get Table Row Count Difference Between Source and Target Databases",
  "body": "/* =============================================================================================================================================================\r\n-- Server\t\t: LOCAL SERVER\r\n-- Database\t\t: @SourceDatabase[Reference Database] (or) @TargetDatabase[To Check Database]\r\n-- Script\t\t: GetRowCountDifference\r\n-- Description\t: Get Table Row Count Difference Between Source and Target Databases\r\n============================================================================================================================================================= */\r\nUSE <$SourceDatabase$> OR <$TargetDatabase$>;\r\nGO\r\n--\r\nDECLARE @SourceDatabase VARCHAR(256) = '$SourceDatabase$';--Reference Database\r\nDECLARE @TargetDatabase VARCHAR(256) = '$TargetDatabase$';--To Check Database\r\nDECLARE @SchemaName VARCHAR(256) = NULL; --Optional\r\nDECLARE @TableName VARCHAR(256) = NULL; --Optional\r\n/** DONOT CHANGE CODE BELOW ***********************************************************************************************************************************/\r\nSET NOCOUNT ON;\r\nDECLARE @SCHname VARCHAR(256), @TBLname VARCHAR(1024), @RowCount INT;\r\nDECLARE @SQLcmd NVARCHAR(MAX);\r\n--\r\n--$BeginRegion: Get TableList from Reference Database\r\nDECLARE @TableList TABLE (SCHname VARCHAR(256) NULL, TBLname VARCHAR(1024) NULL);\r\nSET @SQLcmd = \r\n\tN'SELECT TABLE_SCHEMA, TABLE_NAME FROM ' + @SourceDatabase + N'.INFORMATION_SCHEMA.TABLES ' + CHAR(10) +\r\n\tN'WHERE TABLE_TYPE = ''BASE TABLE'''\r\n\t\t+ CASE WHEN @SchemaName IS NOT NULL THEN ' AND TABLE_SCHEMA LIKE ''%' + @SchemaName + '%''' ELSE '' END\r\n\t\t+ CASE WHEN @TableName IS NOT NULL THEN ' AND TABLE_NAME LIKE ''%' + @TableName + '%''' ELSE '' END\r\n\t\t+ ';';\r\n--PRINT @SQLcmd;\r\nINSERT INTO @TableList (SCHname, TBLname)\r\nEXECUTE sys.sp_executesql @Command = @SQLcmd;\r\n--$EndRegion: Get TableList from Reference Database\r\n--\r\n--SELECT * FROM @TableList AS TL\r\n--$BeginRegion: RowCount Difference Check\r\nDECLARE @COMPARISONTABLE TABLE \r\n\t(SchemaName VARCHAR(256) NULL, TableName VARCHAR(1024) NULL, SourceRowCount INT NULL, TargetRowCount INT NULL, RowDiff INT NULL,\r\n\t CheckSelectQueryV1 VARCHAR(MAX) NULL, CheckSelectQueryV2 VARCHAR(MAX) NULL);\r\n--\r\nDECLARE @TableColumns TABLE\r\n(\r\n\tColID INT NULL, --ORDINAL_POSITION\r\n\tColumnName VARCHAR(256) NULL,\r\n\tColumnDataType VARCHAR(64) NULL,\r\n\tIsPrimaryKeyCol BIT NULL,\r\n\tIsComputedCol BIT NULL,\r\n\tIsIdentityCol BIT NULL\r\n);\r\nDECLARE @SelColListV1S VARCHAR(MAX), @SelColListV1T VARCHAR(MAX), @SelColListV2 VARCHAR(MAX);\r\nDECLARE @OnColList VARCHAR(MAX), @WhereColList AS VARCHAR(MAX);\r\n--\r\nDECLARE TableCursor CURSOR LOCAL FAST_FORWARD FOR SELECT SCHname, TBLname FROM @TableList;\r\nOPEN TableCursor;\r\nFETCH NEXT FROM TableCursor INTO @SCHname, @TBLname;\r\nWHILE @@FETCH_STATUS = 0\r\n\tBEGIN\r\n\t\t--$BeginRegion: RowCount from Reference Database Table\r\n\t\tSELECT @RowCount = NULL;\r\n\t\tSET @SQLcmd = N'SELECT @RowCountOUT = COUNT(*) FROM [' + @SourceDatabase + N'].[' + @SCHname + N'].[' + @TBLname + '];';\r\n\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\tINSERT INTO @COMPARISONTABLE (SchemaName, TableName, SourceRowCount) VALUES (@SCHname, @TBLname, @RowCount);\r\n\t\t--$EndRegion: RowCount from Reference Database Table\r\n\t\t--\r\n\t\t--$BeginRegion: RowCount from Check Database Table\r\n\t\tSELECT @RowCount = NULL;\r\n\t\tBEGIN TRY\r\n\t\t\tSET @SQLcmd = N'SELECT @RowCountOUT = COUNT(*) FROM [' + @TargetDatabase + N'].[' + @SCHname + N'].[' + @TBLname + '];';\r\n\t\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\t\tUPDATE @COMPARISONTABLE SET TargetRowCount = @RowCount, RowDiff = (@RowCount-SourceRowCount) WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\t--\r\n\t\t\t--$BeginRegion: Check Query Formation w.r.to @SCH and @TBL\r\n\t\t\tDELETE @TableColumns WHERE 1=1;\r\n\t\t\tINSERT INTO @TableColumns(ColID, ColumnName, ColumnDataType, IsPrimaryKeyCol, IsComputedCol, IsIdentityCol)\r\n\t\t\tSELECT DISTINCT COL.column_id, COL.name, ISC.DATA_TYPE, ISNULL(PKC.Is_PK, 0), COL.is_computed, COL.is_identity\r\n\t\t\tFROM sys.columns AS COL\r\n\t\t\tINNER JOIN sys.tables AS TBL ON TBL.object_id = COL.object_id\r\n\t\t\tINNER JOIN sys.schemas AS SCH ON SCH.schema_id = TBL.schema_id\r\n\t\t\tINNER JOIN INFORMATION_SCHEMA.COLUMNS AS ISC ON ISC.TABLE_SCHEMA = SCH.name AND ISC.TABLE_NAME = TBL.name AND ISC.COLUMN_NAME = COL.name\r\n\t\t\tLEFT JOIN (\r\n\t\t\t\t\t\tSELECT IC.object_id, IC.column_id, 1 AS \"Is_PK\"\r\n\t\t\t\t\t\tFROM sys.index_columns AS IC\r\n\t\t\t\t\t\tINNER JOIN sys.key_constraints AS KC ON IC.object_id = KC.parent_object_id AND IC.index_id = KC.unique_index_id AND KC.type = 'PK'\r\n\t\t\t\t\t  ) AS PKC ON PKC.column_id = COL.column_id AND PKC.object_id = COL.object_id\r\n\t\t\tWHERE SCH.name = @SCHname AND TBL.name = @TBLname\r\n\t\t\tORDER BY COL.column_id ASC;\r\n\t\t\t--\r\n\t\t\tSET @SelColListV1S = NULL; SET @SelColListV1T = NULL; --Reset Value\r\n\t\t\tSELECT\t@SelColListV1S = COALESCE(@SelColListV1S + N', S.[' + ColumnName + N']', 'S.[' + ColumnName + N']'),\r\n\t\t\t\t\t@SelColListV1T = COALESCE(@SelColListV1T + N', T.[' + ColumnName + N']', 'T.[' + ColumnName + N']')\r\n\t\t\tFROM @TableColumns\r\n\t\t\tORDER BY ColID ASC;\r\n\t\t\t--SELECT @SelColListV1S, @SelColListV1T;\r\n\t\t\t--\r\n\t\t\tSET @SelColListV2 = NULL; --Reset Value\r\n\t\t\tSELECT @SelColListV2 = COALESCE(@SelColListV2 + N', S.[' + ColumnName + N'], T.[' + ColumnName + N']', 'S.[' + ColumnName + N'], T.[' + ColumnName + N']')\r\n\t\t\tFROM @TableColumns\r\n\t\t\tORDER BY ColID ASC;\r\n\t\t\t--SELECT @SelColListV2;\r\n\t\t\t--\r\n\t\t\tSET @OnColList = NULL; --Reset Value\r\n\t\t\tSELECT @OnColList = COALESCE(@OnColList + N' AND T.[' + ColumnName + N'] = S.[' + ColumnName + N']', 'T.[' + ColumnName + N'] = S.[' + ColumnName + N']')\r\n\t\t\tFROM @TableColumns\r\n\t\t\tWHERE IsPrimaryKeyCol = 1\r\n\t\t\tORDER BY ColID ASC;\r\n\t\t\t--SELECT @OnColList;\r\n\t\t\t--\r\n\t\t\tSET @WhereColList = NULL; --Reset Value\r\n\t\t\tSELECT @WhereColList = COALESCE(@WhereColList +  \r\n\t\t\t\t\t\tCASE\r\n\t\t\t\t\t\t\tWHEN ColumnDataType IN ('xml', 'text') THEN ' OR ISNULL(CONVERT(NVARCHAR(MAX), T.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''') != ISNULL(CONVERT(NVARCHAR(MAX), S.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''')'\r\n\t\t\t\t\t\t\tWHEN ColumnDataType = 'varbinary' THEN ' OR ISNULL(T.[' + ColumnName + '], 0) != ISNULL(S.[' + ColumnName + '], 0)'\r\n\t\t\t\t\t\t\tELSE ' OR ISNULL(T.[' + ColumnName + '], '''') != ISNULL(S.[' + ColumnName + '], '''')' END, \r\n\t\t\t\t\t\tCASE\r\n\t\t\t\t\t\t\tWHEN ColumnDataType IN ('xml', 'text') THEN 'ISNULL(CONVERT(NVARCHAR(MAX), T.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''') != ISNULL(CONVERT(NVARCHAR(MAX), S.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''')'\r\n\t\t\t\t\t\t\tWHEN ColumnDataType = 'varbinary' THEN 'ISNULL(T.[' + ColumnName + '], 0) != ISNULL(S.[' + ColumnName + '], 0)'\r\n\t\t\t\t\t\t\tELSE 'ISNULL(T.[' + ColumnName + '], '''') != ISNULL(S.[' + ColumnName + '], '''')' END)\r\n\t\t\tFROM @TableColumns\r\n\t\t\tWHERE IsPrimaryKeyCol <> 1 --Exclude PrimaryKey Columns\r\n\t\t\t\tAND IsIdentityCol <> 1 --Exclude Identity Columns\r\n\t\t\t\tAND IsComputedCol <> 1 --Exclude Computed Columns\r\n\t\t\tORDER BY ColID ASC;\r\n\t\t\t--SELECT @WhereColList;\r\n\t\t\t--\r\n\t\t\tUPDATE @COMPARISONTABLE\r\n\t\t\tSET CheckSelectQueryV1 = (\r\n\t\t\t\t\t\t\t\t\t\tSELECT 'SELECT ' + @SelColListV1S + ', ' + '''|'' as \"O\", ' + @SelColListV1T + ' ' +\r\n\t\t\t\t\t\t\t\t\t\t'FROM [' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS S ' +\r\n\t\t\t\t\t\t\t\t\t\t'FULL OUTER JOIN [' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS T ' +\r\n\t\t\t\t\t\t\t\t\t\t'\tON ' + @OnColList + ' ' +\r\n\t\t\t\t\t\t\t\t\t\t'WHERE ' + @WhereColList +';'\r\n\t\t\t\t\t\t\t\t\t ),\r\n\t\t\t\tCheckSelectQueryV2 = (\r\n\t\t\t\t\t\t\t\t\t\tSELECT 'SELECT ' + @SelColListV2 + ' ' +\r\n\t\t\t\t\t\t\t\t\t\t'FROM [' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS S ' +\r\n\t\t\t\t\t\t\t\t\t\t'FULL OUTER JOIN [' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS T ' +\r\n\t\t\t\t\t\t\t\t\t\t'\tON ' + @OnColList + ' ' +\r\n\t\t\t\t\t\t\t\t\t\t'WHERE ' + @WhereColList +';'\r\n\t\t\t\t\t\t\t\t\t )\r\n\t\t\tWHERE  SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\t--$EndRegion: Check Query Formation w.r.to @SCH and @TBL\r\n\t\t\t--\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\tDELETE FROM @COMPARISONTABLE WHERE SchemaName = @SCHname AND TableName = @TBLname;-- Access Error Reading from Remote Table\r\n\t\tEND CATCH;\r\n\t\t--$EndRegion: RowCount from Check Database Table\r\n\t\tFETCH NEXT FROM TableCursor INTO @SCHname, @TBLname;\r\n\tEND;\r\nCLOSE TableCursor;\r\nDEALLOCATE TableCursor;\r\n--$EndRegion: RowCount Difference Check\r\n--\r\nSELECT SchemaName, TableName, SourceRowCount, TargetRowCount, RowDiff, CheckSelectQueryV1, CheckSelectQueryV2\r\nFROM @COMPARISONTABLE\r\nWHERE RowDiff <> 0\r\nORDER BY SchemaName, TableName ASC;",
  "placeholders": [
    {
      "name": "SourceDatabase",
      "defaultValue": null
    },
    {
      "name": "TargetDatabase",
      "defaultValue": null
    }
  ]
}
