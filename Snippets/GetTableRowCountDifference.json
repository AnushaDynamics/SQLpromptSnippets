{
  "id": "7f9b9a4b-2003-43be-aa22-bc644062939c",
  "prefix": "GetTableRowCountDifference",
  "description": "Get Table Row Count Difference Between Source and Target Databases",
  "body": "/* =============================================================================================================================================================\r\n-- Server\t\t: LOCAL SERVER\r\n-- Database\t\t: @ReferSourceDatabase[Source Database]\r\n-- Script\t\t: GetRowCountDifference\r\n-- Description\t: Get Table Row Count Difference Between Source and Target Databases\r\n-- Usage\t\t: Execute in [Source Database] to Get Row Count Differences along with Generating Statements to Merge Data btwn Source and Target and viceversa\r\n============================================================================================================================================================= */\r\nUSE [$SourceDatabase$];\r\nGO\r\n--\r\nDECLARE @ReferSourceDatabase VARCHAR(256) = '$SourceDatabase$';\t--Source Database\r\nDECLARE @CheckTargetDatabase VARCHAR(256) = '$TargetDatabase$';\t--Target Database\r\nDECLARE @SchemaName VARCHAR(256) = NULL;\t--Optional\r\nDECLARE @TableName VARCHAR(256) = NULL;\t\t--Optional\r\nDECLARE @LinkedServer VARCHAR(256) = NULL;\t--Optional\r\n--\r\nDECLARE --To Include/Exclude Statements for Insert, Update, Delete in Merge Statements\r\n\t@IncludeInsert INT = 1, -- 1 = Included (Default) | 0 = Excluded\r\n\t@IncludeUpdate INT = 1, -- 1 = Included (Default) | 0 = Excluded\r\n\t@IncludeDelete INT = 1; -- 1 = Included (Default) | 0 = Excluded\r\n--\r\nDECLARE @Debug BIT = 0;\t-- 1 = Show ColumnsList | 0 = Excluded (Default) -- Use if Checking For Single Table\r\n/* ===== ** DO NOT CHANGE CODE BELOW FROM HERE ** =========================================================================================================== */\r\nIF DB_NAME() != @ReferSourceDatabase\r\nBEGIN\r\n\tRAISERROR('Script Should Only be Executed in @ReferSourceDatabase - Aborting....!', 16, 1) WITH NOWAIT;\r\n\tRETURN;\r\nEND;\r\n--\r\nSET NOCOUNT ON;\r\nDECLARE @SQLcmd NVARCHAR(MAX);\r\n--\r\n--$BeginRegion: Get TableList from @ReferSourceDatabase UNION @CheckTargetDatabase\r\nDECLARE @TableList TABLE (SCHname VARCHAR(256) NULL, TBLname VARCHAR(256) NULL);\r\nSET @SQLcmd = N'SELECT T1.TABLE_SCHEMA, T1.TABLE_NAME FROM [' + @@SERVERNAME + '].[' + @ReferSourceDatabase + '].INFORMATION_SCHEMA.TABLES AS T1 ' + CHAR(10)\r\n\t\t\t+ N'WHERE T1.TABLE_TYPE = ''BASE TABLE'''\r\n\t\t\t\t+ CASE WHEN @SchemaName IS NOT NULL THEN ' AND T1.TABLE_SCHEMA LIKE ''%' + @SchemaName + '%''' ELSE '' END\r\n\t\t\t\t+ CASE WHEN @TableName IS NOT NULL THEN ' AND T1.TABLE_NAME LIKE ''%' + @TableName + '%''' ELSE '' END + CHAR(10)\r\n\t\t\t+ N'UNION ' + CHAR(10)\r\n\t\t\t+ N'SELECT T2.TABLE_SCHEMA, T2.TABLE_NAME FROM [' + ISNULL(@LinkedServer, @@SERVERNAME) + '].[' + @CheckTargetDatabase + '].INFORMATION_SCHEMA.TABLES AS T2 ' + CHAR(10)\r\n\t\t\t+ N'WHERE T2.TABLE_TYPE = ''BASE TABLE'''\r\n\t\t\t\t+ CASE WHEN @SchemaName IS NOT NULL THEN ' AND T2.TABLE_SCHEMA LIKE ''%' + @SchemaName + '%''' ELSE '' END\r\n\t\t\t\t+ CASE WHEN @TableName IS NOT NULL THEN ' AND T2.TABLE_NAME LIKE ''%' + @TableName + '%''' ELSE '' END\r\n\t\t\t+ N';';\r\nIF @Debug = 1 PRINT '--Get TableList from @ReferSourceDatabase UNION @CheckTargetDatabase:' + CHAR(10) + @SQLcmd + CHAR(10);\r\nINSERT INTO @TableList (SCHname, TBLname)\r\nEXECUTE sys.sp_executesql @Command = @SQLcmd;\r\nIF @Debug = 1 SELECT * FROM @TableList;\r\n--$EndRegion: Get TableList from @ReferSourceDatabase UNION @CheckTargetDatabase\r\n--\r\n--$BeginRegion: Cursor for Each Table\r\nIF OBJECT_ID('tempdb..#COMPARISONTABLE') IS NOT NULL\r\n\tDROP TABLE #COMPARISONTABLE;\r\n--\r\nCREATE TABLE #COMPARISONTABLE\r\n(\r\n\tSchemaName VARCHAR(256) NULL, TableName VARCHAR(256) NULL,\r\n\tSourceRowCount INT NULL, TargetRowCount INT NULL, RowsDEL INT NULL, RowsINS INT NULL, RowsUPD INT NULL,\r\n\tValidateQueryV1 VARCHAR(MAX) NULL,\t--Most Preferred to Check RowsINS or RowsDEL\r\n\tValidateQueryV2 VARCHAR(MAX) NULL,\t--Most Preferred to Check RowsUPD\r\n\tRemarks VARCHAR(MAX) NULL, --Errors will be Recorded If Any\r\n\tMergeQueryFromSourceToTarget VARCHAR(MAX) NULL,\r\n\tMergeQueryFromTargetToSource VARCHAR(MAX) NULL\r\n);\r\n--\r\nDECLARE @TableColumns TABLE\r\n(\r\n\tColID INT NULL, --ORDINAL_POSITION\r\n\tColumnName VARCHAR(256) NULL,\r\n\tColumnDataType VARCHAR(64) NULL,\r\n\tIsPrimaryKeyCol BIT NULL,\r\n\tIsComputedCol BIT NULL,\r\n\tIsIdentityCol BIT NULL\r\n);\r\nDECLARE @MatchColumns AS TABLE\r\n(\r\n\tColID INT NULL,\r\n\tColumnName VARCHAR(256) NULL\r\n);\r\n--\r\nDECLARE @SelColListV1S VARCHAR(MAX), @SelColListV1T VARCHAR(MAX), @SelColListV2 VARCHAR(MAX);\r\nDECLARE @ON_MatchedColList VARCHAR(MAX), @WhereColList AS VARCHAR(MAX), @WHERE_UnMatchedColList VARCHAR(MAX);\r\nDECLARE @UpdateColumnList VARCHAR(MAX);\r\nDECLARE @InsertColumnList VARCHAR(MAX), @InsertValueList VARCHAR(MAX);\r\n--\r\nDECLARE @SCHname VARCHAR(256), @TBLname VARCHAR(256), @RowCount INT;\r\nDECLARE TableCursor CURSOR LOCAL FAST_FORWARD FOR SELECT SCHname, TBLname FROM @TableList;\r\nOPEN TableCursor;\r\nFETCH NEXT FROM TableCursor INTO @SCHname, @TBLname;\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n\tBEGIN TRY\r\n\t\tINSERT INTO #COMPARISONTABLE (SchemaName, TableName) VALUES (@SCHname, @TBLname);\r\n\t\t--\r\n\t\t--$BeginRegion: Getting Table Columns In Detail w.r.to @SCHname and @TBLname\r\n\t\tDELETE @TableColumns WHERE 1=1;\r\n\t\tINSERT INTO @TableColumns(ColID, ColumnName, ColumnDataType, IsPrimaryKeyCol, IsComputedCol, IsIdentityCol)\r\n\t\tSELECT DISTINCT COL.column_id, COL.name, ISC.DATA_TYPE, ISNULL(PKC.Is_PK, 0), COL.is_computed, COL.is_identity\r\n\t\tFROM sys.columns AS COL\r\n\t\tINNER JOIN sys.tables AS TBL ON TBL.object_id = COL.object_id\r\n\t\tINNER JOIN sys.schemas AS SCH ON SCH.schema_id = TBL.schema_id\r\n\t\tINNER JOIN INFORMATION_SCHEMA.COLUMNS AS ISC ON ISC.TABLE_SCHEMA = SCH.name AND ISC.TABLE_NAME = TBL.name AND ISC.COLUMN_NAME = COL.name\r\n\t\tLEFT JOIN (\r\n\t\t\t\t\tSELECT IC.object_id, IC.column_id, 1 AS \"Is_PK\"\r\n\t\t\t\t\tFROM sys.index_columns AS IC\r\n\t\t\t\t\tINNER JOIN sys.key_constraints AS KC ON IC.object_id = KC.parent_object_id AND IC.index_id = KC.unique_index_id AND KC.type = 'PK'\r\n\t\t\t\t\t) AS PKC ON PKC.column_id = COL.column_id AND PKC.object_id = COL.object_id\r\n\t\tWHERE SCH.name = @SCHname AND TBL.name = @TBLname\r\n\t\tORDER BY COL.column_id ASC;\r\n\t\t--\r\n\t\tIF @Debug = 1\r\n\t\tBEGIN\r\n\t\t\tSELECT @SCHname AS SCHname, @TBLname AS TBLname, TC.ColID, TC.ColumnName, TC.ColumnDataType, TC.IsPrimaryKeyCol, TC.IsComputedCol, TC.IsIdentityCol \r\n\t\t\tFROM @TableColumns AS TC;\r\n\t\tEND;\r\n\t\t--$EndRegion: Getting Table Columns In Detail w.r.to @SCHname and @TBLname\r\n\t\t--\r\n\t\t--$BeginRegion: Identifying Columns for ON - WHERE Conditions Clauses\r\n\t\tDELETE FROM @MatchColumns WHERE 1=1;\r\n\t\tIF EXISTS (SELECT * FROM @TableColumns WHERE IsPrimaryKeyCol = 1)\r\n\t\t\tBEGIN\r\n\t\t\t\tINSERT INTO @MatchColumns (ColID, ColumnName)\r\n\t\t\t\tSELECT ColID, ColumnName FROM @TableColumns WHERE IsPrimaryKeyCol = 1;\r\n\t\t\tEND;\r\n\t\tELSE\r\n\t\t\tBEGIN\r\n\t\t\t\tINSERT INTO @MatchColumns (ColID, ColumnName)\r\n\t\t\t\tSELECT ColID, ColumnName FROM @TableColumns WHERE IsIdentityCol = 1;\r\n\t\t\tEND;\r\n\t\t--\r\n\t\t----$BeginRegion: Coalesce ON_MatchedColList\r\n\t\tSET @ON_MatchedColList = NULL; --Reset Value\r\n\t\tIF EXISTS (SELECT * FROM @MatchColumns)\r\n\t\t\tBEGIN\r\n\t\t\t\tSELECT @ON_MatchedColList = COALESCE(@ON_MatchedColList + ' AND T.[' + ColumnName + '] = S.[' + ColumnName + ']', 'T.[' + ColumnName + '] = S.[' + ColumnName + ']')\r\n\t\t\t\tFROM @MatchColumns;\t\t\t    \r\n\t\t\tEND;\r\n\t\tELSE\r\n\t\t\tBEGIN\r\n\t\t\t\tSET @ON_MatchedColList = 'T.<TargetColumnName> = S.<SourceColumnName>';\r\n\t\t\t\tUPDATE #COMPARISONTABLE SET Remarks = 'Table DoesNot Contain PrimaryKey or Identity Columns' WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\tEND;\r\n\t\t----$EndRegion: Coalesce ON_MatchedColList\r\n\t\t--\r\n\t\t----$BeginRegion: Coalesce WHERE_UnMatchedColList\r\n\t\tSET @WHERE_UnMatchedColList = NULL; --Reset Value\r\n\t\tSELECT @WHERE_UnMatchedColList = COALESCE(@WHERE_UnMatchedColList +  \r\n\t\t\tCASE\r\n\t\t\t\tWHEN ColumnDataType IN ('xml', 'text', 'uniqueidentifier', 'geography', 'hierarchyid') THEN ' OR ISNULL(CONVERT(NVARCHAR(MAX), T.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''') != ISNULL(CONVERT(NVARCHAR(MAX), S.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''')'\r\n\t\t\t\tWHEN ColumnDataType IN ('varbinary', 'decimal') THEN ' OR ISNULL(T.[' + ColumnName + '], 0) != ISNULL(S.[' + ColumnName + '], 0)'\r\n\t\t\t\tELSE ' OR ISNULL(T.[' + ColumnName + '], '''') != ISNULL(S.[' + ColumnName + '], '''')' END, \r\n\t\t\tCASE\r\n\t\t\t\tWHEN ColumnDataType IN ('xml', 'text', 'uniqueidentifier', 'geography', 'hierarchyid') THEN 'ISNULL(CONVERT(NVARCHAR(MAX), T.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''') != ISNULL(CONVERT(NVARCHAR(MAX), S.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''')'\r\n\t\t\t\tWHEN ColumnDataType IN ('varbinary', 'decimal') THEN 'ISNULL(T.[' + ColumnName + '], 0) != ISNULL(S.[' + ColumnName + '], 0)'\r\n\t\t\t\tELSE 'ISNULL(T.[' + ColumnName + '], '''') != ISNULL(S.[' + ColumnName + '], '''')' END)\r\n\t\tFROM @TableColumns\r\n\t\tWHERE ColumnName NOT IN ( SELECT ColumnName FROM @MatchColumns ) --Exclude PrimaryKey Columns and Identity Columns\r\n\t\t\tAND IsComputedCol <> 1 --Exclude Computed Columns\r\n\t\tORDER BY ColID ASC;\r\n\t\tIF @Debug = 1 PRINT '--@WHERE_UnMatchedColList: ' + @WHERE_UnMatchedColList + CHAR(10);\r\n\t\t----$EndRegion: Coalesce WHERE_UnMatchedColList\r\n\t\t--$EndRegion: Identifying Columns for ON - WHERE Conditions Clauses\r\n\t\t--\r\n\t\t--$BeginRegion: Getting Actual Manipulated Rows Count\r\n\t\t----$BeginRegion: SourceRowCount from @ReferSourceDatabase Table\r\n\t\tSET @SQLcmd = NULL; SET @RowCount = NULL; --Reset Value\r\n\t\tSET @SQLcmd = N'SELECT @RowCountOUT = COUNT(*) FROM [' + @@SERVERNAME + '].[' + @ReferSourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '];';\r\n\t\tIF @Debug = 1 PRINT '--SourceRowCount from @ReferSourceDatabase Table:' + CHAR(10) + @SQLcmd + CHAR(10);\r\n\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\tUPDATE #COMPARISONTABLE SET SourceRowCount = @RowCount WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t----$EndRegion: SourceRowCount from @ReferSourceDatabase Table\r\n\t\t--\r\n\t\t----$BeginRegion: TargetRowCount from @CheckTargetDatabase Table\r\n\t\tSET @SQLcmd = NULL; SET @RowCount = NULL; --Reset Value\r\n\t\tSET @SQLcmd = N'SELECT @RowCountOUT = COUNT(*) FROM [' + ISNULL(@LinkedServer, @@SERVERNAME) + '].[' + @CheckTargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '];';\r\n\t\tIF @Debug = 1 PRINT '--TargetRowCount from @CheckTargetDatabase Table:' + CHAR(10) + @SQLcmd + CHAR(10);\r\n\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\tUPDATE #COMPARISONTABLE SET TargetRowCount = @RowCount WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t----$EndRegion: TargetRowCount from @CheckTargetDatabase Table\r\n\t\t--\r\n\t\tSET @WhereColList = NULL;\r\n\t\tSELECT @WhereColList = COALESCE(@WhereColList + ' AND [' + ColumnName + '] IS NULL', '[' + ColumnName + '] IS NULL') FROM @MatchColumns;\r\n\t\t----$BeginRegion: Actual Rows Deleted From @CheckTargetDatabase Table\r\n\t\tSET @SQLcmd = NULL; SET @RowCount = NULL; --Reset Value\r\n\t\tSET @SQLcmd = N'SELECT @RowCountOUT = COUNT(*) FROM [' + @@SERVERNAME + '].[' + @ReferSourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS S' + CHAR(10)--\r\n\t\t\t\t\t+ N'FULL OUTER JOIN [' + ISNULL(@LinkedServer, @@SERVERNAME) + '].[' + @CheckTargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS T' + CHAR(10)--\r\n\t\t\t\t\t+ N'\tON ' + @ON_MatchedColList + CHAR(10)--\r\n\t\t\t\t\t+ N'WHERE ' + REPLACE(@WhereColList, '[', 'T.[') + ';';\r\n\t\tIF @Debug = 1 PRINT '--Actual Rows Deleted From @CheckTargetDatabase Table:' + CHAR(10) + @SQLcmd + CHAR(10);\r\n\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\tUPDATE #COMPARISONTABLE SET RowsDEL = @RowCount WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t----$EndRegion: Actual Rows Deleted From @CheckTargetDatabase Table\r\n\t\t--\r\n\t\t----$BeginRegion: Actual Rows Inserted Into @CheckTargetDatabase Table\r\n\t\tSET @SQLcmd = NULL; SET @RowCount = NULL; --Reset Value\r\n\t\tSET @SQLcmd = N'SELECT @RowCountOUT = COUNT(*) FROM [' + @@SERVERNAME + '].[' + @ReferSourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS S' + CHAR(10)--\r\n\t\t\t\t\t+ N'FULL OUTER JOIN [' + ISNULL(@LinkedServer, @@SERVERNAME) + '].[' + @CheckTargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS T' + CHAR(10)--\r\n\t\t\t\t\t+ N'\tON ' + @ON_MatchedColList + CHAR(10)--\r\n\t\t\t\t\t+ N'WHERE ' + REPLACE(@WhereColList, '[', 'S.[') + ';';\r\n\t\tIF @Debug = 1 PRINT '--Actual Rows Inserted Into @CheckTargetDatabase Table:' + CHAR(10) + @SQLcmd + CHAR(10);\r\n\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\tUPDATE #COMPARISONTABLE SET RowsINS = @RowCount WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t----$EndRegion: Actual Rows Inserted Into @CheckTargetDatabase Table\r\n\t\t--\r\n\t\t----$BeginRegion: Actual Rows Updated In @CheckTargetDatabase Table\r\n\t\tSET @SQLcmd = NULL; SET @RowCount = NULL; --Reset Value\r\n\t\tSET @SQLcmd = N'SELECT @RowCountOUT = COUNT(*) FROM [' + @@SERVERNAME + '].[' + @ReferSourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS S ' + CHAR(10)--\r\n\t\t\t\t\t+ N'INNER JOIN [' + ISNULL(@LinkedServer, @@SERVERNAME) + '].[' + @CheckTargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS T ' + CHAR(10)--\r\n\t\t\t\t\t+ N'\tON ' + @ON_MatchedColList + ' ' + CHAR(10)--\r\n\t\t\t\t\t+ N'WHERE ' + @WHERE_UnMatchedColList + ';';\r\n\t\tIF @Debug = 1 PRINT '--Actual Rows Updated In @CheckTargetDatabase Table:' + CHAR(10) + @SQLcmd + CHAR(10);\r\n\t\tBEGIN TRY\r\n\t\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\t\tUPDATE #COMPARISONTABLE SET RowsUPD = @RowCount WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\tUPDATE #COMPARISONTABLE SET Remarks = ERROR_MESSAGE() WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\tEND CATCH;\r\n\t\t----$EndRegion: Actual Rows Updated In @CheckTargetDatabase Table\r\n\t\t--$EndRegion: Getting Actual Manipulated Rows Count\r\n\t\t--\r\n\t\t--$BeginRegion: Generating ValidateQueries V1 and V2\r\n\t\t----$BeginRegion: Generating ValidateQuery V1 w.r.to @SCH and @TBL\r\n\t\tSET @SQLcmd = NULL; SET @SelColListV1S = NULL; SET @SelColListV1T = NULL; --Reset Value\r\n\t\tSELECT\t@SelColListV1S = COALESCE(@SelColListV1S + ', S.[' + ColumnName + ']', 'S.[' + ColumnName + ']'),\r\n\t\t\t\t@SelColListV1T = COALESCE(@SelColListV1T + ', T.[' + ColumnName + ']', 'T.[' + ColumnName + ']')\r\n\t\tFROM @TableColumns\r\n\t\tORDER BY ColID ASC;\r\n\t\tIF @Debug = 1 PRINT '--@SelColListV1S: ' + @SelColListV1S + CHAR(10) + '--@SelColListV1T: ' + @SelColListV1T + CHAR(10);\r\n\t\t--\r\n\t\tSET @SQLcmd = N'SELECT ' + @SelColListV1S + ', ' + '''|'' as \"O\", ' + @SelColListV1T + CHAR(10)--\r\n\t\t\t\t\t+ N'FROM [' + @@SERVERNAME + '].[' + @ReferSourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS S ' + CHAR(10)--\r\n\t\t\t\t\t+ N'FULL OUTER JOIN [' + ISNULL(@LinkedServer, @@SERVERNAME) + '].[' + @CheckTargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS T ' + CHAR(10)--\r\n\t\t\t\t\t+ N'\tON ' + @ON_MatchedColList + CHAR(10)--\r\n\t\t\t\t\t+ N'WHERE /*1 = 1 OR*/ ' + @WHERE_UnMatchedColList + ';';\r\n\t\tIF @Debug = 1 PRINT '--ValidateQuery V1 w.r.to @SCH and @TBL:' + CHAR(10) + @SQLcmd + CHAR(10);\r\n\t\tUPDATE #COMPARISONTABLE SET ValidateQueryV1 = @SQLcmd WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t----$EndRegion: Generating ValidateQuery V1 w.r.to @SCH and @TBL\r\n\t\t--\r\n\t\t----$BeginRegion: Generating ValidateQuery V2 w.r.to @SCH and @TBL\r\n\t\tSET @SQLcmd = NULL; SET @SelColListV2 = NULL; --Reset Value\r\n\t\tSELECT @SelColListV2 = COALESCE(@SelColListV2 + ', S.[' + ColumnName + '], T.[' + ColumnName + ']', 'S.[' + ColumnName + '], T.[' + ColumnName + ']')\r\n\t\tFROM @TableColumns\r\n\t\tORDER BY ColID ASC;\r\n\t\tIF @Debug = 1 PRINT '--@SelColListV2: ' + @SelColListV2 + CHAR(10);\r\n\t\t--\r\n\t\tSET @SQLcmd = N'SELECT ' + @SelColListV2 + CHAR(10)--\r\n\t\t\t\t\t+ N'FROM [' + @@SERVERNAME + '].[' + @ReferSourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS S ' + CHAR(10)--\r\n\t\t\t\t\t+ N'FULL OUTER JOIN [' + ISNULL(@LinkedServer, @@SERVERNAME) + '].[' + @CheckTargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS T ' + CHAR(10)--\r\n\t\t\t\t\t+ N'\tON ' + @ON_MatchedColList + CHAR(10)--\r\n\t\t\t\t\t+ N'WHERE /*1 = 1 OR*/ ' + @WHERE_UnMatchedColList + ';';\r\n\t\tIF @Debug = 1 PRINT '--ValidateQuery V2 w.r.to @SCH and @TBL:' + CHAR(10) + @SQLcmd + CHAR(10);\r\n\t\tUPDATE #COMPARISONTABLE SET ValidateQueryV2 = @SQLcmd WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t----$EndRegion: Generating ValidateQuery V2 w.r.to @SCH and @TBL\r\n\t\t--$EndRegion: Generating ValidateQueries V1 and V2\r\n\t\t--\r\n\t\t--$BeginRegion: Generating Merge Statements\r\n\t\t----$BeginRegion: Coalesce @UpdateColumnList\r\n\t\tSET @UpdateColumnList = NULL; --Reset Value\r\n\t\tSELECT @UpdateColumnList = COALESCE(@UpdateColumnList + \r\n\t\t\tCASE WHEN ColumnDataType IN ('xml', 'text') THEN ', T.[' + ColumnName + '] = CONVERT(NVARCHAR(MAX), S.[' + ColumnName + '])COLLATE DATABASE_DEFAULT'\r\n\t\t\t\tELSE ', T.[' + ColumnName + '] = S.[' + ColumnName + ']' END,\r\n\t\t\tCASE WHEN ColumnDataType IN ('xml', 'text') THEN 'T.[' + ColumnName + '] = CONVERT(NVARCHAR(MAX), S.[' + ColumnName + '])COLLATE DATABASE_DEFAULT'\r\n\t\t\t\tELSE 'T.[' + ColumnName + '] = S.[' + ColumnName + ']' END)\r\n\t\tFROM @TableColumns\r\n\t\tWHERE ColumnName NOT IN ( SELECT ColumnName FROM @MatchColumns ) --Exclude PrimaryKey Columns\r\n\t\t\tAND IsIdentityCol <> 1 --Exclude Identity Columns => To Resolve Msg 8102, Cannot update identity column\r\n\t\t\tAND IsComputedCol <> 1 --Exclude Computed Columns\r\n\t\tORDER BY ColID ASC;\r\n\t\tIF @Debug = 1 PRINT '--@UpdateColumnList: ' + @UpdateColumnList + CHAR(10);\r\n\t\t----$EndRegion: Coalesce @UpdateColumnList\r\n\t\t--\r\n\t\t----$BeginRegion: Coalesce @InsertColumnList\r\n\t\tSET @InsertColumnList = NULL; --Reset Value\r\n\t\tSELECT @InsertColumnList = COALESCE(@InsertColumnList + ', [' + ColumnName + ']', '[' + ColumnName + ']')\r\n\t\tFROM @TableColumns\r\n\t\tWHERE IsComputedCol <> 1 --Exclude Computed Columns\r\n\t\tORDER BY ColID ASC;\r\n\t\tIF @Debug = 1 PRINT '--@InsertColumnList: ' + @InsertColumnList + CHAR(10);\r\n\t\t----$EndRegion: Coalesce @InsertColumnList\r\n\t\t--\r\n\t\t----$BeginRegion: Coalesce @InsertValueList\r\n\t\tSET @InsertValueList = NULL; --Reset Value\r\n\t\tSELECT @InsertValueList = COALESCE(@InsertValueList + \r\n\t\t\tCASE WHEN ColumnDataType IN ('xml', 'text') THEN ', CONVERT(NVARCHAR(MAX), S.[' + ColumnName + '])COLLATE DATABASE_DEFAULT' ELSE ', S.[' + ColumnName + ']' END,\r\n\t\t\tCASE WHEN ColumnDataType IN ('xml', 'text') THEN 'CONVERT(NVARCHAR(MAX), S.[' + ColumnName + '])COLLATE DATABASE_DEFAULT' ELSE 'S.[' + ColumnName + ']' END)\r\n\t\tFROM @TableColumns\r\n\t\tWHERE IsComputedCol <> 1 --Exclude Computed Columns\r\n\t\tORDER BY ColID ASC;\r\n\t\tIF @Debug = 1 PRINT '--@InsertValueList: ' + @InsertValueList + CHAR(10);\r\n\t\t----$EndRegion: Coalesce @InsertValueList\r\n\t\t--\r\n\t\tIF (@IncludeDelete = 1 OR @IncludeInsert = 1 OR @IncludeUpdate = 1)\r\n\t\tBEGIN\r\n\t\t\t----$BeginRegion: Generating Query for MergeDataFromSourceToTarget\r\n\t\t\tSET @SQLcmd = '';\r\n\t\t\t--\r\n\t\t\tIF @IncludeInsert = 1\r\n\t\t\t\tIF EXISTS (SELECT * FROM @TableColumns WHERE IsIdentityCol = 1)\r\n\t\t\t\t\tSET @SQLcmd = @SQLcmd + N'SET IDENTITY_INSERT [' + @CheckTargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] ON;' + CHAR(10);\r\n\t\t\t--\r\n\t\t\tSET @SQLcmd = @SQLcmd\r\n\t\t\t\t\t\t+ N'MERGE INTO [' + ISNULL(@LinkedServer, @@SERVERNAME) + '].[' + @CheckTargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS T' + CHAR(10)\r\n\t\t\t\t\t\t+ N'USING [' + @@SERVERNAME + '].[' + @ReferSourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS S' + CHAR(10)\r\n\t\t\t\t\t\t+ N'\tON ' + @ON_MatchedColList + CHAR(10)\r\n\t\t\tIF @IncludeUpdate = 1\r\n\t\t\t\tSET @SQLcmd = @SQLcmd\r\n\t\t\t\t\t\t+ N'WHEN MATCHED AND ' + @WHERE_UnMatchedColList + CHAR(10)\r\n\t\t\t\t\t\t+ N'\tTHEN UPDATE SET ' + @UpdateColumnList + CHAR(10)\r\n\t\t\tIF @IncludeInsert = 1\r\n\t\t\t\tSET @SQLcmd = @SQLcmd\r\n\t\t\t\t\t\t+ N'WHEN NOT MATCHED BY TARGET ' + CHAR(10)\r\n\t\t\t\t\t\t+ N'\tTHEN INSERT (' + @InsertColumnList + ')' + CHAR(10)\r\n\t\t\t\t\t\t+ N'\t\t VALUES (' + @InsertValueList + ')' + CHAR(10)\r\n\t\t\tIF @IncludeDelete = 1\r\n\t\t\t\tSET @SQLcmd = @SQLcmd\r\n\t\t\t\t\t\t+ N'WHEN NOT MATCHED BY SOURCE ' + CHAR(10)\r\n\t\t\t\t\t\t+ N'\tTHEN DELETE' + CHAR(10)\r\n\t\t\tSET @SQLcmd = @SQLcmd + N';';\r\n\t\t\t--\r\n\t\t\tIF @IncludeInsert = 1\r\n\t\t\t\tIF EXISTS (SELECT * FROM @TableColumns WHERE IsIdentityCol = 1)\r\n\t\t\t\t\tSET @SQLcmd = @SQLcmd + CHAR(10) + N'SET IDENTITY_INSERT [' + @CheckTargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] OFF;' + CHAR(10);\r\n\t\t\t--\r\n\t\t\tIF @Debug = 1 PRINT '--@MergeQueryFromSourceToTarget: ' + CHAR(10) + @SQLcmd + CHAR(10);\r\n\t\t\tUPDATE #COMPARISONTABLE SET MergeQueryFromSourceToTarget = @SQLcmd WHERE SchemaName = @SCHname AND TableName = @TBLname;\t\t    \r\n\t\t\t----$EndRegion: Generating Query for MergeDataFromSourceToTarget\r\n\t\t\t--\t\t\t\r\n\t\t\t----$BeginRegion: Generating Query for MergeDataFromTargetToSource\r\n\t\t\tSET @SQLcmd = '';\r\n\t\t\t--\r\n\t\t\tIF @IncludeInsert = 1\r\n\t\t\t\tIF EXISTS (SELECT * FROM @TableColumns WHERE IsIdentityCol = 1)\r\n\t\t\t\t\tSET @SQLcmd = @SQLcmd + N'SET IDENTITY_INSERT [' + @ReferSourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] ON;' + CHAR(10);\r\n\t\t\t--\r\n\t\t\tSET @SQLcmd = @SQLcmd\r\n\t\t\t\t\t\t+ N'MERGE INTO [' + @@SERVERNAME + '].[' + @ReferSourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS T' + CHAR(10)\r\n\t\t\t\t\t\t+ N'USING [' + ISNULL(@LinkedServer, @@SERVERNAME) + '].[' + @CheckTargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '] AS S' + CHAR(10)\r\n\t\t\t\t\t\t+ N'\tON ' + @ON_MatchedColList + CHAR(10)\r\n\t\t\tIF @IncludeUpdate = 1\r\n\t\t\t\tSET @SQLcmd = @SQLcmd\r\n\t\t\t\t\t\t+ N'WHEN MATCHED AND ' + @WHERE_UnMatchedColList + CHAR(10)\r\n\t\t\t\t\t\t+ N'\tTHEN UPDATE SET ' + @UpdateColumnList + CHAR(10)\r\n\t\t\tIF @IncludeInsert = 1\r\n\t\t\t\tSET @SQLcmd = @SQLcmd\r\n\t\t\t\t\t\t+ N'WHEN NOT MATCHED BY TARGET ' + CHAR(10)\r\n\t\t\t\t\t\t+ N'\tTHEN INSERT (' + @InsertColumnList + ')' + CHAR(10)\r\n\t\t\t\t\t\t+ N'\t\t VALUES (' + @InsertValueList + ')' + CHAR(10)\r\n\t\t\tIF @IncludeDelete = 1\r\n\t\t\t\tSET @SQLcmd = @SQLcmd\r\n\t\t\t\t\t\t+ N'WHEN NOT MATCHED BY SOURCE ' + CHAR(10)\r\n\t\t\t\t\t\t+ N'\tTHEN DELETE' + CHAR(10)\r\n\t\t\tSET @SQLcmd = @SQLcmd + N';';\r\n\t\t\t--\r\n\t\t\tIF @IncludeInsert = 1\r\n\t\t\t\tIF EXISTS (SELECT * FROM @TableColumns WHERE IsIdentityCol = 1)\r\n\t\t\t\t\tSET @SQLcmd = @SQLcmd + CHAR(10) + N'SET IDENTITY_INSERT [' + @ReferSourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '] OFF;' + CHAR(10);\r\n\t\t\t--\r\n\t\t\tIF @Debug = 1 PRINT '--@MergeQueryFromTargetToSource: ' + CHAR(10) + @SQLcmd + CHAR(10);\r\n\t\t\tUPDATE #COMPARISONTABLE SET MergeQueryFromTargetToSource = @SQLcmd WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\t----$EndRegion: Generating Query for MergeDataFromTargetToSource\r\n\t\tEND\r\n\t\t--$EndRegion: Generating Merge Statements\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tUPDATE #COMPARISONTABLE SET Remarks = ERROR_MESSAGE() WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\tEND CATCH;\r\n\t--\r\n\tFETCH NEXT FROM TableCursor INTO @SCHname, @TBLname;\r\nEND;\r\nCLOSE TableCursor;\r\nDEALLOCATE TableCursor;\r\n--$EndRegion: Cursor for Each Table\r\n--\r\n/*--Direct Viewing of ResultSet\r\nSELECT\tSchemaName, TableName, SourceRowCount, TargetRowCount, RowsDEL, RowsINS, RowsUPD,\r\n\t\tValidateQueryV1 AS \"ValidateQuery (Preferred For RowsINS or RowsDEL)\", ValidateQueryV2  AS \"ValidateQuery (Preferred For RowsUPD)\",\r\n\t\tISNULL(Remarks, '') AS Remarks,\r\n\t\tMergeQueryFromSourceToTarget, MergeQueryFromTargetToSource\r\nFROM #COMPARISONTABLE\r\nWHERE RowsINS <> 0 OR RowsDEL <> 0 OR RowsUPD <> 0 OR SourceRowCount IS NULL OR TargetRowCount IS NULL\r\nORDER BY SchemaName, TableName ASC;\r\n*/\r\n--\r\nSET @SQLcmd = N'\r\nSELECT\tSchemaName, TableName, SourceRowCount, TargetRowCount, RowsDEL, RowsINS, RowsUPD,\r\n\t\tValidateQueryV1 AS \"ValidateQuery (Preferred For RowsINS or RowsDEL)\", ValidateQueryV2  AS \"ValidateQuery (Preferred For RowsUPD)\",\r\n\t\tISNULL(Remarks, '''') AS Remarks,\r\n\t\tMergeQueryFromSourceToTarget AS \"MergeQueryFromSourceToTarget (EXEC in ['+ISNULL(@LinkedServer, @@SERVERNAME)+'].['+@CheckTargetDatabase+'])\",\r\n\t\tMergeQueryFromTargetToSource AS \"MergeQueryFromTargetToSource (EXEC in ['+@@servername+'].['+@ReferSourceDatabase+'])\"\r\nFROM #COMPARISONTABLE\r\nWHERE RowsINS <> 0 OR RowsDEL <> 0 OR RowsUPD <> 0 OR SourceRowCount IS NULL OR TargetRowCount IS NULL\r\nORDER BY SchemaName, TableName ASC;'\r\nEXEC sys.sp_executesql @command = @SQLcmd;",
  "placeholders": [
    {
      "name": "SourceDatabase",
      "defaultValue": null
    },
    {
      "name": "TargetDatabase",
      "defaultValue": null
    }
  ]
}