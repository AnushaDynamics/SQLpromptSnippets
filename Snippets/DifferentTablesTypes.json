{
  "id": "f39d8dc4-0570-4b55-9258-db1c7184e572",
  "prefix": "DifferentTablesTypes",
  "description": "All Possibilities of Different Combinations of Tables that can be Used",
  "body": "/* =================================================================================================================================================================================\r\n-- Server\t\t: LOCAL SERVER\r\n-- Database\t\t: User Database\r\n-- Script\t\t: DifferentTablesTypes\r\n-- Description\t: All Possibilities of Different Combinations of Tables that can be Used\r\n-- Usage\t\t:\r\n--\tTableType10\t: This TableType10 Contains Only Primary Key Columns (i.e., No Other Columns other than PK columns)\r\n--\tTableType11\t: This TableType11 is Similar to TableType10 and with Other Columns\r\n--\tTableType20\t: This TableType20 Contians Both Primary Key Columns Exclusively and Identity Column Exclusively Only (i.e., No Other Columns other than PK and ID columns)\r\n--\tTableType21\t: This TableType21 is Similar to TableType20 and with Other Columns\r\n--\tTableType30\t: This TableType30 Contains Primary Key Columns in which One of the PK column is Identity Column (i.e., No Other Columns other than PK and ID columns)\r\n--\tTableType31\t: This TableType31 is Similar to TableType30 and with Other Columns\r\n-- *TableType40\t: This TableType40 Contains No Primary Key Columns But has Identity Column.(i.e., No Other Columns other than ID column)--Invalid Table\r\n--\tTableType41\t: This TableType41 Contains No Primary Key Columns But has Identity Column and with Other Columns\r\n--\tTableType50\t: This TableType50 Contains Only One Column as PrimaryKey Column Only\r\n--\tTableType60\t: This TableType60 has NO Primary Key and NO Identity Columns (i.e, Just like Heap and might not be Heap if clustered Index is created)\r\n================================================================================================================================================================================= */\r\nUSE master;\r\nGO\r\n/*\r\n--$BeginRegion: Kill Specific Database All Sessions and Create New Databases\r\nPRINT N'--KILLING SPIDs in \"database_name\"';\r\nDECLARE @KillSPIDs NVARCHAR(MAX) =N'';\r\nSELECT\t@KillSPIDs=@KillSPIDs+CHAR(10)+N'Kill '+CONVERT(VARCHAR(5), session_id)+N';'\r\nFROM\tsys.dm_exec_sessions\r\nWHERE session_id>50 AND session_id<>@@SPID AND DB_NAME(database_id) IN ('TestDB_Base', 'TestDB');\r\n--PRINT @KillSPIDs;\r\nEXEC sys.sp_executesql @statement=@KillSPIDs;\r\n--\r\nDROP DATABASE IF EXISTS TestDB_Base;\r\nDROP DATABASE IF EXISTS TestDB;\r\n--\r\nCREATE DATABASE TestDB_Base;\r\nCREATE DATABASE TestDB;\r\n--$EndRegion: Kill Specific Database All Sessions and Create New Databases\r\n*/\r\n--\r\n--TableType10\t: This TableType10 Contains Only Primary Key Columns (i.e., No Other Columns other than PK columns)\r\n--$BeginRegion: TableType10\r\nDROP TABLE IF EXISTS TestDB_Base.dbo.TableType10;\r\nCREATE TABLE TestDB_Base.dbo.TableType10 (A INT NOT NULL, B INT NOT NULL);\r\nALTER TABLE TestDB_Base.dbo.TableType10\r\nADD CONSTRAINT PK10 PRIMARY KEY CLUSTERED(A, B);\r\n--\r\nINSERT\tINTO TestDB_Base.dbo.TableType10(A, B)\r\nVALUES(0, 0), (0, 1), (1, 0), (1, 1);\r\n--\r\nDROP TABLE IF EXISTS TestDB.dbo.TableType10;\r\nCREATE TABLE TestDB.dbo.TableType10 (A INT NOT NULL, B INT NOT NULL);\r\nALTER TABLE TestDB.dbo.TableType10\r\nADD CONSTRAINT PK10 PRIMARY KEY CLUSTERED(A, B);\r\n--$EndRegion: TableType10\r\n--\r\n--TableType11\t: This TableType11 is Similar to TableType10 and with Other Columns\r\n--$BeginRegion: TableType11\r\nDROP TABLE IF EXISTS TestDB_Base.dbo.TableType11;\r\nCREATE TABLE TestDB_Base.dbo.TableType11 (A INT NOT NULL, B INT NOT NULL, X CHAR(1) NULL);\r\nALTER TABLE TestDB_Base.dbo.TableType11\r\nADD CONSTRAINT PK11 PRIMARY KEY CLUSTERED(A, B);\r\n--\r\nINSERT\tINTO TestDB_Base.dbo.TableType11(A, B, X)\r\nVALUES(0, 0, 'A'), (0, 1, 'B'), (1, 0, 'C'), (1, 1, 'D');\r\n--\r\nDROP TABLE IF EXISTS TestDB.dbo.TableType11;\r\nCREATE TABLE TestDB.dbo.TableType11 (A INT NOT NULL, B INT NOT NULL, X CHAR(1) NULL);\r\nALTER TABLE TestDB.dbo.TableType11\r\nADD CONSTRAINT PK11 PRIMARY KEY CLUSTERED(A, B);\r\n--$EndRegion: TableType11\r\n--\r\n--\r\n--TableType20\t: This TableType20 Contians Both Primary Key Columns Exclusively and Identity Column Exclusively Only (i.e., No Other Columns other than PK and ID columns)\r\n--$BeginRegion: TableType20\r\nDROP TABLE IF EXISTS TestDB_Base.dbo.TableType20;\r\nCREATE TABLE TestDB_Base.dbo.TableType20 (A INT NOT NULL, B INT NOT NULL, C INT NOT NULL IDENTITY(1, 1));\r\nALTER TABLE TestDB_Base.dbo.TableType20\r\nADD CONSTRAINT PK20 PRIMARY KEY CLUSTERED(A, B);\r\n--\r\nINSERT\tINTO TestDB_Base.dbo.TableType20(A, B)\r\nVALUES(0, 0), (0, 1), (1, 0), (1, 1);\r\n--\r\nDROP TABLE IF EXISTS TestDB.dbo.TableType20;\r\nCREATE TABLE TestDB.dbo.TableType20 (A INT NOT NULL, B INT NOT NULL, C INT NOT NULL IDENTITY(1, 1));\r\nALTER TABLE TestDB.dbo.TableType20\r\nADD CONSTRAINT PK20 PRIMARY KEY CLUSTERED(A, B);\r\n--$EndRegion: TableType20\r\n--\r\n--TableType21\t: This TableType21 is Similar to TableType20 and with Other Columns\r\n--$BeginRegion: TableType21\r\nDROP TABLE IF EXISTS TestDB_Base.dbo.TableType21;\r\nCREATE TABLE TestDB_Base.dbo.TableType21 (A INT NOT NULL, B INT NOT NULL, C INT NOT NULL IDENTITY(1, 1),  X CHAR(1) NULL);\r\nALTER TABLE TestDB_Base.dbo.TableType21\r\nADD CONSTRAINT PK21 PRIMARY KEY CLUSTERED(A, B);\r\n--\r\nINSERT\tINTO TestDB_Base.dbo.TableType21(A, B, X)\r\nVALUES(0, 0, 'A'), (0, 1, 'B'), (1, 0, 'C'), (1, 1, 'D');\r\n--\r\nDROP TABLE IF EXISTS TestDB.dbo.TableType21;\r\nCREATE TABLE TestDB.dbo.TableType21 (A INT NOT NULL, B INT NOT NULL, C INT NOT NULL IDENTITY(1, 1),  X CHAR(1) NULL);\r\nALTER TABLE TestDB.dbo.TableType21\r\nADD CONSTRAINT PK21 PRIMARY KEY CLUSTERED(A, B);\r\n--$EndRegion: TableType21\r\n--\r\n--\r\n--TableType30\t: This TableType30 Contains Primary Key Columns in which One of the PK column is Identity Column (i.e., No Other Columns other than PK and ID columns)\r\n--$BeginRegion: TableType30\r\nDROP TABLE IF EXISTS TestDB_Base.dbo.TableType30;\r\nCREATE TABLE TestDB_Base.dbo.TableType30 (A INT NOT NULL, B INT NOT NULL, C INT NOT NULL IDENTITY(1, 1));\r\nALTER TABLE TestDB_Base.dbo.TableType30\r\nADD CONSTRAINT PK30 PRIMARY KEY CLUSTERED(A, B, C);\r\n--\r\nINSERT\tINTO TestDB_Base.dbo.TableType30(A, B)\r\nVALUES(0, 0), (0, 1), (1, 0), (1, 1);\r\n--\r\nDROP TABLE IF EXISTS TestDB.dbo.TableType30;\r\nCREATE TABLE TestDB.dbo.TableType30 (A INT NOT NULL, B INT NOT NULL, C INT NOT NULL IDENTITY(1, 1));\r\nALTER TABLE TestDB.dbo.TableType30\r\nADD CONSTRAINT PK30 PRIMARY KEY CLUSTERED(A, B, C);\r\n--$EndRegion: TableType30\r\n--\r\n--TableType31\t: This TableType31 is Similar to TableType30 and with Other Columns\r\n--$BeginRegion: TableType31\r\nDROP TABLE IF EXISTS TestDB_Base.dbo.TableType31;\r\nCREATE TABLE TestDB_Base.dbo.TableType31 (A INT NOT NULL, B INT NOT NULL, C INT NOT NULL IDENTITY(1, 1), X CHAR(1) NULL);\r\nALTER TABLE TestDB_Base.dbo.TableType31\r\nADD CONSTRAINT PK31 PRIMARY KEY CLUSTERED(A, B, C);\r\n--\r\nINSERT\tINTO TestDB_Base.dbo.TableType31(A, B, X)\r\nVALUES(0, 0, 'A'), (0, 1, 'B'), (1, 0, 'C'), (1, 1, 'D');\r\n--\r\nDROP TABLE IF EXISTS TestDB.dbo.TableType31;\r\nCREATE TABLE TestDB.dbo.TableType31 (A INT NOT NULL, B INT NOT NULL, C INT NOT NULL IDENTITY(1, 1), X CHAR(1) NULL);\r\nALTER TABLE TestDB.dbo.TableType31\r\nADD CONSTRAINT PK31 PRIMARY KEY CLUSTERED(A, B, C);\r\n--$EndRegion: TableType31\r\n--\r\n--\r\n--TableType41\t: This TableType41 is Similar to TableType40 and with Other Columns\r\n--$BeginRegion: TableType41\r\nDROP TABLE IF EXISTS TestDB_Base.dbo.TableType41;\r\nCREATE TABLE TestDB_Base.dbo.TableType41 (A INT IDENTITY(1, 1), X CHAR(1) NULL);\r\n--\r\nINSERT\tINTO TestDB_Base.dbo.TableType41(X)\r\nVALUES('A'), ('B'), ('C'), ('D');\r\n--\r\nDROP TABLE IF EXISTS TestDB.dbo.TableType41;\r\nCREATE TABLE TestDB.dbo.TableType41 (A INT IDENTITY(1, 1), X CHAR(1) NULL);\r\n--$EndRegion: TableType41\r\n--\r\n--\r\n--TableType50\t: This TableType50 Contains Only One Column as PrimaryKey Column Only\r\nDROP TABLE IF EXISTS TestDB_Base.dbo.TableType50;\r\nCREATE TABLE TestDB_Base.dbo.TableType50 (A INT NOT NULL);\r\nALTER TABLE TestDB_Base.dbo.TableType50\r\nADD CONSTRAINT PK50 PRIMARY KEY CLUSTERED(A);\r\n--\r\nINSERT\tINTO TestDB_Base.dbo.TableType50(A)\r\nVALUES(0), (1), (2);\r\n--\r\nDROP TABLE IF EXISTS TestDB.dbo.TableType50;\r\nCREATE TABLE TestDB.dbo.TableType50 (A INT NOT NULL);\r\nALTER TABLE TestDB.dbo.TableType50\r\nADD CONSTRAINT PK50 PRIMARY KEY CLUSTERED(A);\r\n--\r\n--\r\n--TableType60\t: This TableType60 is Similar to TableType30 and with Other Columns\r\n--$BeginRegion: TableType60\r\nDROP TABLE IF EXISTS TestDB_Base.dbo.TableType60;\r\nCREATE TABLE TestDB_Base.dbo.TableType60 (A INT NOT NULL, B INT NOT NULL, X CHAR(1) NULL);\r\n--\r\nINSERT\tINTO TestDB_Base.dbo.TableType60(A, B, X)\r\nVALUES(0, 0, 'A'), (0, 1, 'B'), (1, 0, 'C'), (1, 1, 'D');\r\n--\r\nDROP TABLE IF EXISTS TestDB.dbo.TableType60;\r\nCREATE TABLE TestDB.dbo.TableType60 (A INT NOT NULL, B INT NOT NULL, X CHAR(1) NULL);\r\n--$EndRegion: TableType60\r\n--\r\n/*--Delete Values And Insert Again to Check the Identity Values\r\nDELETE FROM TestDB_Base.dbo.TableType10 WHERE A=1 AND B=1;\r\nINSERT INTO TestDB_Base.dbo.TableType10 (A, B)VALUES(1, 1);\r\nDELETE FROM TestDB_Base.dbo.TableType11 WHERE A=1 AND B=1;\r\nINSERT INTO TestDB_Base.dbo.TableType11 (A, B, X)VALUES(1, 1, 'D');\r\nDELETE FROM TestDB_Base.dbo.TableType20 WHERE A=1 AND B=1;\r\nINSERT INTO TestDB_Base.dbo.TableType20 (A, B)VALUES(1, 1);\r\nDELETE FROM TestDB_Base.dbo.TableType21 WHERE A=1 AND B=1;\r\nINSERT INTO TestDB_Base.dbo.TableType21 (A, B, X)VALUES(1, 1, 'D');\r\nDELETE FROM TestDB_Base.dbo.TableType30 WHERE A=1 AND B=1;\r\nINSERT INTO TestDB_Base.dbo.TableType30 (A, B)VALUES(1, 1);\r\nDELETE FROM TestDB_Base.dbo.TableType41 WHERE X = 'D'\r\nINSERT INTO TestDB_Base.dbo.TableType41 (X)VALUES('D');\r\nDELETE FROM TestDB_Base.dbo.TableType50 WHERE A=(SELECT MAX(A) FROM TestDB_Base.dbo.TableType50)\r\nINSERT INTO TestDB_Base.dbo.TableType50 (A)VALUES((SELECT MAX(A)+2 FROM TestDB_Base.dbo.TableType50));\r\nDELETE FROM TestDB_Base.dbo.TableType60 WHERE A=1 AND B=1;\r\nINSERT INTO TestDB_Base.dbo.TableType60 (A, B, X)VALUES(1, 1, 'D');\r\n*/"
}