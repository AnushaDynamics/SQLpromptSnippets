{
  "id": "6768297f-9fa8-45c1-ade8-fb2a058f9967",
  "prefix": "mvpOH_IndexOptimize",
  "description": "IndexOptimize (By Ola Hallengren)",
  "body": "USE [master]\r\nGO\r\n\r\n/****** Object:  StoredProcedure [dbo].[IndexOptimize] ******/\r\nIF OBJECT_ID('[dbo].[IndexOptimize]', 'P') IS NOT NULL\r\n\tDROP PROCEDURE [dbo].[IndexOptimize];\r\nGO\r\n\r\n/****** Object:  StoredProcedure [dbo].[IndexOptimize] ******/\r\nSET ANSI_NULLS ON\r\nGO\r\n\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\n\r\nCREATE PROCEDURE [dbo].[IndexOptimize]\r\n\r\n@Databases NVARCHAR(MAX) = NULL,\r\n@FragmentationLow NVARCHAR(MAX) = NULL,\r\n@FragmentationMedium NVARCHAR(MAX) = 'INDEX_REORGANIZE,INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',\r\n@FragmentationHigh NVARCHAR(MAX) = 'INDEX_REBUILD_ONLINE,INDEX_REBUILD_OFFLINE',\r\n@FragmentationLevel1 INT = 5,\r\n@FragmentationLevel2 INT = 30,\r\n@MinNumberOfPages INT = 1000,\r\n@MaxNumberOfPages INT = NULL,\r\n@SortInTempdb NVARCHAR(MAX) = 'N',\r\n@MaxDOP INT = NULL,\r\n@FillFactor INT = NULL,\r\n@PadIndex NVARCHAR(MAX) = NULL,\r\n@LOBCompaction NVARCHAR(MAX) = 'Y',\r\n@UpdateStatistics NVARCHAR(MAX) = NULL,\r\n@OnlyModifiedStatistics NVARCHAR(MAX) = 'N',\r\n@StatisticsModificationLevel INT = NULL,\r\n@StatisticsSample INT = NULL,\r\n@StatisticsResample NVARCHAR(MAX) = 'N',\r\n@PartitionLevel NVARCHAR(MAX) = 'Y',\r\n@MSShippedObjects NVARCHAR(MAX) = 'N',\r\n@Indexes NVARCHAR(MAX) = NULL,\r\n@TimeLimit INT = NULL,\r\n@Delay INT = NULL,\r\n@WaitAtLowPriorityMaxDuration INT = NULL,\r\n@WaitAtLowPriorityAbortAfterWait NVARCHAR(MAX) = NULL,\r\n@Resumable NVARCHAR(MAX) = 'N',\r\n@AvailabilityGroups NVARCHAR(MAX) = NULL,\r\n@LockTimeout INT = NULL,\r\n@LockMessageSeverity INT = 16,\r\n@StringDelimiter NVARCHAR(MAX) = ',',\r\n@DatabaseOrder NVARCHAR(MAX) = NULL,\r\n@DatabasesInParallel NVARCHAR(MAX) = 'N',\r\n@ExecuteAsUser NVARCHAR(MAX) = NULL,\r\n@LogToTable NVARCHAR(MAX) = 'N',\r\n@Execute NVARCHAR(MAX) = 'Y'\r\n\r\nAS\r\n\r\nBEGIN\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Source:  https://ola.hallengren.com                                                        //--\r\n  --// License: https://ola.hallengren.com/license.html                                           //--\r\n  --// GitHub:  https://github.com/olahallengren/sql-server-maintenance-solution                  //--\r\n  --// Version: 2020-12-31 18:58:56                                                               //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET NOCOUNT ON\r\n\r\n  SET ARITHABORT ON\r\n\r\n  SET NUMERIC_ROUNDABORT OFF\r\n\r\n  DECLARE @StartMessage NVARCHAR(MAX)\r\n  DECLARE @EndMessage NVARCHAR(MAX)\r\n  DECLARE @DatabaseMessage NVARCHAR(MAX)\r\n  DECLARE @ErrorMessage NVARCHAR(MAX)\r\n  DECLARE @Severity INT\r\n\r\n  DECLARE @StartTime DATETIME2 = SYSDATETIME()\r\n  DECLARE @SchemaName NVARCHAR(MAX) = OBJECT_SCHEMA_NAME(@@PROCID)\r\n  DECLARE @ObjectName NVARCHAR(MAX) = OBJECT_NAME(@@PROCID)\r\n  DECLARE @VersionTimestamp NVARCHAR(MAX) = SUBSTRING(OBJECT_DEFINITION(@@PROCID),CHARINDEX('--// Version: ',OBJECT_DEFINITION(@@PROCID)) + LEN('--// Version: ') + 1, 19)\r\n  DECLARE @Parameters NVARCHAR(MAX)\r\n\r\n  DECLARE @HostPlatform NVARCHAR(MAX)\r\n\r\n  DECLARE @PartitionLevelStatistics BIT\r\n\r\n  DECLARE @QueueID INT\r\n  DECLARE @QueueStartTime DATETIME2\r\n\r\n  DECLARE @CurrentDBID INT\r\n  DECLARE @CurrentDatabaseName NVARCHAR(MAX)\r\n\r\n  DECLARE @CurrentDatabase_sp_executesql NVARCHAR(MAX)\r\n\r\n  DECLARE @CurrentExecuteAsUserExists BIT\r\n  DECLARE @CurrentUserAccess NVARCHAR(MAX)\r\n  DECLARE @CurrentIsReadOnly BIT\r\n  DECLARE @CurrentDatabaseState NVARCHAR(MAX)\r\n  DECLARE @CurrentInStandby BIT\r\n  DECLARE @CurrentRecoveryModel NVARCHAR(MAX)\r\n\r\n  DECLARE @CurrentIsDatabaseAccessible BIT\r\n  DECLARE @CurrentReplicaID UNIQUEIDENTIFIER\r\n  DECLARE @CurrentAvailabilityGroupID UNIQUEIDENTIFIER\r\n  DECLARE @CurrentAvailabilityGroup NVARCHAR(MAX)\r\n  DECLARE @CurrentAvailabilityGroupRole NVARCHAR(MAX)\r\n  DECLARE @CurrentDatabaseMirroringRole NVARCHAR(MAX)\r\n\r\n  DECLARE @CurrentDatabaseContext NVARCHAR(MAX)\r\n  DECLARE @CurrentCommand NVARCHAR(MAX)\r\n  DECLARE @CurrentCommandOutput INT\r\n  DECLARE @CurrentCommandType NVARCHAR(MAX)\r\n  DECLARE @CurrentComment NVARCHAR(MAX)\r\n  DECLARE @CurrentExtendedInfo XML\r\n\r\n  DECLARE @Errors TABLE (ID INT IDENTITY PRIMARY KEY,\r\n                         [Message] NVARCHAR(MAX) NOT NULL,\r\n                         Severity INT NOT NULL,\r\n                         [State] INT)\r\n\r\n  DECLARE @CurrentMessage NVARCHAR(MAX)\r\n  DECLARE @CurrentSeverity INT\r\n  DECLARE @CurrentState INT\r\n\r\n  DECLARE @CurrentIxID INT\r\n  DECLARE @CurrentIxOrder INT\r\n  DECLARE @CurrentSchemaID INT\r\n  DECLARE @CurrentSchemaName NVARCHAR(MAX)\r\n  DECLARE @CurrentObjectID INT\r\n  DECLARE @CurrentObjectName NVARCHAR(MAX)\r\n  DECLARE @CurrentObjectType NVARCHAR(MAX)\r\n  DECLARE @CurrentIsMemoryOptimized BIT\r\n  DECLARE @CurrentIndexID INT\r\n  DECLARE @CurrentIndexName NVARCHAR(MAX)\r\n  DECLARE @CurrentIndexType INT\r\n  DECLARE @CurrentStatisticsID INT\r\n  DECLARE @CurrentStatisticsName NVARCHAR(MAX)\r\n  DECLARE @CurrentPartitionID BIGINT\r\n  DECLARE @CurrentPartitionNumber INT\r\n  DECLARE @CurrentPartitionCount INT\r\n  DECLARE @CurrentIsPartition BIT\r\n  DECLARE @CurrentIndexExists BIT\r\n  DECLARE @CurrentStatisticsExists BIT\r\n  DECLARE @CurrentIsImageText BIT\r\n  DECLARE @CurrentIsNewLOB BIT\r\n  DECLARE @CurrentIsFileStream BIT\r\n  DECLARE @CurrentIsColumnStore BIT\r\n  DECLARE @CurrentIsComputed BIT\r\n  DECLARE @CurrentIsTimestamp BIT\r\n  DECLARE @CurrentAllowPageLocks BIT\r\n  DECLARE @CurrentNoRecompute BIT\r\n  DECLARE @CurrentIsIncremental BIT\r\n  DECLARE @CurrentRowCount BIGINT\r\n  DECLARE @CurrentModificationCounter BIGINT\r\n  DECLARE @CurrentOnReadOnlyFileGroup BIT\r\n  DECLARE @CurrentResumableIndexOperation BIT\r\n  DECLARE @CurrentFragmentationLevel FLOAT\r\n  DECLARE @CurrentPageCount BIGINT\r\n  DECLARE @CurrentFragmentationGroup NVARCHAR(MAX)\r\n  DECLARE @CurrentAction NVARCHAR(MAX)\r\n  DECLARE @CurrentMaxDOP INT\r\n  DECLARE @CurrentUpdateStatistics NVARCHAR(MAX)\r\n  DECLARE @CurrentStatisticsSample INT\r\n  DECLARE @CurrentStatisticsResample NVARCHAR(MAX)\r\n  DECLARE @CurrentDelay DATETIME\r\n\r\n  DECLARE @tmpDatabases TABLE (ID INT IDENTITY,\r\n                               DatabaseName NVARCHAR(MAX),\r\n                               DatabaseType NVARCHAR(MAX),\r\n                               AvailabilityGroup BIT,\r\n                               StartPosition INT,\r\n                               DatabaseSize BIGINT,\r\n                               [Order] INT,\r\n                               Selected BIT,\r\n                               Completed BIT,\r\n                               PRIMARY KEY(Selected, Completed, [Order], ID))\r\n\r\n  DECLARE @tmpAvailabilityGroups TABLE (ID INT IDENTITY PRIMARY KEY,\r\n                                        AvailabilityGroupName NVARCHAR(MAX),\r\n                                        StartPosition INT,\r\n                                        Selected BIT)\r\n\r\n  DECLARE @tmpDatabasesAvailabilityGroups TABLE (DatabaseName NVARCHAR(MAX),\r\n                                                 AvailabilityGroupName NVARCHAR(MAX))\r\n\r\n  DECLARE @tmpIndexesStatistics TABLE (ID INT IDENTITY,\r\n                                       SchemaID INT,\r\n                                       SchemaName NVARCHAR(MAX),\r\n                                       ObjectID INT,\r\n                                       ObjectName NVARCHAR(MAX),\r\n                                       ObjectType NVARCHAR(MAX),\r\n                                       IsMemoryOptimized BIT,\r\n                                       IndexID INT,\r\n                                       IndexName NVARCHAR(MAX),\r\n                                       IndexType INT,\r\n                                       AllowPageLocks BIT,\r\n                                       IsImageText BIT,\r\n                                       IsNewLOB BIT,\r\n                                       IsFileStream BIT,\r\n                                       IsColumnStore BIT,\r\n                                       IsComputed BIT,\r\n                                       IsTimestamp BIT,\r\n                                       OnReadOnlyFileGroup BIT,\r\n                                       ResumableIndexOperation BIT,\r\n                                       StatisticsID INT,\r\n                                       StatisticsName NVARCHAR(MAX),\r\n                                       [NoRecompute] BIT,\r\n                                       IsIncremental BIT,\r\n                                       PartitionID BIGINT,\r\n                                       PartitionNumber INT,\r\n                                       PartitionCount INT,\r\n                                       StartPosition INT,\r\n                                       [Order] INT,\r\n                                       Selected BIT,\r\n                                       Completed BIT,\r\n                                       PRIMARY KEY(Selected, Completed, [Order], ID))\r\n\r\n  DECLARE @SelectedDatabases TABLE (DatabaseName NVARCHAR(MAX),\r\n                                    DatabaseType NVARCHAR(MAX),\r\n                                    AvailabilityGroup NVARCHAR(MAX),\r\n                                    StartPosition INT,\r\n                                    Selected BIT)\r\n\r\n  DECLARE @SelectedAvailabilityGroups TABLE (AvailabilityGroupName NVARCHAR(MAX),\r\n                                             StartPosition INT,\r\n                                             Selected BIT)\r\n\r\n  DECLARE @SelectedIndexes TABLE (DatabaseName NVARCHAR(MAX),\r\n                                  SchemaName NVARCHAR(MAX),\r\n                                  ObjectName NVARCHAR(MAX),\r\n                                  IndexName NVARCHAR(MAX),\r\n                                  StartPosition INT,\r\n                                  Selected BIT)\r\n\r\n  DECLARE @Actions TABLE ([Action] NVARCHAR(MAX))\r\n\r\n  INSERT INTO @Actions([Action]) VALUES('INDEX_REBUILD_ONLINE')\r\n  INSERT INTO @Actions([Action]) VALUES('INDEX_REBUILD_OFFLINE')\r\n  INSERT INTO @Actions([Action]) VALUES('INDEX_REORGANIZE')\r\n\r\n  DECLARE @ActionsPreferred TABLE (FragmentationGroup NVARCHAR(MAX),\r\n                                   [Priority] INT,\r\n                                   [Action] NVARCHAR(MAX))\r\n\r\n  DECLARE @CurrentActionsAllowed TABLE ([Action] NVARCHAR(MAX))\r\n\r\n  DECLARE @CurrentAlterIndexWithClauseArguments TABLE (ID INT IDENTITY,\r\n                                                       Argument NVARCHAR(MAX),\r\n                                                       Added BIT DEFAULT 0)\r\n\r\n  DECLARE @CurrentAlterIndexArgumentID INT\r\n  DECLARE @CurrentAlterIndexArgument NVARCHAR(MAX)\r\n  DECLARE @CurrentAlterIndexWithClause NVARCHAR(MAX)\r\n\r\n  DECLARE @CurrentUpdateStatisticsWithClauseArguments TABLE (ID INT IDENTITY,\r\n                                                             Argument NVARCHAR(MAX),\r\n                                                             Added BIT DEFAULT 0)\r\n\r\n  DECLARE @CurrentUpdateStatisticsArgumentID INT\r\n  DECLARE @CurrentUpdateStatisticsArgument NVARCHAR(MAX)\r\n  DECLARE @CurrentUpdateStatisticsWithClause NVARCHAR(MAX)\r\n\r\n  DECLARE @Error INT = 0\r\n  DECLARE @ReturnCode INT = 0\r\n\r\n  DECLARE @EmptyLine NVARCHAR(MAX) = CHAR(9)\r\n\r\n  DECLARE @Version NUMERIC(18,10) = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(MAX)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(MAX))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(MAX)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(MAX))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(MAX)))),'.','') AS NUMERIC(18,10))\r\n\r\n  IF @Version >= 14\r\n  BEGIN\r\n    SELECT @HostPlatform = host_platform\r\n    FROM sys.dm_os_host_info\r\n  END\r\n  ELSE\r\n  BEGIN\r\n    SET @HostPlatform = 'Windows'\r\n  END\r\n\r\n  DECLARE @AmazonRDS BIT = CASE WHEN DB_ID('rdsadmin') IS NOT NULL AND SUSER_SNAME(0x01) = 'rdsa' THEN 1 ELSE 0 END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Log initial information                                                                    //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @Parameters = '@Databases = ' + ISNULL('''' + REPLACE(@Databases,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @FragmentationLow = ' + ISNULL('''' + REPLACE(@FragmentationLow,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @FragmentationMedium = ' + ISNULL('''' + REPLACE(@FragmentationMedium,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @FragmentationHigh = ' + ISNULL('''' + REPLACE(@FragmentationHigh,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @FragmentationLevel1 = ' + ISNULL(CAST(@FragmentationLevel1 AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @FragmentationLevel2 = ' + ISNULL(CAST(@FragmentationLevel2 AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @MinNumberOfPages = ' + ISNULL(CAST(@MinNumberOfPages AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @MaxNumberOfPages = ' + ISNULL(CAST(@MaxNumberOfPages AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @SortInTempdb = ' + ISNULL('''' + REPLACE(@SortInTempdb,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @MaxDOP = ' + ISNULL(CAST(@MaxDOP AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @FillFactor = ' + ISNULL(CAST(@FillFactor AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @PadIndex = ' + ISNULL('''' + REPLACE(@PadIndex,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @LOBCompaction = ' + ISNULL('''' + REPLACE(@LOBCompaction,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @UpdateStatistics = ' + ISNULL('''' + REPLACE(@UpdateStatistics,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @OnlyModifiedStatistics = ' + ISNULL('''' + REPLACE(@OnlyModifiedStatistics,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @StatisticsModificationLevel = ' + ISNULL(CAST(@StatisticsModificationLevel AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @StatisticsSample = ' + ISNULL(CAST(@StatisticsSample AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @StatisticsResample = ' + ISNULL('''' + REPLACE(@StatisticsResample,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @PartitionLevel = ' + ISNULL('''' + REPLACE(@PartitionLevel,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @MSShippedObjects = ' + ISNULL('''' + REPLACE(@MSShippedObjects,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Indexes = ' + ISNULL('''' + REPLACE(@Indexes,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @TimeLimit = ' + ISNULL(CAST(@TimeLimit AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @Delay = ' + ISNULL(CAST(@Delay AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @WaitAtLowPriorityMaxDuration = ' + ISNULL(CAST(@WaitAtLowPriorityMaxDuration AS NVARCHAR),'NULL')\r\n  SET @Parameters += ', @WaitAtLowPriorityAbortAfterWait = ' + ISNULL('''' + REPLACE(@WaitAtLowPriorityAbortAfterWait,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Resumable = ' + ISNULL('''' + REPLACE(@Resumable,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @AvailabilityGroups = ' + ISNULL('''' + REPLACE(@AvailabilityGroups,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @LockTimeout = ' + ISNULL(CAST(@LockTimeout AS nvarchar),'NULL')\r\n  SET @Parameters += ', @LockMessageSeverity = ' + ISNULL(CAST(@LockMessageSeverity AS nvarchar),'NULL')\r\n  SET @Parameters += ', @StringDelimiter = ' + ISNULL('''' + REPLACE(@StringDelimiter,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @DatabaseOrder = ' + ISNULL('''' + REPLACE(@DatabaseOrder,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @DatabasesInParallel = ' + ISNULL('''' + REPLACE(@DatabasesInParallel,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @ExecuteAsUser = ' + ISNULL('''' + REPLACE(@ExecuteAsUser,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @LogToTable = ' + ISNULL('''' + REPLACE(@LogToTable,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Execute = ' + ISNULL('''' + REPLACE(@Execute,'''','''''') + '''','NULL')\r\n\r\n  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,@StartTime,120)\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Server: ' + CAST(SERVERPROPERTY('ServerName') AS nvarchar(max))\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Version: ' + CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Edition: ' + CAST(SERVERPROPERTY('Edition') AS nvarchar(max))\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Platform: ' + @HostPlatform\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Procedure: ' + QUOTENAME(DB_NAME(DB_ID())) + '.' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@ObjectName)\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Parameters: ' + @Parameters\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Version: ' + @VersionTimestamp\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Source: https://ola.hallengren.com'\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check core requirements                                                                    //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF NOT (SELECT [compatibility_level] FROM sys.databases WHERE database_id = DB_ID()) >= 90\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The database ' + QUOTENAME(DB_NAME(DB_ID())) + ' has to be in compatibility level 90 or higher.', 16, 1\r\n  END\r\n\r\n  IF NOT (SELECT uses_ansi_nulls FROM sys.sql_modules WHERE [object_id] = @@PROCID) = 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'ANSI_NULLS has to be set to ON for the stored procedure.', 16, 1\r\n  END\r\n\r\n  IF NOT (SELECT uses_quoted_identifier FROM sys.sql_modules WHERE [object_id] = @@PROCID) = 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'QUOTED_IDENTIFIER has to be set to ON for the stored procedure.', 16, 1\r\n  END\r\n\r\n  IF NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The stored procedure CommandExecute is missing. Download https://ola.hallengren.com/scripts/CommandExecute.sql.', 16, 1\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute' AND OBJECT_DEFINITION(objects.[object_id]) NOT LIKE '%@DatabaseContext%')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The stored procedure CommandExecute needs to be updated. Download https://ola.hallengren.com/scripts/CommandExecute.sql.', 16, 1\r\n  END\r\n\r\n  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The table CommandLog is missing. Download https://ola.hallengren.com/scripts/CommandLog.sql.', 16, 1\r\n  END\r\n\r\n  IF @DatabasesInParallel = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'Queue')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The table Queue is missing. Download https://ola.hallengren.com/scripts/Queue.sql.', 16, 1\r\n  END\r\n\r\n  IF @DatabasesInParallel = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'QueueDatabase')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The table QueueDatabase is missing. Download https://ola.hallengren.com/scripts/QueueDatabase.sql.', 16, 1\r\n  END\r\n\r\n  IF @@TRANCOUNT <> 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The transaction count is not 0.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Select databases                                                                           //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @Databases = REPLACE(@Databases, CHAR(10), '')\r\n  SET @Databases = REPLACE(@Databases, CHAR(13), '')\r\n\r\n  WHILE CHARINDEX(@StringDelimiter + ' ', @Databases) > 0 SET @Databases = REPLACE(@Databases, @StringDelimiter + ' ', @StringDelimiter)\r\n  WHILE CHARINDEX(' ' + @StringDelimiter, @Databases) > 0 SET @Databases = REPLACE(@Databases, ' ' + @StringDelimiter, @StringDelimiter)\r\n\r\n  SET @Databases = LTRIM(RTRIM(@Databases));\r\n\r\n  WITH Databases1 (StartPosition, EndPosition, DatabaseItem) AS\r\n  (\r\n  SELECT 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Databases, 1), 0), LEN(@Databases) + 1) AS EndPosition,\r\n         SUBSTRING(@Databases, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Databases, 1), 0), LEN(@Databases) + 1) - 1) AS DatabaseItem\r\n  WHERE @Databases IS NOT NULL\r\n  UNION ALL\r\n  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) AS EndPosition,\r\n         SUBSTRING(@Databases, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) - EndPosition - 1) AS DatabaseItem\r\n  FROM Databases1\r\n  WHERE EndPosition < LEN(@Databases) + 1\r\n  ),\r\n  Databases2 (DatabaseItem, StartPosition, Selected) AS\r\n  (\r\n  SELECT CASE WHEN DatabaseItem LIKE '-%' THEN RIGHT(DatabaseItem,LEN(DatabaseItem) - 1) ELSE DatabaseItem END AS DatabaseItem,\r\n         StartPosition,\r\n         CASE WHEN DatabaseItem LIKE '-%' THEN 0 ELSE 1 END AS Selected\r\n  FROM Databases1\r\n  ),\r\n  Databases3 (DatabaseItem, DatabaseType, AvailabilityGroup, StartPosition, Selected) AS\r\n  (\r\n  SELECT CASE WHEN DatabaseItem IN('ALL_DATABASES','SYSTEM_DATABASES','USER_DATABASES','AVAILABILITY_GROUP_DATABASES') THEN '%' ELSE DatabaseItem END AS DatabaseItem,\r\n         CASE WHEN DatabaseItem = 'SYSTEM_DATABASES' THEN 'S' WHEN DatabaseItem = 'USER_DATABASES' THEN 'U' ELSE NULL END AS DatabaseType,\r\n         CASE WHEN DatabaseItem = 'AVAILABILITY_GROUP_DATABASES' THEN 1 ELSE NULL END AvailabilityGroup,\r\n         StartPosition,\r\n         Selected\r\n  FROM Databases2\r\n  ),\r\n  Databases4 (DatabaseName, DatabaseType, AvailabilityGroup, StartPosition, Selected) AS\r\n  (\r\n  SELECT CASE WHEN LEFT(DatabaseItem,1) = '[' AND RIGHT(DatabaseItem,1) = ']' THEN PARSENAME(DatabaseItem,1) ELSE DatabaseItem END AS DatabaseItem,\r\n         DatabaseType,\r\n         AvailabilityGroup,\r\n         StartPosition,\r\n         Selected\r\n  FROM Databases3\r\n  )\r\n  INSERT INTO @SelectedDatabases (DatabaseName, DatabaseType, AvailabilityGroup, StartPosition, Selected)\r\n  SELECT DatabaseName,\r\n         DatabaseType,\r\n         AvailabilityGroup,\r\n         StartPosition,\r\n         Selected\r\n  FROM Databases4\r\n  OPTION (MAXRECURSION 0)\r\n\r\n  IF @Version >= 11 AND SERVERPROPERTY('IsHadrEnabled') = 1\r\n  BEGIN\r\n    INSERT INTO @tmpAvailabilityGroups (AvailabilityGroupName, Selected)\r\n    SELECT name AS AvailabilityGroupName,\r\n           0 AS Selected\r\n    FROM sys.availability_groups\r\n\r\n    INSERT INTO @tmpDatabasesAvailabilityGroups (DatabaseName, AvailabilityGroupName)\r\n    SELECT databases.name,\r\n           availability_groups.name\r\n    FROM sys.databases databases\r\n    INNER JOIN sys.availability_replicas availability_replicas ON databases.replica_id = availability_replicas.replica_id\r\n    INNER JOIN sys.availability_groups availability_groups ON availability_replicas.group_id = availability_groups.group_id\r\n  END\r\n\r\n  INSERT INTO @tmpDatabases (DatabaseName, DatabaseType, AvailabilityGroup, [Order], Selected, Completed)\r\n  SELECT [name] AS DatabaseName,\r\n         CASE WHEN name IN('master','msdb','model') OR is_distributor = 1 THEN 'S' ELSE 'U' END AS DatabaseType,\r\n         NULL AS AvailabilityGroup,\r\n         0 AS [Order],\r\n         0 AS Selected,\r\n         0 AS Completed\r\n  FROM sys.databases\r\n  WHERE [name] <> 'tempdb'\r\n  AND source_database_id IS NULL\r\n  ORDER BY [name] ASC\r\n\r\n  UPDATE tmpDatabases\r\n  SET AvailabilityGroup = CASE WHEN EXISTS (SELECT * FROM @tmpDatabasesAvailabilityGroups WHERE DatabaseName = tmpDatabases.DatabaseName) THEN 1 ELSE 0 END\r\n  FROM @tmpDatabases tmpDatabases\r\n\r\n  UPDATE tmpDatabases\r\n  SET tmpDatabases.Selected = SelectedDatabases.Selected\r\n  FROM @tmpDatabases tmpDatabases\r\n  INNER JOIN @SelectedDatabases SelectedDatabases\r\n  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')\r\n  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)\r\n  AND (tmpDatabases.AvailabilityGroup = SelectedDatabases.AvailabilityGroup OR SelectedDatabases.AvailabilityGroup IS NULL)\r\n  WHERE SelectedDatabases.Selected = 1\r\n\r\n  UPDATE tmpDatabases\r\n  SET tmpDatabases.Selected = SelectedDatabases.Selected\r\n  FROM @tmpDatabases tmpDatabases\r\n  INNER JOIN @SelectedDatabases SelectedDatabases\r\n  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')\r\n  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)\r\n  AND (tmpDatabases.AvailabilityGroup = SelectedDatabases.AvailabilityGroup OR SelectedDatabases.AvailabilityGroup IS NULL)\r\n  WHERE SelectedDatabases.Selected = 0\r\n\r\n  UPDATE tmpDatabases\r\n  SET tmpDatabases.StartPosition = SelectedDatabases2.StartPosition\r\n  FROM @tmpDatabases tmpDatabases\r\n  INNER JOIN (SELECT tmpDatabases.DatabaseName, MIN(SelectedDatabases.StartPosition) AS StartPosition\r\n              FROM @tmpDatabases tmpDatabases\r\n              INNER JOIN @SelectedDatabases SelectedDatabases\r\n              ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')\r\n              AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)\r\n              AND (tmpDatabases.AvailabilityGroup = SelectedDatabases.AvailabilityGroup OR SelectedDatabases.AvailabilityGroup IS NULL)\r\n              WHERE SelectedDatabases.Selected = 1\r\n              GROUP BY tmpDatabases.DatabaseName) SelectedDatabases2\r\n  ON tmpDatabases.DatabaseName = SelectedDatabases2.DatabaseName\r\n\r\n  IF @Databases IS NOT NULL AND (NOT EXISTS(SELECT * FROM @SelectedDatabases) OR EXISTS(SELECT * FROM @SelectedDatabases WHERE DatabaseName IS NULL OR DatabaseName = ''))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Databases is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Select availability groups                                                                 //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @AvailabilityGroups IS NOT NULL AND @Version >= 11 AND SERVERPROPERTY('IsHadrEnabled') = 1\r\n  BEGIN\r\n\r\n    SET @AvailabilityGroups = REPLACE(@AvailabilityGroups, CHAR(10), '')\r\n    SET @AvailabilityGroups = REPLACE(@AvailabilityGroups, CHAR(13), '')\r\n\r\n    WHILE CHARINDEX(@StringDelimiter + ' ', @AvailabilityGroups) > 0 SET @AvailabilityGroups = REPLACE(@AvailabilityGroups, @StringDelimiter + ' ', @StringDelimiter)\r\n    WHILE CHARINDEX(' ' + @StringDelimiter, @AvailabilityGroups) > 0 SET @AvailabilityGroups = REPLACE(@AvailabilityGroups, ' ' + @StringDelimiter, @StringDelimiter)\r\n\r\n    SET @AvailabilityGroups = LTRIM(RTRIM(@AvailabilityGroups));\r\n\r\n    WITH AvailabilityGroups1 (StartPosition, EndPosition, AvailabilityGroupItem) AS\r\n    (\r\n    SELECT 1 AS StartPosition,\r\n           ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @AvailabilityGroups, 1), 0), LEN(@AvailabilityGroups) + 1) AS EndPosition,\r\n           SUBSTRING(@AvailabilityGroups, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @AvailabilityGroups, 1), 0), LEN(@AvailabilityGroups) + 1) - 1) AS AvailabilityGroupItem\r\n    WHERE @AvailabilityGroups IS NOT NULL\r\n    UNION ALL\r\n    SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n           ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @AvailabilityGroups, EndPosition + 1), 0), LEN(@AvailabilityGroups) + 1) AS EndPosition,\r\n           SUBSTRING(@AvailabilityGroups, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @AvailabilityGroups, EndPosition + 1), 0), LEN(@AvailabilityGroups) + 1) - EndPosition - 1) AS AvailabilityGroupItem\r\n    FROM AvailabilityGroups1\r\n    WHERE EndPosition < LEN(@AvailabilityGroups) + 1\r\n    ),\r\n    AvailabilityGroups2 (AvailabilityGroupItem, StartPosition, Selected) AS\r\n    (\r\n    SELECT CASE WHEN AvailabilityGroupItem LIKE '-%' THEN RIGHT(AvailabilityGroupItem,LEN(AvailabilityGroupItem) - 1) ELSE AvailabilityGroupItem END AS AvailabilityGroupItem,\r\n           StartPosition,\r\n           CASE WHEN AvailabilityGroupItem LIKE '-%' THEN 0 ELSE 1 END AS Selected\r\n    FROM AvailabilityGroups1\r\n    ),\r\n    AvailabilityGroups3 (AvailabilityGroupItem, StartPosition, Selected) AS\r\n    (\r\n    SELECT CASE WHEN AvailabilityGroupItem = 'ALL_AVAILABILITY_GROUPS' THEN '%' ELSE AvailabilityGroupItem END AS AvailabilityGroupItem,\r\n           StartPosition,\r\n           Selected\r\n    FROM AvailabilityGroups2\r\n    ),\r\n    AvailabilityGroups4 (AvailabilityGroupName, StartPosition, Selected) AS\r\n    (\r\n    SELECT CASE WHEN LEFT(AvailabilityGroupItem,1) = '[' AND RIGHT(AvailabilityGroupItem,1) = ']' THEN PARSENAME(AvailabilityGroupItem,1) ELSE AvailabilityGroupItem END AS AvailabilityGroupItem,\r\n           StartPosition,\r\n           Selected\r\n    FROM AvailabilityGroups3\r\n    )\r\n    INSERT INTO @SelectedAvailabilityGroups (AvailabilityGroupName, StartPosition, Selected)\r\n    SELECT AvailabilityGroupName, StartPosition, Selected\r\n    FROM AvailabilityGroups4\r\n    OPTION (MAXRECURSION 0)\r\n\r\n    UPDATE tmpAvailabilityGroups\r\n    SET tmpAvailabilityGroups.Selected = SelectedAvailabilityGroups.Selected\r\n    FROM @tmpAvailabilityGroups tmpAvailabilityGroups\r\n    INNER JOIN @SelectedAvailabilityGroups SelectedAvailabilityGroups\r\n    ON tmpAvailabilityGroups.AvailabilityGroupName LIKE REPLACE(SelectedAvailabilityGroups.AvailabilityGroupName,'_','[_]')\r\n    WHERE SelectedAvailabilityGroups.Selected = 1\r\n\r\n    UPDATE tmpAvailabilityGroups\r\n    SET tmpAvailabilityGroups.Selected = SelectedAvailabilityGroups.Selected\r\n    FROM @tmpAvailabilityGroups tmpAvailabilityGroups\r\n    INNER JOIN @SelectedAvailabilityGroups SelectedAvailabilityGroups\r\n    ON tmpAvailabilityGroups.AvailabilityGroupName LIKE REPLACE(SelectedAvailabilityGroups.AvailabilityGroupName,'_','[_]')\r\n    WHERE SelectedAvailabilityGroups.Selected = 0\r\n\r\n    UPDATE tmpAvailabilityGroups\r\n    SET tmpAvailabilityGroups.StartPosition = SelectedAvailabilityGroups2.StartPosition\r\n    FROM @tmpAvailabilityGroups tmpAvailabilityGroups\r\n    INNER JOIN (SELECT tmpAvailabilityGroups.AvailabilityGroupName, MIN(SelectedAvailabilityGroups.StartPosition) AS StartPosition\r\n                FROM @tmpAvailabilityGroups tmpAvailabilityGroups\r\n                INNER JOIN @SelectedAvailabilityGroups SelectedAvailabilityGroups\r\n                ON tmpAvailabilityGroups.AvailabilityGroupName LIKE REPLACE(SelectedAvailabilityGroups.AvailabilityGroupName,'_','[_]')\r\n                WHERE SelectedAvailabilityGroups.Selected = 1\r\n                GROUP BY tmpAvailabilityGroups.AvailabilityGroupName) SelectedAvailabilityGroups2\r\n    ON tmpAvailabilityGroups.AvailabilityGroupName = SelectedAvailabilityGroups2.AvailabilityGroupName\r\n\r\n    UPDATE tmpDatabases\r\n    SET tmpDatabases.StartPosition = tmpAvailabilityGroups.StartPosition,\r\n        tmpDatabases.Selected = 1\r\n    FROM @tmpDatabases tmpDatabases\r\n    INNER JOIN @tmpDatabasesAvailabilityGroups tmpDatabasesAvailabilityGroups ON tmpDatabases.DatabaseName = tmpDatabasesAvailabilityGroups.DatabaseName\r\n    INNER JOIN @tmpAvailabilityGroups tmpAvailabilityGroups ON tmpDatabasesAvailabilityGroups.AvailabilityGroupName = tmpAvailabilityGroups.AvailabilityGroupName\r\n    WHERE tmpAvailabilityGroups.Selected = 1\r\n\r\n  END\r\n\r\n  IF @AvailabilityGroups IS NOT NULL AND (NOT EXISTS(SELECT * FROM @SelectedAvailabilityGroups) OR EXISTS(SELECT * FROM @SelectedAvailabilityGroups WHERE AvailabilityGroupName IS NULL OR AvailabilityGroupName = '') OR @Version < 11 OR SERVERPROPERTY('IsHadrEnabled') = 0)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AvailabilityGroups is not supported.', 16, 1\r\n  END\r\n\r\n  IF (@Databases IS NULL AND @AvailabilityGroups IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'You need to specify one of the parameters @Databases and @AvailabilityGroups.', 16, 2\r\n  END\r\n\r\n  IF (@Databases IS NOT NULL AND @AvailabilityGroups IS NOT NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'You can only specify one of the parameters @Databases and @AvailabilityGroups.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Select indexes                                                                             //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @Indexes = REPLACE(@Indexes, CHAR(10), '')\r\n  SET @Indexes = REPLACE(@Indexes, CHAR(13), '')\r\n\r\n  WHILE CHARINDEX(@StringDelimiter + ' ', @Indexes) > 0 SET @Indexes = REPLACE(@Indexes, @StringDelimiter + ' ', @StringDelimiter)\r\n  WHILE CHARINDEX(' ' + @StringDelimiter, @Indexes) > 0 SET @Indexes = REPLACE(@Indexes, ' ' + @StringDelimiter, @StringDelimiter)\r\n\r\n  SET @Indexes = LTRIM(RTRIM(@Indexes));\r\n\r\n  WITH Indexes1 (StartPosition, EndPosition, IndexItem) AS\r\n  (\r\n  SELECT 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Indexes, 1), 0), LEN(@Indexes) + 1) AS EndPosition,\r\n         SUBSTRING(@Indexes, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Indexes, 1), 0), LEN(@Indexes) + 1) - 1) AS IndexItem\r\n  WHERE @Indexes IS NOT NULL\r\n  UNION ALL\r\n  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Indexes, EndPosition + 1), 0), LEN(@Indexes) + 1) AS EndPosition,\r\n         SUBSTRING(@Indexes, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Indexes, EndPosition + 1), 0), LEN(@Indexes) + 1) - EndPosition - 1) AS IndexItem\r\n  FROM Indexes1\r\n  WHERE EndPosition < LEN(@Indexes) + 1\r\n  ),\r\n  Indexes2 (IndexItem, StartPosition, Selected) AS\r\n  (\r\n  SELECT CASE WHEN IndexItem LIKE '-%' THEN RIGHT(IndexItem,LEN(IndexItem) - 1) ELSE IndexItem END AS IndexItem,\r\n         StartPosition,\r\n         CASE WHEN IndexItem LIKE '-%' THEN 0 ELSE 1 END AS Selected\r\n  FROM Indexes1\r\n  ),\r\n  Indexes3 (IndexItem, StartPosition, Selected) AS\r\n  (\r\n  SELECT CASE WHEN IndexItem = 'ALL_INDEXES' THEN '%.%.%.%' ELSE IndexItem END AS IndexItem,\r\n         StartPosition,\r\n         Selected\r\n  FROM Indexes2\r\n  ),\r\n  Indexes4 (DatabaseName, SchemaName, ObjectName, IndexName, StartPosition, Selected) AS\r\n  (\r\n  SELECT CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN PARSENAME(IndexItem,3) ELSE PARSENAME(IndexItem,4) END AS DatabaseName,\r\n         CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN PARSENAME(IndexItem,2) ELSE PARSENAME(IndexItem,3) END AS SchemaName,\r\n         CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN PARSENAME(IndexItem,1) ELSE PARSENAME(IndexItem,2) END AS ObjectName,\r\n         CASE WHEN PARSENAME(IndexItem,4) IS NULL THEN '%' ELSE PARSENAME(IndexItem,1) END AS IndexName,\r\n         StartPosition,\r\n         Selected\r\n  FROM Indexes3\r\n  )\r\n  INSERT INTO @SelectedIndexes (DatabaseName, SchemaName, ObjectName, IndexName, StartPosition, Selected)\r\n  SELECT DatabaseName, SchemaName, ObjectName, IndexName, StartPosition, Selected\r\n  FROM Indexes4\r\n  OPTION (MAXRECURSION 0)\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Select actions                                                                             //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @FragmentationLow = REPLACE(@FragmentationLow, @StringDelimiter + ' ', @StringDelimiter);\r\n\r\n  WITH FragmentationLow (StartPosition, EndPosition, [Action]) AS\r\n  (\r\n  SELECT 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationLow, 1), 0), LEN(@FragmentationLow) + 1) AS EndPosition,\r\n         SUBSTRING(@FragmentationLow, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationLow, 1), 0), LEN(@FragmentationLow) + 1) - 1) AS [Action]\r\n  WHERE @FragmentationLow IS NOT NULL\r\n  UNION ALL\r\n  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationLow, EndPosition + 1), 0), LEN(@FragmentationLow) + 1) AS EndPosition,\r\n         SUBSTRING(@FragmentationLow, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationLow, EndPosition + 1), 0), LEN(@FragmentationLow) + 1) - EndPosition - 1) AS [Action]\r\n  FROM FragmentationLow\r\n  WHERE EndPosition < LEN(@FragmentationLow) + 1\r\n  )\r\n  INSERT INTO @ActionsPreferred(FragmentationGroup, [Priority], [Action])\r\n  SELECT 'Low' AS FragmentationGroup,\r\n         ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS [Priority],\r\n         [Action]\r\n  FROM FragmentationLow\r\n  OPTION (MAXRECURSION 0)\r\n\r\n  SET @FragmentationMedium = REPLACE(@FragmentationMedium, @StringDelimiter + ' ', @StringDelimiter);\r\n\r\n  WITH FragmentationMedium (StartPosition, EndPosition, [Action]) AS\r\n  (\r\n  SELECT 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationMedium, 1), 0), LEN(@FragmentationMedium) + 1) AS EndPosition,\r\n         SUBSTRING(@FragmentationMedium, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationMedium, 1), 0), LEN(@FragmentationMedium) + 1) - 1) AS [Action]\r\n  WHERE @FragmentationMedium IS NOT NULL\r\n  UNION ALL\r\n  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationMedium, EndPosition + 1), 0), LEN(@FragmentationMedium) + 1) AS EndPosition,\r\n         SUBSTRING(@FragmentationMedium, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationMedium, EndPosition + 1), 0), LEN(@FragmentationMedium) + 1) - EndPosition - 1) AS [Action]\r\n  FROM FragmentationMedium\r\n  WHERE EndPosition < LEN(@FragmentationMedium) + 1\r\n  )\r\n  INSERT INTO @ActionsPreferred(FragmentationGroup, [Priority], [Action])\r\n  SELECT 'Medium' AS FragmentationGroup,\r\n         ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS [Priority],\r\n         [Action]\r\n  FROM FragmentationMedium\r\n  OPTION (MAXRECURSION 0)\r\n\r\n  SET @FragmentationHigh = REPLACE(@FragmentationHigh, @StringDelimiter + ' ', @StringDelimiter);\r\n\r\n  WITH FragmentationHigh (StartPosition, EndPosition, [Action]) AS\r\n  (\r\n  SELECT 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationHigh, 1), 0), LEN(@FragmentationHigh) + 1) AS EndPosition,\r\n         SUBSTRING(@FragmentationHigh, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationHigh, 1), 0), LEN(@FragmentationHigh) + 1) - 1) AS [Action]\r\n  WHERE @FragmentationHigh IS NOT NULL\r\n  UNION ALL\r\n  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationHigh, EndPosition + 1), 0), LEN(@FragmentationHigh) + 1) AS EndPosition,\r\n         SUBSTRING(@FragmentationHigh, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @FragmentationHigh, EndPosition + 1), 0), LEN(@FragmentationHigh) + 1) - EndPosition - 1) AS [Action]\r\n  FROM FragmentationHigh\r\n  WHERE EndPosition < LEN(@FragmentationHigh) + 1\r\n  )\r\n  INSERT INTO @ActionsPreferred(FragmentationGroup, [Priority], [Action])\r\n  SELECT 'High' AS FragmentationGroup,\r\n         ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS [Priority],\r\n         [Action]\r\n  FROM FragmentationHigh\r\n  OPTION (MAXRECURSION 0)\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check input parameters                                                                     //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS (SELECT [Action] FROM @ActionsPreferred WHERE FragmentationGroup = 'Low' AND [Action] NOT IN(SELECT * FROM @Actions))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FragmentationLow is not supported.', 16, 1\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM @ActionsPreferred WHERE FragmentationGroup = 'Low' GROUP BY [Action] HAVING COUNT(*) > 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FragmentationLow is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS (SELECT [Action] FROM @ActionsPreferred WHERE FragmentationGroup = 'Medium' AND [Action] NOT IN(SELECT * FROM @Actions))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FragmentationMedium is not supported.', 16, 1\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM @ActionsPreferred WHERE FragmentationGroup = 'Medium' GROUP BY [Action] HAVING COUNT(*) > 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FragmentationMedium is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS (SELECT [Action] FROM @ActionsPreferred WHERE FragmentationGroup = 'High' AND [Action] NOT IN(SELECT * FROM @Actions))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FragmentationHigh is not supported.', 16, 1\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM @ActionsPreferred WHERE FragmentationGroup = 'High' GROUP BY [Action] HAVING COUNT(*) > 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FragmentationHigh is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @FragmentationLevel1 <= 0 OR @FragmentationLevel1 >= 100 OR @FragmentationLevel1 IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FragmentationLevel1 is not supported.', 16, 1\r\n  END\r\n\r\n  IF @FragmentationLevel1 >= @FragmentationLevel2\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FragmentationLevel1 is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @FragmentationLevel2 <= 0 OR @FragmentationLevel2 >= 100 OR @FragmentationLevel2 IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FragmentationLevel2 is not supported.', 16, 1\r\n  END\r\n\r\n  IF @FragmentationLevel2 <= @FragmentationLevel1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FragmentationLevel2 is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @MinNumberOfPages < 0 OR @MinNumberOfPages IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MinNumberOfPages is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @MaxNumberOfPages < 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MaxNumberOfPages is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @SortInTempdb NOT IN('Y','N') OR @SortInTempdb IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @SortInTempdb is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @MaxDOP < 0 OR @MaxDOP > 64\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MaxDOP is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @FillFactor <= 0 OR @FillFactor > 100\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FillFactor is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @PadIndex NOT IN('Y','N')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @PadIndex is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @LOBCompaction NOT IN('Y','N') OR @LOBCompaction IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @LOBCompaction is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @UpdateStatistics NOT IN('ALL','COLUMNS','INDEX')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @UpdateStatistics is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @OnlyModifiedStatistics NOT IN('Y','N') OR @OnlyModifiedStatistics IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @OnlyModifiedStatistics is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @StatisticsModificationLevel <= 0 OR @StatisticsModificationLevel > 100\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @StatisticsModificationLevel is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @OnlyModifiedStatistics = 'Y' AND @StatisticsModificationLevel IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'You can only specify one of the parameters @OnlyModifiedStatistics and @StatisticsModificationLevel.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @StatisticsSample <= 0 OR @StatisticsSample  > 100\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @StatisticsSample is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @StatisticsResample NOT IN('Y','N') OR @StatisticsResample IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @StatisticsResample is not supported.', 16, 1\r\n  END\r\n\r\n  IF @StatisticsResample = 'Y' AND @StatisticsSample IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @StatisticsResample is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @PartitionLevel NOT IN('Y','N') OR @PartitionLevel IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @PartitionLevel is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @MSShippedObjects NOT IN('Y','N') OR @MSShippedObjects IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MSShippedObjects is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS(SELECT * FROM @SelectedIndexes WHERE DatabaseName IS NULL OR SchemaName IS NULL OR ObjectName IS NULL OR IndexName IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Indexes is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Indexes IS NOT NULL AND NOT EXISTS(SELECT * FROM @SelectedIndexes)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Indexes is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @TimeLimit < 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @TimeLimit is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Delay < 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Delay is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @WaitAtLowPriorityMaxDuration < 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @WaitAtLowPriorityMaxDuration is not supported.', 16, 1\r\n  END\r\n\r\n  IF @WaitAtLowPriorityMaxDuration IS NOT NULL AND @Version < 12\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @WaitAtLowPriorityMaxDuration is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @WaitAtLowPriorityAbortAfterWait NOT IN('NONE','SELF','BLOCKERS')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @WaitAtLowPriorityAbortAfterWait is not supported.', 16, 1\r\n  END\r\n\r\n  IF @WaitAtLowPriorityAbortAfterWait IS NOT NULL AND @Version < 12\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @WaitAtLowPriorityAbortAfterWait is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF (@WaitAtLowPriorityAbortAfterWait IS NOT NULL AND @WaitAtLowPriorityMaxDuration IS NULL) OR (@WaitAtLowPriorityAbortAfterWait IS NULL AND @WaitAtLowPriorityMaxDuration IS NOT NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The parameters @WaitAtLowPriorityMaxDuration and @WaitAtLowPriorityAbortAfterWait can only be used together.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Resumable NOT IN('Y','N') OR @Resumable IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Resumable is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Resumable = 'Y' AND NOT (@Version >= 14 OR SERVERPROPERTY('EngineEdition') IN (5, 8))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Resumable is not supported.', 16, 2\r\n  END\r\n\r\n  IF @Resumable = 'Y' AND @SortInTempdb = 'Y'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'You can only specify one of the parameters @Resumable and @SortInTempdb.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @LockTimeout < 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @LockTimeout is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @LockMessageSeverity NOT IN(10, 16)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @LockMessageSeverity is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @StringDelimiter IS NULL OR LEN(@StringDelimiter) > 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @StringDelimiter is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DatabaseOrder NOT IN('DATABASE_NAME_ASC','DATABASE_NAME_DESC','DATABASE_SIZE_ASC','DATABASE_SIZE_DESC')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DatabaseOrder is not supported.', 16, 1\r\n  END\r\n\r\n  IF @DatabaseOrder IS NOT NULL AND SERVERPROPERTY('EngineEdition') = 5\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DatabaseOrder is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DatabasesInParallel NOT IN('Y','N') OR @DatabasesInParallel IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DatabasesInParallel is not supported.', 16, 1\r\n  END\r\n\r\n  IF @DatabasesInParallel = 'Y' AND SERVERPROPERTY('EngineEdition') = 5\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DatabasesInParallel is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF LEN(@ExecuteAsUser) > 128\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ExecuteAsUser is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @LogToTable is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Execute NOT IN('Y','N') OR @Execute IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Execute is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS(SELECT * FROM @Errors)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The documentation is available at https://ola.hallengren.com/sql-server-index-and-statistics-maintenance.html.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check that selected databases and availability groups exist                                //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @ErrorMessage = ''\r\n  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '\r\n  FROM @SelectedDatabases\r\n  WHERE DatabaseName NOT LIKE '%[%]%'\r\n  AND DatabaseName NOT IN (SELECT DatabaseName FROM @tmpDatabases)\r\n  IF @@ROWCOUNT > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The following databases in the @Databases parameter do not exist: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.', 10, 1\r\n  END\r\n\r\n  SET @ErrorMessage = ''\r\n  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '\r\n  FROM @SelectedIndexes\r\n  WHERE DatabaseName NOT LIKE '%[%]%'\r\n  AND DatabaseName NOT IN (SELECT DatabaseName FROM @tmpDatabases)\r\n  IF @@ROWCOUNT > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The following databases in the @Indexes parameter do not exist: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.', 10, 1\r\n  END\r\n\r\n  SET @ErrorMessage = ''\r\n  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(AvailabilityGroupName) + ', '\r\n  FROM @SelectedAvailabilityGroups\r\n  WHERE AvailabilityGroupName NOT LIKE '%[%]%'\r\n  AND AvailabilityGroupName NOT IN (SELECT AvailabilityGroupName FROM @tmpAvailabilityGroups)\r\n  IF @@ROWCOUNT > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The following availability groups do not exist: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.', 10, 1\r\n  END\r\n\r\n  SET @ErrorMessage = ''\r\n  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '\r\n  FROM @SelectedIndexes\r\n  WHERE DatabaseName NOT LIKE '%[%]%'\r\n  AND DatabaseName IN (SELECT DatabaseName FROM @tmpDatabases)\r\n  AND DatabaseName NOT IN (SELECT DatabaseName FROM @tmpDatabases WHERE Selected = 1)\r\n  IF @@ROWCOUNT > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The following databases have been selected in the @Indexes parameter, but not in the @Databases or @AvailabilityGroups parameters: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.', 10, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Raise errors                                                                               //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  DECLARE ErrorCursor CURSOR FAST_FORWARD FOR SELECT [Message], Severity, [State] FROM @Errors ORDER BY [ID] ASC\r\n\r\n  OPEN ErrorCursor\r\n\r\n  FETCH ErrorCursor INTO @CurrentMessage, @CurrentSeverity, @CurrentState\r\n\r\n  WHILE @@FETCH_STATUS = 0\r\n  BEGIN\r\n    RAISERROR('%s', @CurrentSeverity, @CurrentState, @CurrentMessage) WITH NOWAIT\r\n    RAISERROR(@EmptyLine, 10, 1) WITH NOWAIT\r\n\r\n    FETCH NEXT FROM ErrorCursor INTO @CurrentMessage, @CurrentSeverity, @CurrentState\r\n  END\r\n\r\n  CLOSE ErrorCursor\r\n\r\n  DEALLOCATE ErrorCursor\r\n\r\n  IF EXISTS (SELECT * FROM @Errors WHERE Severity >= 16)\r\n  BEGIN\r\n    SET @ReturnCode = 50000\r\n    GOTO Logging\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Should statistics be updated on the partition level?                                       //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @PartitionLevelStatistics = CASE WHEN @PartitionLevel = 'Y' AND ((@Version >= 12.05 AND @Version < 13) OR @Version >= 13.04422 OR SERVERPROPERTY('EngineEdition') IN (5,8)) THEN 1 ELSE 0 END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Update database order                                                                      //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DatabaseOrder IN('DATABASE_SIZE_ASC','DATABASE_SIZE_DESC')\r\n  BEGIN\r\n    UPDATE tmpDatabases\r\n    SET DatabaseSize = (SELECT SUM(CAST(size AS bigint)) FROM sys.master_files WHERE [type] = 0 AND database_id = DB_ID(tmpDatabases.DatabaseName))\r\n    FROM @tmpDatabases tmpDatabases\r\n  END\r\n\r\n  IF @DatabaseOrder IS NULL\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY StartPosition ASC, DatabaseName ASC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n  ELSE\r\n  IF @DatabaseOrder = 'DATABASE_NAME_ASC'\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY DatabaseName ASC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n  ELSE\r\n  IF @DatabaseOrder = 'DATABASE_NAME_DESC'\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY DatabaseName DESC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n  ELSE\r\n  IF @DatabaseOrder = 'DATABASE_SIZE_ASC'\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY DatabaseSize ASC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n  ELSE\r\n  IF @DatabaseOrder = 'DATABASE_SIZE_DESC'\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY DatabaseSize DESC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Update the queue                                                                           //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DatabasesInParallel = 'Y'\r\n  BEGIN\r\n\r\n    BEGIN TRY\r\n\r\n      SELECT @QueueID = QueueID\r\n      FROM dbo.[Queue]\r\n      WHERE SchemaName = @SchemaName\r\n      AND ObjectName = @ObjectName\r\n      AND [Parameters] = @Parameters\r\n\r\n      IF @QueueID IS NULL\r\n      BEGIN\r\n        BEGIN TRANSACTION\r\n\r\n        SELECT @QueueID = QueueID\r\n        FROM dbo.[Queue] WITH (UPDLOCK, HOLDLOCK)\r\n        WHERE SchemaName = @SchemaName\r\n        AND ObjectName = @ObjectName\r\n        AND [Parameters] = @Parameters\r\n\r\n        IF @QueueID IS NULL\r\n        BEGIN\r\n          INSERT INTO dbo.[Queue] (SchemaName, ObjectName, [Parameters])\r\n          SELECT @SchemaName, @ObjectName, @Parameters\r\n\r\n          SET @QueueID = SCOPE_IDENTITY()\r\n        END\r\n\r\n        COMMIT TRANSACTION\r\n      END\r\n\r\n      BEGIN TRANSACTION\r\n\r\n      UPDATE [Queue]\r\n      SET QueueStartTime = SYSDATETIME(),\r\n          SessionID = @@SPID,\r\n          RequestID = (SELECT request_id FROM sys.dm_exec_requests WHERE session_id = @@SPID),\r\n          RequestStartTime = (SELECT start_time FROM sys.dm_exec_requests WHERE session_id = @@SPID)\r\n      FROM dbo.[Queue] [Queue]\r\n      WHERE QueueID = @QueueID\r\n      AND NOT EXISTS (SELECT *\r\n                      FROM sys.dm_exec_requests\r\n                      WHERE session_id = [Queue].SessionID\r\n                      AND request_id = [Queue].RequestID\r\n                      AND start_time = [Queue].RequestStartTime)\r\n      AND NOT EXISTS (SELECT *\r\n                      FROM dbo.QueueDatabase QueueDatabase\r\n                      INNER JOIN sys.dm_exec_requests ON QueueDatabase.SessionID = session_id AND QueueDatabase.RequestID = request_id AND QueueDatabase.RequestStartTime = start_time\r\n                      WHERE QueueDatabase.QueueID = @QueueID)\r\n\r\n      IF @@ROWCOUNT = 1\r\n      BEGIN\r\n        INSERT INTO dbo.QueueDatabase (QueueID, DatabaseName)\r\n        SELECT @QueueID AS QueueID,\r\n               DatabaseName\r\n        FROM @tmpDatabases tmpDatabases\r\n        WHERE Selected = 1\r\n        AND NOT EXISTS (SELECT * FROM dbo.QueueDatabase WHERE DatabaseName = tmpDatabases.DatabaseName AND QueueID = @QueueID)\r\n\r\n        DELETE QueueDatabase\r\n        FROM dbo.QueueDatabase QueueDatabase\r\n        WHERE QueueID = @QueueID\r\n        AND NOT EXISTS (SELECT * FROM @tmpDatabases tmpDatabases WHERE DatabaseName = QueueDatabase.DatabaseName AND Selected = 1)\r\n\r\n        UPDATE QueueDatabase\r\n        SET DatabaseOrder = tmpDatabases.[Order]\r\n        FROM dbo.QueueDatabase QueueDatabase\r\n        INNER JOIN @tmpDatabases tmpDatabases ON QueueDatabase.DatabaseName = tmpDatabases.DatabaseName\r\n        WHERE QueueID = @QueueID\r\n      END\r\n\r\n      COMMIT TRANSACTION\r\n\r\n      SELECT @QueueStartTime = QueueStartTime\r\n      FROM dbo.[Queue]\r\n      WHERE QueueID = @QueueID\r\n\r\n    END TRY\r\n\r\n    BEGIN CATCH\r\n      IF XACT_STATE() <> 0\r\n      BEGIN\r\n        ROLLBACK TRANSACTION\r\n      END\r\n      SET @ErrorMessage = 'Msg ' + CAST(ERROR_NUMBER() AS nvarchar) + ', ' + ISNULL(ERROR_MESSAGE(),'')\r\n      RAISERROR('%s',16,1,@ErrorMessage) WITH NOWAIT\r\n      RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n      SET @ReturnCode = ERROR_NUMBER()\r\n      GOTO Logging\r\n    END CATCH\r\n\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Execute commands                                                                           //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  WHILE (1 = 1)\r\n  BEGIN\r\n\r\n    IF @DatabasesInParallel = 'Y'\r\n    BEGIN\r\n      UPDATE QueueDatabase\r\n      SET DatabaseStartTime = NULL,\r\n          SessionID = NULL,\r\n          RequestID = NULL,\r\n          RequestStartTime = NULL\r\n      FROM dbo.QueueDatabase QueueDatabase\r\n      WHERE QueueID = @QueueID\r\n      AND DatabaseStartTime IS NOT NULL\r\n      AND DatabaseEndTime IS NULL\r\n      AND NOT EXISTS (SELECT * FROM sys.dm_exec_requests WHERE session_id = QueueDatabase.SessionID AND request_id = QueueDatabase.RequestID AND start_time = QueueDatabase.RequestStartTime)\r\n\r\n      UPDATE QueueDatabase\r\n      SET DatabaseStartTime = SYSDATETIME(),\r\n          DatabaseEndTime = NULL,\r\n          SessionID = @@SPID,\r\n          RequestID = (SELECT request_id FROM sys.dm_exec_requests WHERE session_id = @@SPID),\r\n          RequestStartTime = (SELECT start_time FROM sys.dm_exec_requests WHERE session_id = @@SPID),\r\n          @CurrentDatabaseName = DatabaseName\r\n      FROM (SELECT TOP 1 DatabaseStartTime,\r\n                         DatabaseEndTime,\r\n                         SessionID,\r\n                         RequestID,\r\n                         RequestStartTime,\r\n                         DatabaseName\r\n            FROM dbo.QueueDatabase\r\n            WHERE QueueID = @QueueID\r\n            AND (DatabaseStartTime < @QueueStartTime OR DatabaseStartTime IS NULL)\r\n            AND NOT (DatabaseStartTime IS NOT NULL AND DatabaseEndTime IS NULL)\r\n            ORDER BY DatabaseOrder ASC\r\n            ) QueueDatabase\r\n    END\r\n    ELSE\r\n    BEGIN\r\n      SELECT TOP 1 @CurrentDBID = ID,\r\n                   @CurrentDatabaseName = DatabaseName\r\n      FROM @tmpDatabases\r\n      WHERE Selected = 1\r\n      AND Completed = 0\r\n      ORDER BY [Order] ASC\r\n    END\r\n\r\n    IF @@ROWCOUNT = 0\r\n    BEGIN\r\n      BREAK\r\n    END\r\n\r\n    SET @CurrentDatabase_sp_executesql = QUOTENAME(@CurrentDatabaseName) + '.sys.sp_executesql'\r\n\r\n    IF @ExecuteAsUser IS NOT NULL\r\n    BEGIN\r\n      SET @CurrentCommand = ''\r\n      SET @CurrentCommand += 'IF EXISTS(SELECT * FROM sys.database_principals database_principals WHERE database_principals.[name] = @ParamExecuteAsUser) BEGIN SET @ParamExecuteAsUserExists = 1 END ELSE BEGIN SET @ParamExecuteAsUserExists = 0 END'\r\n\r\n      EXECUTE @CurrentDatabase_sp_executesql @stmt = @CurrentCommand, @params = N'@ParamExecuteAsUser sysname, @ParamExecuteAsUserExists bit OUTPUT', @ParamExecuteAsUser = @ExecuteAsUser, @ParamExecuteAsUserExists = @CurrentExecuteAsUserExists OUTPUT\r\n    END\r\n\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Date and time: ' + CONVERT(nvarchar,SYSDATETIME(),120)\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Database: ' + QUOTENAME(@CurrentDatabaseName)\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    SELECT @CurrentUserAccess = user_access_desc,\r\n           @CurrentIsReadOnly = is_read_only,\r\n           @CurrentDatabaseState = state_desc,\r\n           @CurrentInStandby = is_in_standby,\r\n           @CurrentRecoveryModel = recovery_model_desc\r\n    FROM sys.databases\r\n    WHERE [name] = @CurrentDatabaseName\r\n\r\n    BEGIN\r\n      SET @DatabaseMessage = 'State: ' + @CurrentDatabaseState\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Standby: ' + CASE WHEN @CurrentInStandby = 1 THEN 'Yes' ELSE 'No' END\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Updateability: ' + CASE WHEN @CurrentIsReadOnly = 1 THEN 'READ_ONLY' WHEN  @CurrentIsReadOnly = 0 THEN 'READ_WRITE' END\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'User access: ' + @CurrentUserAccess\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Recovery model: ' + @CurrentRecoveryModel\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    IF @CurrentDatabaseState = 'ONLINE' AND SERVERPROPERTY('EngineEdition') <> 5\r\n    BEGIN\r\n      IF EXISTS (SELECT * FROM sys.database_recovery_status WHERE database_id = DB_ID(@CurrentDatabaseName) AND database_guid IS NOT NULL)\r\n      BEGIN\r\n        SET @CurrentIsDatabaseAccessible = 1\r\n      END\r\n      ELSE\r\n      BEGIN\r\n        SET @CurrentIsDatabaseAccessible = 0\r\n      END\r\n    END\r\n\r\n    IF @Version >= 11 AND SERVERPROPERTY('IsHadrEnabled') = 1\r\n    BEGIN\r\n      SELECT @CurrentReplicaID = databases.replica_id\r\n      FROM sys.databases databases\r\n      INNER JOIN sys.availability_replicas availability_replicas ON databases.replica_id = availability_replicas.replica_id\r\n      WHERE databases.[name] = @CurrentDatabaseName\r\n\r\n      SELECT @CurrentAvailabilityGroupID = group_id\r\n      FROM sys.availability_replicas\r\n      WHERE replica_id = @CurrentReplicaID\r\n\r\n      SELECT @CurrentAvailabilityGroupRole = role_desc\r\n      FROM sys.dm_hadr_availability_replica_states\r\n      WHERE replica_id = @CurrentReplicaID\r\n\r\n      SELECT @CurrentAvailabilityGroup = [name]\r\n      FROM sys.availability_groups\r\n      WHERE group_id = @CurrentAvailabilityGroupID\r\n    END\r\n\r\n    IF SERVERPROPERTY('EngineEdition') <> 5\r\n    BEGIN\r\n      SELECT @CurrentDatabaseMirroringRole = UPPER(mirroring_role_desc)\r\n      FROM sys.database_mirroring\r\n      WHERE database_id = DB_ID(@CurrentDatabaseName)\r\n    END\r\n\r\n    IF @CurrentIsDatabaseAccessible IS NOT NULL\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Is accessible: ' + CASE WHEN @CurrentIsDatabaseAccessible = 1 THEN 'Yes' ELSE 'No' END\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    IF @CurrentAvailabilityGroup IS NOT NULL\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Availability group: ' + ISNULL(@CurrentAvailabilityGroup,'N/A')\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Availability group role: ' + ISNULL(@CurrentAvailabilityGroupRole,'N/A')\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    IF @CurrentDatabaseMirroringRole IS NOT NULL\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Database mirroring role: ' + @CurrentDatabaseMirroringRole\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n    IF @CurrentExecuteAsUserExists = 0\r\n    BEGIN\r\n      SET @DatabaseMessage = 'The user ' + QUOTENAME(@ExecuteAsUser) + ' does not exist in the database ' + QUOTENAME(@CurrentDatabaseName) + '.'\r\n      RAISERROR('%s',16,1,@DatabaseMessage) WITH NOWAIT\r\n      RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n    END\r\n\r\n    IF @CurrentDatabaseState = 'ONLINE'\r\n    AND NOT (@CurrentUserAccess = 'SINGLE_USER' AND @CurrentIsDatabaseAccessible = 0)\r\n    AND DATABASEPROPERTYEX(@CurrentDatabaseName,'Updateability') = 'READ_WRITE'\r\n    AND (@CurrentExecuteAsUserExists = 1 OR @CurrentExecuteAsUserExists IS NULL)\r\n    BEGIN\r\n\r\n      -- Select indexes in the current database\r\n      IF (EXISTS(SELECT * FROM @ActionsPreferred) OR @UpdateStatistics IS NOT NULL) AND (SYSDATETIME() < DATEADD(SECOND,@TimeLimit,@StartTime) OR @TimeLimit IS NULL)\r\n      BEGIN\r\n        SET @CurrentCommand = 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'\r\n                              + ' SELECT SchemaID, SchemaName, ObjectID, ObjectName, ObjectType, IsMemoryOptimized, IndexID, IndexName, IndexType, AllowPageLocks, IsImageText, IsNewLOB, IsFileStream, IsColumnStore, IsComputed, IsTimestamp, OnReadOnlyFileGroup, ResumableIndexOperation, StatisticsID, StatisticsName, NoRecompute, IsIncremental, PartitionID, PartitionNumber, PartitionCount, [Order], Selected, Completed'\r\n                              + ' FROM ('\r\n\r\n        IF EXISTS(SELECT * FROM @ActionsPreferred) OR @UpdateStatistics IN('ALL','INDEX')\r\n        BEGIN\r\n          SET @CurrentCommand = @CurrentCommand + 'SELECT schemas.[schema_id] AS SchemaID'\r\n                                                    + ', schemas.[name] AS SchemaName'\r\n                                                    + ', objects.[object_id] AS ObjectID'\r\n                                                    + ', objects.[name] AS ObjectName'\r\n                                                    + ', RTRIM(objects.[type]) AS ObjectType'\r\n                                                    + ', ' + CASE WHEN @Version >= 12 THEN 'tables.is_memory_optimized' ELSE '0' END + ' AS IsMemoryOptimized'\r\n                                                    + ', indexes.index_id AS IndexID'\r\n                                                    + ', indexes.[name] AS IndexName'\r\n                                                    + ', indexes.[type] AS IndexType'\r\n                                                    + ', indexes.allow_page_locks AS AllowPageLocks'\r\n\r\n                                                    + ', CASE WHEN indexes.[type] = 1 AND EXISTS(SELECT * FROM sys.columns columns INNER JOIN sys.types types ON columns.system_type_id = types.user_type_id WHERE columns.[object_id] = objects.object_id AND types.name IN(''image'',''text'',''ntext'')) THEN 1 ELSE 0 END AS IsImageText'\r\n\r\n                                                    + ', CASE WHEN indexes.[type] = 1 AND EXISTS(SELECT * FROM sys.columns columns INNER JOIN sys.types types ON columns.system_type_id = types.user_type_id OR (columns.user_type_id = types.user_type_id AND types.is_assembly_type = 1) WHERE columns.[object_id] = objects.object_id AND (types.name IN(''xml'') OR (types.name IN(''varchar'',''nvarchar'',''varbinary'') AND columns.max_length = -1) OR (types.is_assembly_type = 1 AND columns.max_length = -1))) THEN 1'\r\n                                                    + ' WHEN indexes.[type] = 2 AND EXISTS(SELECT * FROM sys.index_columns index_columns INNER JOIN sys.columns columns ON index_columns.[object_id] = columns.[object_id] AND index_columns.column_id = columns.column_id INNER JOIN sys.types types ON columns.system_type_id = types.user_type_id OR (columns.user_type_id = types.user_type_id AND types.is_assembly_type = 1) WHERE index_columns.[object_id] = objects.object_id AND index_columns.index_id = indexes.index_id AND (types.[name] IN(''xml'') OR (types.[name] IN(''varchar'',''nvarchar'',''varbinary'') AND columns.max_length = -1) OR (types.is_assembly_type = 1 AND columns.max_length = -1))) THEN 1 ELSE 0 END AS IsNewLOB'\r\n\r\n                                                    + ', CASE WHEN indexes.[type] = 1 AND EXISTS(SELECT * FROM sys.columns columns WHERE columns.[object_id] = objects.object_id  AND columns.is_filestream = 1) THEN 1 ELSE 0 END AS IsFileStream'\r\n\r\n                                                    + ', CASE WHEN EXISTS(SELECT * FROM sys.indexes indexes WHERE indexes.[object_id] = objects.object_id AND [type] IN(5,6)) THEN 1 ELSE 0 END AS IsColumnStore'\r\n\r\n                                                    + ', CASE WHEN EXISTS(SELECT * FROM sys.index_columns index_columns INNER JOIN sys.columns columns ON index_columns.object_id = columns.object_id AND index_columns.column_id = columns.column_id WHERE (index_columns.key_ordinal > 0 OR index_columns.partition_ordinal > 0) AND columns.is_computed = 1 AND index_columns.object_id = indexes.object_id AND index_columns.index_id = indexes.index_id) THEN 1 ELSE 0 END AS IsComputed'\r\n\r\n                                                    + ', CASE WHEN EXISTS(SELECT * FROM sys.index_columns index_columns INNER JOIN sys.columns columns ON index_columns.[object_id] = columns.[object_id] AND index_columns.column_id = columns.column_id INNER JOIN sys.types types ON columns.system_type_id = types.system_type_id WHERE index_columns.[object_id] = objects.object_id AND index_columns.index_id = indexes.index_id AND types.[name] = ''timestamp'') THEN 1 ELSE 0 END AS IsTimestamp'\r\n\r\n                                                    + ', CASE WHEN EXISTS (SELECT * FROM sys.indexes indexes2 INNER JOIN sys.destination_data_spaces destination_data_spaces ON indexes.data_space_id = destination_data_spaces.partition_scheme_id INNER JOIN sys.filegroups filegroups ON destination_data_spaces.data_space_id = filegroups.data_space_id WHERE filegroups.is_read_only = 1 AND indexes2.[object_id] = indexes.[object_id] AND indexes2.[index_id] = indexes.index_id' + CASE WHEN @PartitionLevel = 'Y' THEN ' AND destination_data_spaces.destination_id = partitions.partition_number' ELSE '' END + ') THEN 1'\r\n                                                    + ' WHEN EXISTS (SELECT * FROM sys.indexes indexes2 INNER JOIN sys.filegroups filegroups ON indexes.data_space_id = filegroups.data_space_id WHERE filegroups.is_read_only = 1 AND indexes.[object_id] = indexes2.[object_id] AND indexes.[index_id] = indexes2.index_id) THEN 1'\r\n                                                    + ' WHEN indexes.[type] = 1 AND EXISTS (SELECT * FROM sys.tables tables INNER JOIN sys.filegroups filegroups ON tables.lob_data_space_id = filegroups.data_space_id WHERE filegroups.is_read_only = 1 AND tables.[object_id] = objects.[object_id]) THEN 1 ELSE 0 END AS OnReadOnlyFileGroup'\r\n\r\n                                                    + ', ' + CASE WHEN @Version >= 14 THEN 'CASE WHEN EXISTS(SELECT * FROM sys.index_resumable_operations index_resumable_operations WHERE state_desc = ''PAUSED'' AND index_resumable_operations.object_id = indexes.object_id AND index_resumable_operations.index_id = indexes.index_id AND (index_resumable_operations.partition_number = partitions.partition_number OR index_resumable_operations.partition_number IS NULL)) THEN 1 ELSE 0 END' ELSE '0' END + ' AS ResumableIndexOperation'\r\n\r\n                                                    + ', stats.stats_id AS StatisticsID'\r\n                                                    + ', stats.name AS StatisticsName'\r\n                                                    + ', stats.no_recompute AS NoRecompute'\r\n                                                    + ', ' + CASE WHEN @Version >= 12 THEN 'stats.is_incremental' ELSE '0' END + ' AS IsIncremental'\r\n                                                    + ', ' + CASE WHEN @PartitionLevel = 'Y' THEN 'partitions.partition_id AS PartitionID' WHEN @PartitionLevel = 'N' THEN 'NULL AS PartitionID' END\r\n                                                    + ', ' + CASE WHEN @PartitionLevel = 'Y' THEN 'partitions.partition_number AS PartitionNumber' WHEN @PartitionLevel = 'N' THEN 'NULL AS PartitionNumber' END\r\n                                                    + ', ' + CASE WHEN @PartitionLevel = 'Y' THEN 'IndexPartitions.partition_count AS PartitionCount' WHEN @PartitionLevel = 'N' THEN 'NULL AS PartitionCount' END\r\n                                                    + ', 0 AS [Order]'\r\n                                                    + ', 0 AS Selected'\r\n                                                    + ', 0 AS Completed'\r\n                                                    + ' FROM sys.indexes indexes'\r\n                                                    + ' INNER JOIN sys.objects objects ON indexes.[object_id] = objects.[object_id]'\r\n                                                    + ' INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id]'\r\n                                                    + ' LEFT OUTER JOIN sys.tables tables ON objects.[object_id] = tables.[object_id]'\r\n                                                    + ' LEFT OUTER JOIN sys.stats stats ON indexes.[object_id] = stats.[object_id] AND indexes.[index_id] = stats.[stats_id]'\r\n          IF @PartitionLevel = 'Y'\r\n          BEGIN\r\n            SET @CurrentCommand = @CurrentCommand + ' LEFT OUTER JOIN sys.partitions partitions ON indexes.[object_id] = partitions.[object_id] AND indexes.index_id = partitions.index_id'\r\n                                                      + ' LEFT OUTER JOIN (SELECT partitions.[object_id], partitions.index_id, COUNT(DISTINCT partitions.partition_number) AS partition_count FROM sys.partitions partitions GROUP BY partitions.[object_id], partitions.index_id) IndexPartitions ON partitions.[object_id] = IndexPartitions.[object_id] AND partitions.[index_id] = IndexPartitions.[index_id]'\r\n          END\r\n\r\n          SET @CurrentCommand = @CurrentCommand + ' WHERE objects.[type] IN(''U'',''V'')'\r\n                                                    + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END\r\n                                                    + ' AND indexes.[type] IN(1,2,3,4,5,6,7)'\r\n                                                    + ' AND indexes.is_disabled = 0 AND indexes.is_hypothetical = 0'\r\n        END\r\n\r\n        IF (EXISTS(SELECT * FROM @ActionsPreferred) AND @UpdateStatistics = 'COLUMNS') OR @UpdateStatistics = 'ALL'\r\n        BEGIN\r\n          SET @CurrentCommand = @CurrentCommand + ' UNION '\r\n        END\r\n\r\n        IF @UpdateStatistics IN('ALL','COLUMNS')\r\n        BEGIN\r\n          SET @CurrentCommand = @CurrentCommand + 'SELECT schemas.[schema_id] AS SchemaID'\r\n                                                    + ', schemas.[name] AS SchemaName'\r\n                                                    + ', objects.[object_id] AS ObjectID'\r\n                                                    + ', objects.[name] AS ObjectName'\r\n                                                    + ', RTRIM(objects.[type]) AS ObjectType'\r\n                                                    + ', ' + CASE WHEN @Version >= 12 THEN 'tables.is_memory_optimized' ELSE '0' END + ' AS IsMemoryOptimized'\r\n                                                    + ', NULL AS IndexID, NULL AS IndexName'\r\n                                                    + ', NULL AS IndexType'\r\n                                                    + ', NULL AS AllowPageLocks'\r\n                                                    + ', NULL AS IsImageText'\r\n                                                    + ', NULL AS IsNewLOB'\r\n                                                    + ', NULL AS IsFileStream'\r\n                                                    + ', NULL AS IsColumnStore'\r\n                                                    + ', NULL AS IsComputed'\r\n                                                    + ', NULL AS IsTimestamp'\r\n                                                    + ', NULL AS OnReadOnlyFileGroup'\r\n                                                    + ', NULL AS ResumableIndexOperation'\r\n                                                    + ', stats.stats_id AS StatisticsID'\r\n                                                    + ', stats.name AS StatisticsName'\r\n                                                    + ', stats.no_recompute AS NoRecompute'\r\n                                                    + ', ' + CASE WHEN @Version >= 12 THEN 'stats.is_incremental' ELSE '0' END + ' AS IsIncremental'\r\n                                                    + ', NULL AS PartitionID'\r\n                                                    + ', ' + CASE WHEN @PartitionLevelStatistics = 1 THEN 'dm_db_incremental_stats_properties.partition_number' ELSE 'NULL' END + ' AS PartitionNumber'\r\n                                                    + ', NULL AS PartitionCount'\r\n                                                    + ', 0 AS [Order]'\r\n                                                    + ', 0 AS Selected'\r\n                                                    + ', 0 AS Completed'\r\n                                                    + ' FROM sys.stats stats'\r\n                                                    + ' INNER JOIN sys.objects objects ON stats.[object_id] = objects.[object_id]'\r\n                                                    + ' INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id]'\r\n                                                    + ' LEFT OUTER JOIN sys.tables tables ON objects.[object_id] = tables.[object_id]'\r\n\r\n          IF @PartitionLevelStatistics = 1\r\n          BEGIN\r\n            SET @CurrentCommand = @CurrentCommand + ' OUTER APPLY sys.dm_db_incremental_stats_properties(stats.object_id, stats.stats_id) dm_db_incremental_stats_properties'\r\n          END\r\n\r\n          SET @CurrentCommand = @CurrentCommand + ' WHERE objects.[type] IN(''U'',''V'')'\r\n                                                    + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END\r\n                                                    + ' AND NOT EXISTS(SELECT * FROM sys.indexes indexes WHERE indexes.[object_id] = stats.[object_id] AND indexes.index_id = stats.stats_id)'\r\n        END\r\n\r\n        SET @CurrentCommand = @CurrentCommand + ') IndexesStatistics'\r\n\r\n        INSERT INTO @tmpIndexesStatistics (SchemaID, SchemaName, ObjectID, ObjectName, ObjectType, IsMemoryOptimized, IndexID, IndexName, IndexType, AllowPageLocks, IsImageText, IsNewLOB, IsFileStream, IsColumnStore, IsComputed, IsTimestamp, OnReadOnlyFileGroup, ResumableIndexOperation, StatisticsID, StatisticsName, [NoRecompute], IsIncremental, PartitionID, PartitionNumber, PartitionCount, [Order], Selected, Completed)\r\n        EXECUTE @CurrentDatabase_sp_executesql @stmt = @CurrentCommand\r\n        SET @Error = @@ERROR\r\n        IF @Error <> 0\r\n        BEGIN\r\n          SET @ReturnCode = @Error\r\n        END\r\n      END\r\n\r\n      IF @Indexes IS NULL\r\n      BEGIN\r\n        UPDATE tmpIndexesStatistics\r\n        SET tmpIndexesStatistics.Selected = 1\r\n        FROM @tmpIndexesStatistics tmpIndexesStatistics\r\n      END\r\n      ELSE\r\n      BEGIN\r\n        UPDATE tmpIndexesStatistics\r\n        SET tmpIndexesStatistics.Selected = SelectedIndexes.Selected\r\n        FROM @tmpIndexesStatistics tmpIndexesStatistics\r\n        INNER JOIN @SelectedIndexes SelectedIndexes\r\n        ON @CurrentDatabaseName LIKE REPLACE(SelectedIndexes.DatabaseName,'_','[_]') AND tmpIndexesStatistics.SchemaName LIKE REPLACE(SelectedIndexes.SchemaName,'_','[_]') AND tmpIndexesStatistics.ObjectName LIKE REPLACE(SelectedIndexes.ObjectName,'_','[_]') AND COALESCE(tmpIndexesStatistics.IndexName,tmpIndexesStatistics.StatisticsName) LIKE REPLACE(SelectedIndexes.IndexName,'_','[_]')\r\n        WHERE SelectedIndexes.Selected = 1\r\n\r\n        UPDATE tmpIndexesStatistics\r\n        SET tmpIndexesStatistics.Selected = SelectedIndexes.Selected\r\n        FROM @tmpIndexesStatistics tmpIndexesStatistics\r\n        INNER JOIN @SelectedIndexes SelectedIndexes\r\n        ON @CurrentDatabaseName LIKE REPLACE(SelectedIndexes.DatabaseName,'_','[_]') AND tmpIndexesStatistics.SchemaName LIKE REPLACE(SelectedIndexes.SchemaName,'_','[_]') AND tmpIndexesStatistics.ObjectName LIKE REPLACE(SelectedIndexes.ObjectName,'_','[_]') AND COALESCE(tmpIndexesStatistics.IndexName,tmpIndexesStatistics.StatisticsName) LIKE REPLACE(SelectedIndexes.IndexName,'_','[_]')\r\n        WHERE SelectedIndexes.Selected = 0\r\n\r\n        UPDATE tmpIndexesStatistics\r\n        SET tmpIndexesStatistics.StartPosition = SelectedIndexes2.StartPosition\r\n        FROM @tmpIndexesStatistics tmpIndexesStatistics\r\n        INNER JOIN (SELECT tmpIndexesStatistics.SchemaName, tmpIndexesStatistics.ObjectName, tmpIndexesStatistics.IndexName, tmpIndexesStatistics.StatisticsName, MIN(SelectedIndexes.StartPosition) AS StartPosition\r\n                    FROM @tmpIndexesStatistics tmpIndexesStatistics\r\n                    INNER JOIN @SelectedIndexes SelectedIndexes\r\n                    ON @CurrentDatabaseName LIKE REPLACE(SelectedIndexes.DatabaseName,'_','[_]') AND tmpIndexesStatistics.SchemaName LIKE REPLACE(SelectedIndexes.SchemaName,'_','[_]') AND tmpIndexesStatistics.ObjectName LIKE REPLACE(SelectedIndexes.ObjectName,'_','[_]') AND COALESCE(tmpIndexesStatistics.IndexName,tmpIndexesStatistics.StatisticsName) LIKE REPLACE(SelectedIndexes.IndexName,'_','[_]')\r\n                    WHERE SelectedIndexes.Selected = 1\r\n                    GROUP BY tmpIndexesStatistics.SchemaName, tmpIndexesStatistics.ObjectName, tmpIndexesStatistics.IndexName, tmpIndexesStatistics.StatisticsName) SelectedIndexes2\r\n        ON tmpIndexesStatistics.SchemaName = SelectedIndexes2.SchemaName\r\n        AND tmpIndexesStatistics.ObjectName = SelectedIndexes2.ObjectName\r\n        AND (tmpIndexesStatistics.IndexName = SelectedIndexes2.IndexName OR tmpIndexesStatistics.IndexName IS NULL)\r\n        AND (tmpIndexesStatistics.StatisticsName = SelectedIndexes2.StatisticsName OR tmpIndexesStatistics.StatisticsName IS NULL)\r\n      END;\r\n\r\n      WITH tmpIndexesStatistics AS (\r\n      SELECT SchemaName, ObjectName, [Order], ROW_NUMBER() OVER (ORDER BY ISNULL(ResumableIndexOperation,0) DESC, StartPosition ASC, SchemaName ASC, ObjectName ASC, CASE WHEN IndexType IS NULL THEN 1 ELSE 0 END ASC, IndexType ASC, IndexName ASC, StatisticsName ASC, PartitionNumber ASC) AS RowNumber\r\n      FROM @tmpIndexesStatistics tmpIndexesStatistics\r\n      WHERE Selected = 1\r\n      )\r\n      UPDATE tmpIndexesStatistics\r\n      SET [Order] = RowNumber\r\n\r\n      SET @ErrorMessage = ''\r\n      SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + '.' + QUOTENAME(SchemaName) + '.' + QUOTENAME(ObjectName) + ', '\r\n      FROM @SelectedIndexes SelectedIndexes\r\n      WHERE DatabaseName = @CurrentDatabaseName\r\n      AND SchemaName NOT LIKE '%[%]%'\r\n      AND ObjectName NOT LIKE '%[%]%'\r\n      AND IndexName LIKE '%[%]%'\r\n      AND NOT EXISTS (SELECT * FROM @tmpIndexesStatistics WHERE SchemaName = SelectedIndexes.SchemaName AND ObjectName = SelectedIndexes.ObjectName)\r\n      IF @@ROWCOUNT > 0\r\n      BEGIN\r\n        SET @ErrorMessage = 'The following objects in the @Indexes parameter do not exist: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.'\r\n        RAISERROR('%s',10,1,@ErrorMessage) WITH NOWAIT\r\n        SET @Error = @@ERROR\r\n        RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n      END\r\n\r\n      SET @ErrorMessage = ''\r\n      SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + QUOTENAME(SchemaName) + '.' + QUOTENAME(ObjectName) + '.' + QUOTENAME(IndexName) + ', '\r\n      FROM @SelectedIndexes SelectedIndexes\r\n      WHERE DatabaseName = @CurrentDatabaseName\r\n      AND SchemaName NOT LIKE '%[%]%'\r\n      AND ObjectName NOT LIKE '%[%]%'\r\n      AND IndexName NOT LIKE '%[%]%'\r\n      AND NOT EXISTS (SELECT * FROM @tmpIndexesStatistics WHERE SchemaName = SelectedIndexes.SchemaName AND ObjectName = SelectedIndexes.ObjectName AND IndexName = SelectedIndexes.IndexName)\r\n      IF @@ROWCOUNT > 0\r\n      BEGIN\r\n        SET @ErrorMessage = 'The following indexes in the @Indexes parameter do not exist: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.'\r\n        RAISERROR('%s',10,1,@ErrorMessage) WITH NOWAIT\r\n        SET @Error = @@ERROR\r\n        RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n      END\r\n\r\n      WHILE (SYSDATETIME() < DATEADD(SECOND,@TimeLimit,@StartTime) OR @TimeLimit IS NULL)\r\n      BEGIN\r\n        SELECT TOP 1 @CurrentIxID = ID,\r\n                     @CurrentIxOrder = [Order],\r\n                     @CurrentSchemaID = SchemaID,\r\n                     @CurrentSchemaName = SchemaName,\r\n                     @CurrentObjectID = ObjectID,\r\n                     @CurrentObjectName = ObjectName,\r\n                     @CurrentObjectType = ObjectType,\r\n                     @CurrentIsMemoryOptimized = IsMemoryOptimized,\r\n                     @CurrentIndexID = IndexID,\r\n                     @CurrentIndexName = IndexName,\r\n                     @CurrentIndexType = IndexType,\r\n                     @CurrentAllowPageLocks = AllowPageLocks,\r\n                     @CurrentIsImageText = IsImageText,\r\n                     @CurrentIsNewLOB = IsNewLOB,\r\n                     @CurrentIsFileStream = IsFileStream,\r\n                     @CurrentIsColumnStore = IsColumnStore,\r\n                     @CurrentIsComputed = IsComputed,\r\n                     @CurrentIsTimestamp = IsTimestamp,\r\n                     @CurrentOnReadOnlyFileGroup = OnReadOnlyFileGroup,\r\n                     @CurrentResumableIndexOperation = ResumableIndexOperation,\r\n                     @CurrentStatisticsID = StatisticsID,\r\n                     @CurrentStatisticsName = StatisticsName,\r\n                     @CurrentNoRecompute = [NoRecompute],\r\n                     @CurrentIsIncremental = IsIncremental,\r\n                     @CurrentPartitionID = PartitionID,\r\n                     @CurrentPartitionNumber = PartitionNumber,\r\n                     @CurrentPartitionCount = PartitionCount\r\n        FROM @tmpIndexesStatistics\r\n        WHERE Selected = 1\r\n        AND Completed = 0\r\n        ORDER BY [Order] ASC\r\n\r\n        IF @@ROWCOUNT = 0\r\n        BEGIN\r\n          BREAK\r\n        END\r\n\r\n        -- Is the index a partition?\r\n        IF @CurrentPartitionNumber IS NULL OR @CurrentPartitionCount = 1 BEGIN SET @CurrentIsPartition = 0 END ELSE BEGIN SET @CurrentIsPartition = 1 END\r\n\r\n        -- Does the index exist?\r\n        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred)\r\n        BEGIN\r\n          SET @CurrentCommand = ''\r\n\r\n          IF @LockTimeout IS NOT NULL SET @CurrentCommand = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '\r\n\r\n          IF @CurrentIsPartition = 0 SET @CurrentCommand += 'IF EXISTS(SELECT * FROM sys.indexes indexes INNER JOIN sys.objects objects ON indexes.[object_id] = objects.[object_id] INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] IN(''U'',''V'') AND indexes.[type] IN(1,2,3,4,5,6,7) AND indexes.is_disabled = 0 AND indexes.is_hypothetical = 0 AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType AND indexes.index_id = @ParamIndexID AND indexes.[name] = @ParamIndexName AND indexes.[type] = @ParamIndexType) BEGIN SET @ParamIndexExists = 1 END'\r\n          IF @CurrentIsPartition = 1 SET @CurrentCommand += 'IF EXISTS(SELECT * FROM sys.indexes indexes INNER JOIN sys.objects objects ON indexes.[object_id] = objects.[object_id] INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] INNER JOIN sys.partitions partitions ON indexes.[object_id] = partitions.[object_id] AND indexes.index_id = partitions.index_id WHERE objects.[type] IN(''U'',''V'') AND indexes.[type] IN(1,2,3,4,5,6,7) AND indexes.is_disabled = 0 AND indexes.is_hypothetical = 0 AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType AND indexes.index_id = @ParamIndexID AND indexes.[name] = @ParamIndexName AND indexes.[type] = @ParamIndexType AND partitions.partition_id = @ParamPartitionID AND partitions.partition_number = @ParamPartitionNumber) BEGIN SET @ParamIndexExists = 1 END'\r\n\r\n          BEGIN TRY\r\n            EXECUTE @CurrentDatabase_sp_executesql @stmt = @CurrentCommand, @params = N'@ParamSchemaID int, @ParamSchemaName sysname, @ParamObjectID int, @ParamObjectName sysname, @ParamObjectType sysname, @ParamIndexID int, @ParamIndexName sysname, @ParamIndexType int, @ParamPartitionID bigint, @ParamPartitionNumber int, @ParamIndexExists bit OUTPUT', @ParamSchemaID = @CurrentSchemaID, @ParamSchemaName = @CurrentSchemaName, @ParamObjectID = @CurrentObjectID, @ParamObjectName = @CurrentObjectName, @ParamObjectType = @CurrentObjectType, @ParamIndexID = @CurrentIndexID, @ParamIndexName = @CurrentIndexName, @ParamIndexType = @CurrentIndexType, @ParamPartitionID = @CurrentPartitionID, @ParamPartitionNumber = @CurrentPartitionNumber, @ParamIndexExists = @CurrentIndexExists OUTPUT\r\n\r\n            IF @CurrentIndexExists IS NULL\r\n            BEGIN\r\n              SET @CurrentIndexExists = 0\r\n              GOTO NoAction\r\n            END\r\n          END TRY\r\n          BEGIN CATCH\r\n            SET @ErrorMessage = 'Msg ' + CAST(ERROR_NUMBER() AS nvarchar) + ', ' + ISNULL(ERROR_MESSAGE(),'') + CASE WHEN ERROR_NUMBER() = 1222 THEN ' The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the index exists.' ELSE '' END\r\n            SET @Severity = CASE WHEN ERROR_NUMBER() IN(1205,1222) THEN @LockMessageSeverity ELSE 16 END\r\n            RAISERROR('%s',@Severity,1,@ErrorMessage) WITH NOWAIT\r\n            RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n            IF NOT (ERROR_NUMBER() IN(1205,1222) AND @LockMessageSeverity = 10)\r\n            BEGIN\r\n              SET @ReturnCode = ERROR_NUMBER()\r\n            END\r\n\r\n            GOTO NoAction\r\n          END CATCH\r\n        END\r\n\r\n        -- Does the statistics exist?\r\n        IF @CurrentStatisticsID IS NOT NULL AND @UpdateStatistics IS NOT NULL\r\n        BEGIN\r\n          SET @CurrentCommand = ''\r\n\r\n          IF @LockTimeout IS NOT NULL SET @CurrentCommand = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '\r\n\r\n          SET @CurrentCommand += 'IF EXISTS(SELECT * FROM sys.stats stats INNER JOIN sys.objects objects ON stats.[object_id] = objects.[object_id] INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] IN(''U'',''V'')' + CASE WHEN @MSShippedObjects = 'N' THEN ' AND objects.is_ms_shipped = 0' ELSE '' END + ' AND schemas.[schema_id] = @ParamSchemaID AND schemas.[name] = @ParamSchemaName AND objects.[object_id] = @ParamObjectID AND objects.[name] = @ParamObjectName AND objects.[type] = @ParamObjectType AND stats.stats_id = @ParamStatisticsID AND stats.[name] = @ParamStatisticsName) BEGIN SET @ParamStatisticsExists = 1 END'\r\n\r\n          BEGIN TRY\r\n            EXECUTE @CurrentDatabase_sp_executesql @stmt = @CurrentCommand, @params = N'@ParamSchemaID int, @ParamSchemaName sysname, @ParamObjectID int, @ParamObjectName sysname, @ParamObjectType sysname, @ParamStatisticsID int, @ParamStatisticsName sysname, @ParamStatisticsExists bit OUTPUT', @ParamSchemaID = @CurrentSchemaID, @ParamSchemaName = @CurrentSchemaName, @ParamObjectID = @CurrentObjectID, @ParamObjectName = @CurrentObjectName, @ParamObjectType = @CurrentObjectType, @ParamStatisticsID = @CurrentStatisticsID, @ParamStatisticsName = @CurrentStatisticsName, @ParamStatisticsExists = @CurrentStatisticsExists OUTPUT\r\n\r\n            IF @CurrentStatisticsExists IS NULL\r\n            BEGIN\r\n              SET @CurrentStatisticsExists = 0\r\n              GOTO NoAction\r\n            END\r\n          END TRY\r\n          BEGIN CATCH\r\n            SET @ErrorMessage = 'Msg ' + CAST(ERROR_NUMBER() AS nvarchar) + ', ' + ISNULL(ERROR_MESSAGE(),'') + CASE WHEN ERROR_NUMBER() = 1222 THEN ' The statistics ' + QUOTENAME(@CurrentStatisticsName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. It could not be checked if the statistics exists.' ELSE '' END\r\n            SET @Severity = CASE WHEN ERROR_NUMBER() IN(1205,1222) THEN @LockMessageSeverity ELSE 16 END\r\n            RAISERROR('%s',@Severity,1,@ErrorMessage) WITH NOWAIT\r\n            RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n            IF NOT (ERROR_NUMBER() IN(1205,1222) AND @LockMessageSeverity = 10)\r\n            BEGIN\r\n              SET @ReturnCode = ERROR_NUMBER()\r\n            END\r\n\r\n            GOTO NoAction\r\n          END CATCH\r\n        END\r\n\r\n        -- Has the data in the statistics been modified since the statistics was last updated?\r\n        IF @CurrentStatisticsID IS NOT NULL AND @UpdateStatistics IS NOT NULL\r\n        BEGIN\r\n          SET @CurrentCommand = ''\r\n\r\n          IF @LockTimeout IS NOT NULL SET @CurrentCommand = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '\r\n\r\n          IF @PartitionLevelStatistics = 1 AND @CurrentIsIncremental = 1\r\n          BEGIN\r\n            SET @CurrentCommand += 'SELECT @ParamRowCount = [rows], @ParamModificationCounter = modification_counter FROM sys.dm_db_incremental_stats_properties (@ParamObjectID, @ParamStatisticsID) WHERE partition_number = @ParamPartitionNumber'\r\n          END\r\n          ELSE\r\n          IF (@Version >= 10.504000 AND @Version < 11) OR @Version >= 11.03000\r\n          BEGIN\r\n            SET @CurrentCommand += 'SELECT @ParamRowCount = [rows], @ParamModificationCounter = modification_counter FROM sys.dm_db_stats_properties (@ParamObjectID, @ParamStatisticsID)'\r\n          END\r\n          ELSE\r\n          BEGIN\r\n            SET @CurrentCommand += 'SELECT @ParamRowCount = rowcnt, @ParamModificationCounter = rowmodctr FROM sys.sysindexes sysindexes WHERE sysindexes.[id] = @ParamObjectID AND sysindexes.[indid] = @ParamStatisticsID'\r\n          END\r\n\r\n          BEGIN TRY\r\n            EXECUTE @CurrentDatabase_sp_executesql @stmt = @CurrentCommand, @params = N'@ParamObjectID int, @ParamStatisticsID int, @ParamPartitionNumber int, @ParamRowCount bigint OUTPUT, @ParamModificationCounter bigint OUTPUT', @ParamObjectID = @CurrentObjectID, @ParamStatisticsID = @CurrentStatisticsID, @ParamPartitionNumber = @CurrentPartitionNumber, @ParamRowCount = @CurrentRowCount OUTPUT, @ParamModificationCounter = @CurrentModificationCounter OUTPUT\r\n\r\n            IF @CurrentRowCount IS NULL SET @CurrentRowCount = 0\r\n            IF @CurrentModificationCounter IS NULL SET @CurrentModificationCounter = 0\r\n          END TRY\r\n          BEGIN CATCH\r\n            SET @ErrorMessage = 'Msg ' + CAST(ERROR_NUMBER() AS nvarchar) + ', ' + ISNULL(ERROR_MESSAGE(),'') + CASE WHEN ERROR_NUMBER() = 1222 THEN ' The statistics ' + QUOTENAME(@CurrentStatisticsName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. The rows and modification_counter could not be checked.' ELSE '' END\r\n            SET @Severity = CASE WHEN ERROR_NUMBER() IN(1205,1222) THEN @LockMessageSeverity ELSE 16 END\r\n            RAISERROR('%s',@Severity,1,@ErrorMessage) WITH NOWAIT\r\n            RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n            IF NOT (ERROR_NUMBER() IN(1205,1222) AND @LockMessageSeverity = 10)\r\n            BEGIN\r\n              SET @ReturnCode = ERROR_NUMBER()\r\n            END\r\n\r\n            GOTO NoAction\r\n          END CATCH\r\n        END\r\n\r\n        -- Is the index fragmented?\r\n        IF @CurrentIndexID IS NOT NULL\r\n        AND @CurrentOnReadOnlyFileGroup = 0\r\n        AND EXISTS(SELECT * FROM @ActionsPreferred)\r\n        AND (EXISTS(SELECT [Priority], [Action], COUNT(*) FROM @ActionsPreferred GROUP BY [Priority], [Action] HAVING COUNT(*) <> 3) OR @MinNumberOfPages > 0 OR @MaxNumberOfPages IS NOT NULL)\r\n        BEGIN\r\n          SET @CurrentCommand = ''\r\n\r\n          IF @LockTimeout IS NOT NULL SET @CurrentCommand = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '\r\n\r\n          SET @CurrentCommand += 'SELECT @ParamFragmentationLevel = MAX(avg_fragmentation_in_percent), @ParamPageCount = SUM(page_count) FROM sys.dm_db_index_physical_stats(DB_ID(@ParamDatabaseName), @ParamObjectID, @ParamIndexID, @ParamPartitionNumber, ''LIMITED'') WHERE alloc_unit_type_desc = ''IN_ROW_DATA'' AND index_level = 0'\r\n\r\n          BEGIN TRY\r\n            EXECUTE sp_executesql @stmt = @CurrentCommand, @params = N'@ParamDatabaseName nvarchar(max), @ParamObjectID int, @ParamIndexID int, @ParamPartitionNumber int, @ParamFragmentationLevel float OUTPUT, @ParamPageCount bigint OUTPUT', @ParamDatabaseName = @CurrentDatabaseName, @ParamObjectID = @CurrentObjectID, @ParamIndexID = @CurrentIndexID, @ParamPartitionNumber = @CurrentPartitionNumber, @ParamFragmentationLevel = @CurrentFragmentationLevel OUTPUT, @ParamPageCount = @CurrentPageCount OUTPUT\r\n          END TRY\r\n          BEGIN CATCH\r\n            SET @ErrorMessage = 'Msg ' + CAST(ERROR_NUMBER() AS nvarchar) + ', ' + ISNULL(ERROR_MESSAGE(),'') + CASE WHEN ERROR_NUMBER() = 1222 THEN ' The index ' + QUOTENAME(@CurrentIndexName) + ' on the object ' + QUOTENAME(@CurrentDatabaseName) + '.' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' is locked. The page_count and avg_fragmentation_in_percent could not be checked.' ELSE '' END\r\n            SET @Severity = CASE WHEN ERROR_NUMBER() IN(1205,1222) THEN @LockMessageSeverity ELSE 16 END\r\n            RAISERROR('%s',@Severity,1,@ErrorMessage) WITH NOWAIT\r\n            RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n            IF NOT (ERROR_NUMBER() IN(1205,1222) AND @LockMessageSeverity = 10)\r\n            BEGIN\r\n              SET @ReturnCode = ERROR_NUMBER()\r\n            END\r\n\r\n            GOTO NoAction\r\n          END CATCH\r\n        END\r\n\r\n        -- Select fragmentation group\r\n        IF @CurrentIndexID IS NOT NULL AND @CurrentOnReadOnlyFileGroup = 0 AND EXISTS(SELECT * FROM @ActionsPreferred)\r\n        BEGIN\r\n          SET @CurrentFragmentationGroup = CASE\r\n          WHEN @CurrentFragmentationLevel >= @FragmentationLevel2 THEN 'High'\r\n          WHEN @CurrentFragmentationLevel >= @FragmentationLevel1 AND @CurrentFragmentationLevel < @FragmentationLevel2 THEN 'Medium'\r\n          WHEN @CurrentFragmentationLevel < @FragmentationLevel1 THEN 'Low'\r\n          END\r\n        END\r\n\r\n        -- Which actions are allowed?\r\n        IF @CurrentIndexID IS NOT NULL AND EXISTS(SELECT * FROM @ActionsPreferred)\r\n        BEGIN\r\n          IF @CurrentOnReadOnlyFileGroup = 0 AND @CurrentIndexType IN (1,2,3,4,5) AND (@CurrentIsMemoryOptimized = 0 OR @CurrentIsMemoryOptimized IS NULL) AND (@CurrentAllowPageLocks = 1 OR @CurrentIndexType = 5)\r\n          BEGIN\r\n            INSERT INTO @CurrentActionsAllowed ([Action])\r\n            VALUES ('INDEX_REORGANIZE')\r\n          END\r\n          IF @CurrentOnReadOnlyFileGroup = 0 AND @CurrentIndexType IN (1,2,3,4,5) AND (@CurrentIsMemoryOptimized = 0 OR @CurrentIsMemoryOptimized IS NULL)\r\n          BEGIN\r\n            INSERT INTO @CurrentActionsAllowed ([Action])\r\n            VALUES ('INDEX_REBUILD_OFFLINE')\r\n          END\r\n          IF @CurrentOnReadOnlyFileGroup = 0\r\n          AND (@CurrentIsMemoryOptimized = 0 OR @CurrentIsMemoryOptimized IS NULL)\r\n          AND (@CurrentIsPartition = 0 OR @Version >= 12)\r\n          AND ((@CurrentIndexType = 1 AND @CurrentIsImageText = 0 AND @CurrentIsNewLOB = 0)\r\n          OR (@CurrentIndexType = 2 AND @CurrentIsNewLOB = 0)\r\n          OR (@CurrentIndexType = 1 AND @CurrentIsImageText = 0 AND @CurrentIsFileStream = 0 AND @Version >= 11)\r\n          OR (@CurrentIndexType = 2 AND @Version >= 11))\r\n          AND (@CurrentIsColumnStore = 0 OR @Version < 11)\r\n          AND SERVERPROPERTY('EngineEdition') IN (3,5,8)\r\n          BEGIN\r\n            INSERT INTO @CurrentActionsAllowed ([Action])\r\n            VALUES ('INDEX_REBUILD_ONLINE')\r\n          END\r\n        END\r\n\r\n        -- Decide action\r\n        IF @CurrentIndexID IS NOT NULL\r\n        AND EXISTS(SELECT * FROM @ActionsPreferred)\r\n        AND (@CurrentPageCount >= @MinNumberOfPages OR @MinNumberOfPages = 0)\r\n        AND (@CurrentPageCount <= @MaxNumberOfPages OR @MaxNumberOfPages IS NULL)\r\n        AND @CurrentResumableIndexOperation = 0\r\n        BEGIN\r\n          IF EXISTS(SELECT [Priority], [Action], COUNT(*) FROM @ActionsPreferred GROUP BY [Priority], [Action] HAVING COUNT(*) <> 3)\r\n          BEGIN\r\n            SELECT @CurrentAction = [Action]\r\n            FROM @ActionsPreferred\r\n            WHERE FragmentationGroup = @CurrentFragmentationGroup\r\n            AND [Priority] = (SELECT MIN([Priority])\r\n                              FROM @ActionsPreferred\r\n                              WHERE FragmentationGroup = @CurrentFragmentationGroup\r\n                              AND [Action] IN (SELECT [Action] FROM @CurrentActionsAllowed))\r\n          END\r\n          ELSE\r\n          BEGIN\r\n            SELECT @CurrentAction = [Action]\r\n            FROM @ActionsPreferred\r\n            WHERE [Priority] = (SELECT MIN([Priority])\r\n                                FROM @ActionsPreferred\r\n                                WHERE [Action] IN (SELECT [Action] FROM @CurrentActionsAllowed))\r\n          END\r\n        END\r\n\r\n        IF @CurrentResumableIndexOperation = 1\r\n        BEGIN\r\n          SET @CurrentAction = 'INDEX_REBUILD_ONLINE'\r\n        END\r\n\r\n        -- Workaround for limitation in SQL Server, http://support.microsoft.com/kb/2292737\r\n        IF @CurrentIndexID IS NOT NULL\r\n        BEGIN\r\n          SET @CurrentMaxDOP = @MaxDOP\r\n\r\n          IF @CurrentAction = 'INDEX_REBUILD_ONLINE' AND @CurrentAllowPageLocks = 0\r\n          BEGIN\r\n            SET @CurrentMaxDOP = 1\r\n          END\r\n        END\r\n\r\n        -- Update statistics?\r\n        IF @CurrentStatisticsID IS NOT NULL\r\n        AND ((@UpdateStatistics = 'ALL' AND (@CurrentIndexType IN (1,2,3,4,7) OR @CurrentIndexID IS NULL)) OR (@UpdateStatistics = 'INDEX' AND @CurrentIndexID IS NOT NULL AND @CurrentIndexType IN (1,2,3,4,7)) OR (@UpdateStatistics = 'COLUMNS' AND @CurrentIndexID IS NULL))\r\n        AND ((@OnlyModifiedStatistics = 'N' AND @StatisticsModificationLevel IS NULL) OR (@OnlyModifiedStatistics = 'Y' AND @CurrentModificationCounter > 0) OR ((@CurrentModificationCounter * 1. / NULLIF(@CurrentRowCount,0)) * 100 >= @StatisticsModificationLevel) OR (@StatisticsModificationLevel IS NOT NULL AND @CurrentModificationCounter > 0 AND (@CurrentModificationCounter >= SQRT(@CurrentRowCount * 1000))) OR (@CurrentIsMemoryOptimized = 1 AND NOT (@Version >= 13 OR SERVERPROPERTY('EngineEdition') IN (5,8))))\r\n        AND ((@CurrentIsPartition = 0 AND (@CurrentAction NOT IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE') OR @CurrentAction IS NULL)) OR (@CurrentIsPartition = 1 AND (@CurrentPartitionNumber = @CurrentPartitionCount OR (@PartitionLevelStatistics = 1 AND @CurrentIsIncremental = 1))))\r\n        BEGIN\r\n          SET @CurrentUpdateStatistics = 'Y'\r\n        END\r\n        ELSE\r\n        BEGIN\r\n          SET @CurrentUpdateStatistics = 'N'\r\n        END\r\n\r\n        SET @CurrentStatisticsSample = @StatisticsSample\r\n        SET @CurrentStatisticsResample = @StatisticsResample\r\n\r\n        -- Memory-optimized tables only supports FULLSCAN and RESAMPLE in SQL Server 2014\r\n        IF @CurrentIsMemoryOptimized = 1 AND NOT (@Version >= 13 OR SERVERPROPERTY('EngineEdition') IN (5,8)) AND (@CurrentStatisticsSample <> 100 OR @CurrentStatisticsSample IS NULL)\r\n        BEGIN\r\n          SET @CurrentStatisticsSample = NULL\r\n          SET @CurrentStatisticsResample = 'Y'\r\n        END\r\n\r\n        -- Incremental statistics only supports RESAMPLE\r\n        IF @PartitionLevelStatistics = 1 AND @CurrentIsIncremental = 1\r\n        BEGIN\r\n          SET @CurrentStatisticsSample = NULL\r\n          SET @CurrentStatisticsResample = 'Y'\r\n        END\r\n\r\n        -- Create index comment\r\n        IF @CurrentIndexID IS NOT NULL\r\n        BEGIN\r\n          SET @CurrentComment = 'ObjectType: ' + CASE WHEN @CurrentObjectType = 'U' THEN 'Table' WHEN @CurrentObjectType = 'V' THEN 'View' ELSE 'N/A' END + ', '\r\n          SET @CurrentComment += 'IndexType: ' + CASE WHEN @CurrentIndexType = 1 THEN 'Clustered' WHEN @CurrentIndexType = 2 THEN 'NonClustered' WHEN @CurrentIndexType = 3 THEN 'XML' WHEN @CurrentIndexType = 4 THEN 'Spatial' WHEN @CurrentIndexType = 5 THEN 'Clustered Columnstore' WHEN @CurrentIndexType = 6 THEN 'NonClustered Columnstore' WHEN @CurrentIndexType = 7 THEN 'NonClustered Hash' ELSE 'N/A' END + ', '\r\n          SET @CurrentComment += 'ImageText: ' + CASE WHEN @CurrentIsImageText = 1 THEN 'Yes' WHEN @CurrentIsImageText = 0 THEN 'No' ELSE 'N/A' END + ', '\r\n          SET @CurrentComment += 'NewLOB: ' + CASE WHEN @CurrentIsNewLOB = 1 THEN 'Yes' WHEN @CurrentIsNewLOB = 0 THEN 'No' ELSE 'N/A' END + ', '\r\n          SET @CurrentComment += 'FileStream: ' + CASE WHEN @CurrentIsFileStream = 1 THEN 'Yes' WHEN @CurrentIsFileStream = 0 THEN 'No' ELSE 'N/A' END + ', '\r\n          IF @Version >= 11 SET @CurrentComment += 'ColumnStore: ' + CASE WHEN @CurrentIsColumnStore = 1 THEN 'Yes' WHEN @CurrentIsColumnStore = 0 THEN 'No' ELSE 'N/A' END + ', '\r\n          IF @Version >= 14 AND @Resumable = 'Y' SET @CurrentComment += 'Computed: ' + CASE WHEN @CurrentIsComputed = 1 THEN 'Yes' WHEN @CurrentIsComputed = 0 THEN 'No' ELSE 'N/A' END + ', '\r\n          IF @Version >= 14 AND @Resumable = 'Y' SET @CurrentComment += 'Timestamp: ' + CASE WHEN @CurrentIsTimestamp = 1 THEN 'Yes' WHEN @CurrentIsTimestamp = 0 THEN 'No' ELSE 'N/A' END + ', '\r\n          SET @CurrentComment += 'AllowPageLocks: ' + CASE WHEN @CurrentAllowPageLocks = 1 THEN 'Yes' WHEN @CurrentAllowPageLocks = 0 THEN 'No' ELSE 'N/A' END + ', '\r\n          SET @CurrentComment += 'PageCount: ' + ISNULL(CAST(@CurrentPageCount AS nvarchar),'N/A') + ', '\r\n          SET @CurrentComment += 'Fragmentation: ' + ISNULL(CAST(@CurrentFragmentationLevel AS nvarchar),'N/A')\r\n        END\r\n\r\n        IF @CurrentIndexID IS NOT NULL AND (@CurrentPageCount IS NOT NULL OR @CurrentFragmentationLevel IS NOT NULL)\r\n        BEGIN\r\n        SET @CurrentExtendedInfo = (SELECT *\r\n                                    FROM (SELECT CAST(@CurrentPageCount AS nvarchar) AS [PageCount],\r\n                                                 CAST(@CurrentFragmentationLevel AS nvarchar) AS Fragmentation\r\n                                    ) ExtendedInfo FOR XML RAW('ExtendedInfo'), ELEMENTS)\r\n        END\r\n\r\n        IF @CurrentIndexID IS NOT NULL AND @CurrentAction IS NOT NULL AND (SYSDATETIME() < DATEADD(SECOND,@TimeLimit,@StartTime) OR @TimeLimit IS NULL)\r\n        BEGIN\r\n          SET @CurrentDatabaseContext = @CurrentDatabaseName\r\n\r\n          SET @CurrentCommandType = 'ALTER_INDEX'\r\n\r\n          SET @CurrentCommand = ''\r\n          IF @LockTimeout IS NOT NULL SET @CurrentCommand = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '\r\n          SET @CurrentCommand += 'ALTER INDEX ' + QUOTENAME(@CurrentIndexName) + ' ON ' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName)\r\n          IF @CurrentResumableIndexOperation = 1 SET @CurrentCommand += ' RESUME'\r\n          IF @CurrentAction IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE') AND @CurrentResumableIndexOperation = 0 SET @CurrentCommand += ' REBUILD'\r\n          IF @CurrentAction IN('INDEX_REORGANIZE') AND @CurrentResumableIndexOperation = 0 SET @CurrentCommand += ' REORGANIZE'\r\n          IF @CurrentIsPartition = 1 AND @CurrentResumableIndexOperation = 0 SET @CurrentCommand += ' PARTITION = ' + CAST(@CurrentPartitionNumber AS nvarchar)\r\n\r\n          IF @CurrentAction IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE') AND @SortInTempdb = 'Y' AND @CurrentIndexType IN(1,2,3,4) AND @CurrentResumableIndexOperation = 0\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT 'SORT_IN_TEMPDB = ON'\r\n          END\r\n\r\n          IF @CurrentAction IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE') AND @SortInTempdb = 'N' AND @CurrentIndexType IN(1,2,3,4) AND @CurrentResumableIndexOperation = 0\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT 'SORT_IN_TEMPDB = OFF'\r\n          END\r\n\r\n          IF @CurrentAction = 'INDEX_REBUILD_ONLINE' AND (@CurrentIsPartition = 0 OR @Version >= 12) AND @CurrentResumableIndexOperation = 0\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT 'ONLINE = ON' + CASE WHEN @WaitAtLowPriorityMaxDuration IS NOT NULL THEN ' (WAIT_AT_LOW_PRIORITY (MAX_DURATION = ' + CAST(@WaitAtLowPriorityMaxDuration AS nvarchar) + ', ABORT_AFTER_WAIT = ' + UPPER(@WaitAtLowPriorityAbortAfterWait) + '))' ELSE '' END\r\n          END\r\n\r\n          IF @CurrentAction = 'INDEX_REBUILD_OFFLINE' AND (@CurrentIsPartition = 0 OR @Version >= 12) AND @CurrentResumableIndexOperation = 0\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT 'ONLINE = OFF'\r\n          END\r\n\r\n          IF @CurrentAction IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE') AND @CurrentMaxDOP IS NOT NULL\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT 'MAXDOP = ' + CAST(@CurrentMaxDOP AS nvarchar)\r\n          END\r\n\r\n          IF @CurrentAction IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE') AND @FillFactor IS NOT NULL AND @CurrentIsPartition = 0 AND @CurrentIndexType IN(1,2,3,4) AND @CurrentResumableIndexOperation = 0\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT 'FILLFACTOR = ' + CAST(@FillFactor AS nvarchar)\r\n          END\r\n\r\n          IF @CurrentAction IN('INDEX_REBUILD_ONLINE','INDEX_REBUILD_OFFLINE') AND @PadIndex = 'Y' AND @CurrentIsPartition = 0 AND @CurrentIndexType IN(1,2,3,4) AND @CurrentResumableIndexOperation = 0\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT 'PAD_INDEX = ON'\r\n          END\r\n\r\n          IF (@Version >= 14 OR SERVERPROPERTY('EngineEdition') IN (5,8)) AND @CurrentAction = 'INDEX_REBUILD_ONLINE' AND @CurrentResumableIndexOperation = 0\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT CASE WHEN @Resumable = 'Y' AND @CurrentIndexType IN(1,2) AND @CurrentIsComputed = 0 AND @CurrentIsTimestamp = 0 THEN 'RESUMABLE = ON' ELSE 'RESUMABLE = OFF' END\r\n          END\r\n\r\n          IF (@Version >= 14 OR SERVERPROPERTY('EngineEdition') IN (5,8)) AND @CurrentAction = 'INDEX_REBUILD_ONLINE' AND @CurrentResumableIndexOperation = 0 AND @Resumable = 'Y'  AND @CurrentIndexType IN(1,2) AND @CurrentIsComputed = 0 AND @CurrentIsTimestamp = 0 AND @TimeLimit IS NOT NULL\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT 'MAX_DURATION = ' + CAST(DATEDIFF(MINUTE,SYSDATETIME(),DATEADD(SECOND,@TimeLimit,@StartTime)) AS nvarchar(max))\r\n          END\r\n\r\n          IF @CurrentAction IN('INDEX_REORGANIZE') AND @LOBCompaction = 'Y'\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT 'LOB_COMPACTION = ON'\r\n          END\r\n\r\n          IF @CurrentAction IN('INDEX_REORGANIZE') AND @LOBCompaction = 'N'\r\n          BEGIN\r\n            INSERT INTO @CurrentAlterIndexWithClauseArguments (Argument)\r\n            SELECT 'LOB_COMPACTION = OFF'\r\n          END\r\n\r\n          IF EXISTS (SELECT * FROM @CurrentAlterIndexWithClauseArguments)\r\n          BEGIN\r\n            SET @CurrentAlterIndexWithClause = ' WITH ('\r\n\r\n            WHILE (1 = 1)\r\n            BEGIN\r\n              SELECT TOP 1 @CurrentAlterIndexArgumentID = ID,\r\n                           @CurrentAlterIndexArgument = Argument\r\n              FROM @CurrentAlterIndexWithClauseArguments\r\n              WHERE Added = 0\r\n              ORDER BY ID ASC\r\n\r\n              IF @@ROWCOUNT = 0\r\n              BEGIN\r\n                BREAK\r\n              END\r\n\r\n              SET @CurrentAlterIndexWithClause += @CurrentAlterIndexArgument + ', '\r\n\r\n              UPDATE @CurrentAlterIndexWithClauseArguments\r\n              SET Added = 1\r\n              WHERE [ID] = @CurrentAlterIndexArgumentID\r\n            END\r\n\r\n            SET @CurrentAlterIndexWithClause = RTRIM(@CurrentAlterIndexWithClause)\r\n\r\n            SET @CurrentAlterIndexWithClause = LEFT(@CurrentAlterIndexWithClause,LEN(@CurrentAlterIndexWithClause) - 1)\r\n\r\n            SET @CurrentAlterIndexWithClause = @CurrentAlterIndexWithClause + ')'\r\n          END\r\n\r\n          IF @CurrentAlterIndexWithClause IS NOT NULL SET @CurrentCommand += @CurrentAlterIndexWithClause\r\n\r\n          EXECUTE @CurrentCommandOutput = dbo.CommandExecute @DatabaseContext = @CurrentDatabaseName, @Command = @CurrentCommand, @CommandType = @CurrentCommandType, @Mode = 2, @Comment = @CurrentComment, @DatabaseName = @CurrentDatabaseName, @SchemaName = @CurrentSchemaName, @ObjectName = @CurrentObjectName, @ObjectType = @CurrentObjectType, @IndexName = @CurrentIndexName, @IndexType = @CurrentIndexType, @PartitionNumber = @CurrentPartitionNumber, @ExtendedInfo = @CurrentExtendedInfo, @LockMessageSeverity = @LockMessageSeverity, @ExecuteAsUser = @ExecuteAsUser, @LogToTable = @LogToTable, @Execute = @Execute\r\n          SET @Error = @@ERROR\r\n          IF @Error <> 0 SET @CurrentCommandOutput = @Error\r\n          IF @CurrentCommandOutput <> 0 SET @ReturnCode = @CurrentCommandOutput\r\n\r\n          IF @Delay > 0\r\n          BEGIN\r\n            SET @CurrentDelay = DATEADD(ss,@Delay,'1900-01-01')\r\n            WAITFOR DELAY @CurrentDelay\r\n          END\r\n        END\r\n\r\n        SET @CurrentMaxDOP = @MaxDOP\r\n\r\n        -- Create statistics comment\r\n        IF @CurrentStatisticsID IS NOT NULL\r\n        BEGIN\r\n          SET @CurrentComment = 'ObjectType: ' + CASE WHEN @CurrentObjectType = 'U' THEN 'Table' WHEN @CurrentObjectType = 'V' THEN 'View' ELSE 'N/A' END + ', '\r\n          SET @CurrentComment += 'IndexType: ' + CASE WHEN @CurrentIndexID IS NOT NULL THEN 'Index' ELSE 'Column' END + ', '\r\n          IF @CurrentIndexID IS NOT NULL SET @CurrentComment += 'IndexType: ' + CASE WHEN @CurrentIndexType = 1 THEN 'Clustered' WHEN @CurrentIndexType = 2 THEN 'NonClustered' WHEN @CurrentIndexType = 3 THEN 'XML' WHEN @CurrentIndexType = 4 THEN 'Spatial' WHEN @CurrentIndexType = 5 THEN 'Clustered Columnstore' WHEN @CurrentIndexType = 6 THEN 'NonClustered Columnstore' WHEN @CurrentIndexType = 7 THEN 'NonClustered Hash' ELSE 'N/A' END + ', '\r\n          SET @CurrentComment += 'Incremental: ' + CASE WHEN @CurrentIsIncremental = 1 THEN 'Y' WHEN @CurrentIsIncremental = 0 THEN 'N' ELSE 'N/A' END + ', '\r\n          SET @CurrentComment += 'RowCount: ' + ISNULL(CAST(@CurrentRowCount AS nvarchar),'N/A') + ', '\r\n          SET @CurrentComment += 'ModificationCounter: ' + ISNULL(CAST(@CurrentModificationCounter AS nvarchar),'N/A')\r\n        END\r\n\r\n        IF @CurrentStatisticsID IS NOT NULL AND (@CurrentRowCount IS NOT NULL OR @CurrentModificationCounter IS NOT NULL)\r\n        BEGIN\r\n        SET @CurrentExtendedInfo = (SELECT *\r\n                                    FROM (SELECT CAST(@CurrentRowCount AS nvarchar) AS [RowCount],\r\n                                                 CAST(@CurrentModificationCounter AS nvarchar) AS ModificationCounter\r\n                                    ) ExtendedInfo FOR XML RAW('ExtendedInfo'), ELEMENTS)\r\n        END\r\n\r\n        IF @CurrentStatisticsID IS NOT NULL AND @CurrentUpdateStatistics = 'Y' AND (SYSDATETIME() < DATEADD(SECOND,@TimeLimit,@StartTime) OR @TimeLimit IS NULL)\r\n        BEGIN\r\n          SET @CurrentDatabaseContext = @CurrentDatabaseName\r\n\r\n          SET @CurrentCommandType = 'UPDATE_STATISTICS'\r\n\r\n          SET @CurrentCommand = ''\r\n          IF @LockTimeout IS NOT NULL SET @CurrentCommand = 'SET LOCK_TIMEOUT ' + CAST(@LockTimeout * 1000 AS nvarchar) + '; '\r\n          SET @CurrentCommand += 'UPDATE STATISTICS ' + QUOTENAME(@CurrentSchemaName) + '.' + QUOTENAME(@CurrentObjectName) + ' ' + QUOTENAME(@CurrentStatisticsName)\r\n\r\n          IF @CurrentMaxDOP IS NOT NULL AND ((@Version >= 12.06024 AND @Version < 13) OR (@Version >= 13.05026 AND @Version < 14) OR @Version >= 14.030154)\r\n          BEGIN\r\n            INSERT INTO @CurrentUpdateStatisticsWithClauseArguments (Argument)\r\n            SELECT 'MAXDOP = ' + CAST(@CurrentMaxDOP AS nvarchar)\r\n          END\r\n\r\n          IF @CurrentStatisticsSample = 100\r\n          BEGIN\r\n            INSERT INTO @CurrentUpdateStatisticsWithClauseArguments (Argument)\r\n            SELECT 'FULLSCAN'\r\n          END\r\n\r\n          IF @CurrentStatisticsSample IS NOT NULL AND @CurrentStatisticsSample <> 100\r\n          BEGIN\r\n            INSERT INTO @CurrentUpdateStatisticsWithClauseArguments (Argument)\r\n            SELECT 'SAMPLE ' + CAST(@CurrentStatisticsSample AS nvarchar) + ' PERCENT'\r\n          END\r\n\r\n          IF @CurrentStatisticsResample = 'Y'\r\n          BEGIN\r\n            INSERT INTO @CurrentUpdateStatisticsWithClauseArguments (Argument)\r\n            SELECT 'RESAMPLE'\r\n          END\r\n\r\n          IF @CurrentNoRecompute = 1\r\n          BEGIN\r\n            INSERT INTO @CurrentUpdateStatisticsWithClauseArguments (Argument)\r\n            SELECT 'NORECOMPUTE'\r\n          END\r\n\r\n          IF EXISTS (SELECT * FROM @CurrentUpdateStatisticsWithClauseArguments)\r\n          BEGIN\r\n            SET @CurrentUpdateStatisticsWithClause = ' WITH'\r\n\r\n            WHILE (1 = 1)\r\n            BEGIN\r\n              SELECT TOP 1 @CurrentUpdateStatisticsArgumentID = ID,\r\n                           @CurrentUpdateStatisticsArgument = Argument\r\n              FROM @CurrentUpdateStatisticsWithClauseArguments\r\n              WHERE Added = 0\r\n              ORDER BY ID ASC\r\n\r\n              IF @@ROWCOUNT = 0\r\n              BEGIN\r\n                BREAK\r\n              END\r\n\r\n              SET @CurrentUpdateStatisticsWithClause = @CurrentUpdateStatisticsWithClause + ' ' + @CurrentUpdateStatisticsArgument + ','\r\n\r\n              UPDATE @CurrentUpdateStatisticsWithClauseArguments\r\n              SET Added = 1\r\n              WHERE [ID] = @CurrentUpdateStatisticsArgumentID\r\n            END\r\n\r\n            SET @CurrentUpdateStatisticsWithClause = LEFT(@CurrentUpdateStatisticsWithClause,LEN(@CurrentUpdateStatisticsWithClause) - 1)\r\n          END\r\n\r\n          IF @CurrentUpdateStatisticsWithClause IS NOT NULL SET @CurrentCommand += @CurrentUpdateStatisticsWithClause\r\n\r\n          IF @PartitionLevelStatistics = 1 AND @CurrentIsIncremental = 1 AND @CurrentPartitionNumber IS NOT NULL SET @CurrentCommand += ' ON PARTITIONS(' + CAST(@CurrentPartitionNumber AS nvarchar(max)) + ')'\r\n\r\n          EXECUTE @CurrentCommandOutput = dbo.CommandExecute @DatabaseContext = @CurrentDatabaseName, @Command = @CurrentCommand, @CommandType = @CurrentCommandType, @Mode = 2, @Comment = @CurrentComment, @DatabaseName = @CurrentDatabaseName, @SchemaName = @CurrentSchemaName, @ObjectName = @CurrentObjectName, @ObjectType = @CurrentObjectType, @IndexName = @CurrentIndexName, @IndexType = @CurrentIndexType, @StatisticsName = @CurrentStatisticsName, @ExtendedInfo = @CurrentExtendedInfo, @LockMessageSeverity = @LockMessageSeverity, @ExecuteAsUser = @ExecuteAsUser, @LogToTable = @LogToTable, @Execute = @Execute\r\n          SET @Error = @@ERROR\r\n          IF @Error <> 0 SET @CurrentCommandOutput = @Error\r\n          IF @CurrentCommandOutput <> 0 SET @ReturnCode = @CurrentCommandOutput\r\n        END\r\n\r\n        NoAction:\r\n\r\n        -- Update that the index or statistics is completed\r\n        UPDATE @tmpIndexesStatistics\r\n        SET Completed = 1\r\n        WHERE Selected = 1\r\n        AND Completed = 0\r\n        AND [Order] = @CurrentIxOrder\r\n        AND ID = @CurrentIxID\r\n\r\n        -- Clear variables\r\n        SET @CurrentDatabaseContext = NULL\r\n\r\n        SET @CurrentCommand = NULL\r\n        SET @CurrentCommandOutput = NULL\r\n        SET @CurrentCommandType = NULL\r\n        SET @CurrentComment = NULL\r\n        SET @CurrentExtendedInfo = NULL\r\n\r\n        SET @CurrentIxID = NULL\r\n        SET @CurrentIxOrder = NULL\r\n        SET @CurrentSchemaID = NULL\r\n        SET @CurrentSchemaName = NULL\r\n        SET @CurrentObjectID = NULL\r\n        SET @CurrentObjectName = NULL\r\n        SET @CurrentObjectType = NULL\r\n        SET @CurrentIsMemoryOptimized = NULL\r\n        SET @CurrentIndexID = NULL\r\n        SET @CurrentIndexName = NULL\r\n        SET @CurrentIndexType = NULL\r\n        SET @CurrentStatisticsID = NULL\r\n        SET @CurrentStatisticsName = NULL\r\n        SET @CurrentPartitionID = NULL\r\n        SET @CurrentPartitionNumber = NULL\r\n        SET @CurrentPartitionCount = NULL\r\n        SET @CurrentIsPartition = NULL\r\n        SET @CurrentIndexExists = NULL\r\n        SET @CurrentStatisticsExists = NULL\r\n        SET @CurrentIsImageText = NULL\r\n        SET @CurrentIsNewLOB = NULL\r\n        SET @CurrentIsFileStream = NULL\r\n        SET @CurrentIsColumnStore = NULL\r\n        SET @CurrentIsComputed = NULL\r\n        SET @CurrentIsTimestamp = NULL\r\n        SET @CurrentAllowPageLocks = NULL\r\n        SET @CurrentNoRecompute = NULL\r\n        SET @CurrentIsIncremental = NULL\r\n        SET @CurrentRowCount = NULL\r\n        SET @CurrentModificationCounter = NULL\r\n        SET @CurrentOnReadOnlyFileGroup = NULL\r\n        SET @CurrentResumableIndexOperation = NULL\r\n        SET @CurrentFragmentationLevel = NULL\r\n        SET @CurrentPageCount = NULL\r\n        SET @CurrentFragmentationGroup = NULL\r\n        SET @CurrentAction = NULL\r\n        SET @CurrentMaxDOP = NULL\r\n        SET @CurrentUpdateStatistics = NULL\r\n        SET @CurrentStatisticsSample = NULL\r\n        SET @CurrentStatisticsResample = NULL\r\n        SET @CurrentAlterIndexArgumentID = NULL\r\n        SET @CurrentAlterIndexArgument = NULL\r\n        SET @CurrentAlterIndexWithClause = NULL\r\n        SET @CurrentUpdateStatisticsArgumentID = NULL\r\n        SET @CurrentUpdateStatisticsArgument = NULL\r\n        SET @CurrentUpdateStatisticsWithClause = NULL\r\n\r\n        DELETE FROM @CurrentActionsAllowed\r\n        DELETE FROM @CurrentAlterIndexWithClauseArguments\r\n        DELETE FROM @CurrentUpdateStatisticsWithClauseArguments\r\n\r\n      END\r\n\r\n    END\r\n\r\n    IF @CurrentDatabaseState = 'SUSPECT'\r\n    BEGIN\r\n      SET @ErrorMessage = 'The database ' + QUOTENAME(@CurrentDatabaseName) + ' is in a SUSPECT state.'\r\n      RAISERROR('%s',16,1,@ErrorMessage) WITH NOWAIT\r\n      RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n      SET @Error = @@ERROR\r\n    END\r\n\r\n    -- Update that the database is completed\r\n    IF @DatabasesInParallel = 'Y'\r\n    BEGIN\r\n      UPDATE dbo.QueueDatabase\r\n      SET DatabaseEndTime = SYSDATETIME()\r\n      WHERE QueueID = @QueueID\r\n      AND DatabaseName = @CurrentDatabaseName\r\n    END\r\n    ELSE\r\n    BEGIN\r\n      UPDATE @tmpDatabases\r\n      SET Completed = 1\r\n      WHERE Selected = 1\r\n      AND Completed = 0\r\n      AND ID = @CurrentDBID\r\n    END\r\n\r\n    -- Clear variables\r\n    SET @CurrentDBID = NULL\r\n    SET @CurrentDatabaseName = NULL\r\n\r\n    SET @CurrentDatabase_sp_executesql = NULL\r\n\r\n    SET @CurrentExecuteAsUserExists = NULL\r\n    SET @CurrentUserAccess = NULL\r\n    SET @CurrentIsReadOnly = NULL\r\n    SET @CurrentDatabaseState = NULL\r\n    SET @CurrentInStandby = NULL\r\n    SET @CurrentRecoveryModel = NULL\r\n\r\n    SET @CurrentIsDatabaseAccessible = NULL\r\n    SET @CurrentReplicaID = NULL\r\n    SET @CurrentAvailabilityGroupID = NULL\r\n    SET @CurrentAvailabilityGroup = NULL\r\n    SET @CurrentAvailabilityGroupRole = NULL\r\n    SET @CurrentDatabaseMirroringRole = NULL\r\n\r\n    SET @CurrentCommand = NULL\r\n\r\n    DELETE FROM @tmpIndexesStatistics\r\n\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Log completing information                                                                 //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  Logging:\r\n  SET @EndMessage = 'Date and time: ' + CONVERT(nvarchar,SYSDATETIME(),120)\r\n  RAISERROR('%s',10,1,@EndMessage) WITH NOWAIT\r\n\r\n  RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n  IF @ReturnCode <> 0\r\n  BEGIN\r\n    RETURN @ReturnCode\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\nEND\r\n\r\nGO\r\n\r\n\r\n"
}