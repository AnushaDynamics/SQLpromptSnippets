{
  "id": "3d778519-0b50-4562-ac76-071e6cd5867e",
  "prefix": "TransferLogins",
  "description": "Transfer Logins with Passwords between Instances of SQL Server",
  "body": "/* =========================================================================================================================================\r\n-- Server\t\t: Execute as is in OLD Server >> Copy Generated Code to NEW Server and Execute\r\n-- Database\t\t: master\r\n-- Script\t\t: TransferLogins\r\n-- Description\t: Transfer Logins with Passwords between Instances of SQL Server\r\n-- Usage\t\t: Execute the Script in OLD Server and then Copy the Code Generated to NEW Server and Execute.\r\n-- Link\t\t\t: https://docs.microsoft.com/en-us/troubleshoot/sql/security/transfer-logins-passwords-between-instances\r\n========================================================================================================================================= */\r\nUSE master;\r\nGO\r\n\r\nSET NOCOUNT ON;\r\n\r\n--\r\nIF OBJECT_ID('sp_hexadecimal') IS NOT NULL\r\n\tDROP PROCEDURE dbo.sp_hexadecimal;\r\nGO\r\n\r\nCREATE PROCEDURE dbo.sp_hexadecimal\r\n(\r\n\t@binvalue VARBINARY(256),\r\n\t@hexvalue VARCHAR(514) OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tDECLARE @charvalue VARCHAR(514);\r\n\tDECLARE @i INT;\r\n\tDECLARE @length INT;\r\n\tDECLARE @hexstring CHAR(16);\r\n\r\n\tSELECT @charvalue = '0x';\r\n\tSELECT @i = 1;\r\n\tSELECT @length = DATALENGTH(@binvalue);\r\n\tSELECT @hexstring = '0123456789ABCDEF';\r\n\r\n\tWHILE (@i <= @length)\r\n\t\tBEGIN\r\n\t\t\tDECLARE @tempint INT;\r\n\t\t\tDECLARE @firstint INT;\r\n\t\t\tDECLARE @secondint INT;\r\n\r\n\t\t\tSELECT @tempint = CONVERT(INT, SUBSTRING(@binvalue, @i, 1));\r\n\t\t\tSELECT @firstint = FLOOR(@tempint / 16);\r\n\t\t\tSELECT @secondint = @tempint - (@firstint * 16);\r\n\t\t\tSELECT @charvalue = @charvalue + SUBSTRING(@hexstring, @firstint + 1, 1) + SUBSTRING(@hexstring, @secondint + 1, 1);\r\n\r\n\t\t\tSELECT @i = @i + 1;\r\n\t\tEND;\r\n\r\n\tSELECT @hexvalue = @charvalue;\r\nEND;\r\nGO\r\n\r\n--\r\nIF OBJECT_ID('sp_help_revlogin') IS NOT NULL\r\n\tDROP PROCEDURE dbo.sp_help_revlogin;\r\nGO\r\n\r\nCREATE PROCEDURE dbo.sp_help_revlogin\r\n(\r\n\t@login_name sysname = NULL\r\n)\r\nAS\r\nBEGIN\r\n\tDECLARE @name sysname;\r\n\tDECLARE @type VARCHAR(1);\r\n\tDECLARE @hasaccess INT;\r\n\tDECLARE @denylogin INT;\r\n\tDECLARE @is_disabled INT;\r\n\tDECLARE @PWD_varbinary VARBINARY(256);\r\n\tDECLARE @PWD_string VARCHAR(514);\r\n\tDECLARE @SID_varbinary VARBINARY(85);\r\n\tDECLARE @SID_string VARCHAR(514);\r\n\tDECLARE @tmpstr VARCHAR(1024);\r\n\tDECLARE @is_policy_checked VARCHAR(3);\r\n\tDECLARE @is_expiration_checked VARCHAR(3);\r\n\tDECLARE @Prefix VARCHAR(255);\r\n\tDECLARE @defaultdb sysname;\r\n\tDECLARE @defaultlanguage sysname;\r\n\tDECLARE @tmpstrRole VARCHAR(1024);\r\n\r\n\tIF (@login_name IS NULL)\r\n\t\tDECLARE login_curs CURSOR FOR\r\n\t\tSELECT p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin, p.default_language_name\r\n\t\tFROM sys.server_principals AS p\r\n\t\tLEFT JOIN sys.syslogins AS l ON (l.name = p.name)\r\n\t\tWHERE p.type IN ( 'S', 'G', 'U' ) AND p.name <> 'sa'\r\n\t\tORDER BY p.name;\r\n\tELSE\r\n\t\tDECLARE login_curs CURSOR FOR\r\n\t\tSELECT p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin, p.default_language_name\r\n\t\tFROM sys.server_principals AS p\r\n\t\tLEFT JOIN sys.syslogins AS l ON (l.name = p.name)\r\n\t\tWHERE p.type IN ( 'S', 'G', 'U' ) AND p.name = @login_name\r\n\t\tORDER BY p.name;\r\n\r\n\tOPEN login_curs;\r\n\r\n\tFETCH NEXT FROM login_curs\r\n\tINTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin, @defaultlanguage;\r\n\r\n\tIF (@@fetch_status = -1)\r\n\tBEGIN\r\n\t\tPRINT 'No login(s) found.';\r\n\t\tCLOSE login_curs;\r\n\t\tDEALLOCATE login_curs;\r\n\t\tRETURN -1;\r\n\tEND;\r\n\r\n\tPRINT '/* sp_help_revlogin script */';\r\n\tPRINT '/** Generated ' + CONVERT(VARCHAR(32), GETDATE()) + ' on ' + @@SERVERNAME + ' **/';\r\n\tPRINT '';\r\n\r\n\tWHILE (@@fetch_status <> -1)\r\n\tBEGIN\r\n\t\tIF (@@fetch_status <> -2)\r\n\t\tBEGIN\r\n\t\t\tPRINT '';\r\n\t\t\tPRINT '-- Login: ' + @name;\r\n\t\t\tPRINT 'IF NOT EXISTS (SELECT * FROM sys.server_principals WHERE name = N''' + @name + ''')';\r\n\t\t\tPRINT 'BEGIN';\r\n\r\n\t\t\tIF (@type IN ( 'G', 'U' ))\r\n\t\t\t\tBEGIN -- NT authenticated account/group \r\n\t\t\t\t\tSET @tmpstr = '\tCREATE LOGIN ' + QUOTENAME(@name) + ' FROM WINDOWS WITH DEFAULT_DATABASE = [' + @defaultdb + ']';\r\n\t\t\t\tEND;\r\n\t\t\tELSE\r\n\t\t\t\tBEGIN -- SQL Server authentication\r\n\t\t\t\t\t-- obtain password and sid\r\n\t\t\t\t\tSET @PWD_varbinary = CAST(LOGINPROPERTY(@name, 'PasswordHash') AS VARBINARY(256));\r\n\r\n\t\t\t\t\tEXEC dbo.sp_hexadecimal @binvalue = @PWD_varbinary, @hexvalue = @PWD_string OUT;\r\n\t\t\t\t\tEXEC dbo.sp_hexadecimal @binvalue = @SID_varbinary, @hexvalue = @SID_string OUT;\r\n\r\n\t\t\t\t\t-- obtain password policy state\r\n\t\t\t\t\tSELECT @is_policy_checked = CASE is_policy_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END\r\n\t\t\t\t\tFROM sys.sql_logins\r\n\t\t\t\t\tWHERE name = @name;\r\n\r\n\t\t\t\t\tSELECT @is_expiration_checked = CASE is_expiration_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END\r\n\t\t\t\t\tFROM sys.sql_logins\r\n\t\t\t\t\tWHERE name = @name;\r\n\r\n\t\t\t\t\tSET @tmpstr = '\tCREATE LOGIN ' + QUOTENAME(@name) + ' WITH PASSWORD = ' + @PWD_string + ' HASHED, SID = ' + @SID_string + ', DEFAULT_DATABASE = [' + @defaultdb + ']' + ', DEFAULT_LANGUAGE = [' + @defaultlanguage + ']';\r\n\r\n\t\t\t\t\tIF (@is_policy_checked IS NOT NULL)\r\n\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\tSET @tmpstr = @tmpstr + ', CHECK_POLICY = ' + @is_policy_checked;\r\n\t\t\t\t\t\tEND;\r\n\r\n\t\t\t\t\tIF (@is_expiration_checked IS NOT NULL)\r\n\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\tSET @tmpstr = @tmpstr + ', CHECK_EXPIRATION = ' + @is_expiration_checked;\r\n\t\t\t\t\t\tEND;\r\n\t\t\t\tEND;\r\n\r\n\t\t\tIF (@denylogin = 1)\r\n\t\t\t\tBEGIN -- login is denied access\r\n\t\t\t\t\tSET @tmpstr = @tmpstr + '; DENY CONNECT SQL TO ' + QUOTENAME(@name);\r\n\t\t\t\tEND;\r\n\t\t\tELSE IF (@hasaccess = 0)\r\n\t\t\t\tBEGIN -- login exists but does not have access\r\n\t\t\t\t\tSET @tmpstr = @tmpstr + '; REVOKE CONNECT SQL TO ' + QUOTENAME(@name);\r\n\t\t\t\tEND;\r\n\r\n\t\t\tIF (@is_disabled = 1)\r\n\t\t\t\tBEGIN -- login is disabled\r\n\t\t\t\t\tSET @tmpstr = @tmpstr + '; ALTER LOGIN ' + QUOTENAME(@name) + ' DISABLE';\r\n\t\t\t\tEND;\r\n\r\n\t\t\tSET @Prefix = '\tEXEC master.dbo.sp_addsrvrolemember @loginame=''';\r\n\t\t\tSET @tmpstrRole = '';\r\n\r\n\t\t\tSELECT @tmpstrRole = @tmpstrRole\r\n\t\t\t\t\t\t\t\t\t+ CASE WHEN L.sysadmin = 1 THEN @Prefix + L.LoginName + ''', @rolename=''sysadmin''' ELSE '' END\r\n\t\t\t\t\t\t\t\t\t\t+ CASE WHEN L.securityadmin = 1 THEN @Prefix + L.LoginName + ''', @rolename=''securityadmin''' ELSE '' END\r\n\t\t\t\t\t\t\t\t\t\t\t+ CASE WHEN L.serveradmin = 1 THEN @Prefix + L.LoginName + ''', @rolename=''serveradmin''' ELSE '' END\r\n\t\t\t\t\t\t\t\t\t\t\t\t+ CASE WHEN L.setupadmin = 1 THEN @Prefix + L.LoginName + ''', @rolename=''setupadmin''' ELSE '' END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ CASE WHEN L.processadmin = 1 THEN @Prefix + L.LoginName + ''', @rolename=''processadmin''' ELSE '' END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ CASE WHEN L.diskadmin = 1 THEN @Prefix + L.LoginName + ''', @rolename=''diskadmin''' ELSE '' END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ CASE WHEN L.dbcreator = 1 THEN @Prefix + L.LoginName + ''', @rolename=''dbcreator''' ELSE '' END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ CASE WHEN L.bulkadmin = 1 THEN @Prefix + L.LoginName + ''', @rolename=''bulkadmin''' ELSE '' END\r\n\t\t\tFROM (\r\n\t\t\t\t\tSELECT CONVERT(VARCHAR(100), SUSER_SNAME(sid)) AS \"LoginName\", sysadmin, securityadmin, serveradmin, setupadmin, processadmin, diskadmin, dbcreator, bulkadmin\r\n\t\t\t\t\tFROM sys.syslogins\r\n\t\t\t\t\tWHERE (sysadmin <> 0 OR securityadmin <> 0 OR serveradmin <> 0 OR setupadmin <> 0 OR processadmin <> 0 OR diskadmin <> 0 OR dbcreator <> 0 OR bulkadmin <> 0)\r\n\t\t\t\t\t\tAND name = @name\r\n\t\t\t\t ) AS L;\r\n\r\n\t\t\tPRINT @tmpstr;\r\n\t\t\tPRINT @tmpstrRole;\r\n\t\t\tPRINT 'END';\r\n\t\tEND;\r\n\r\n\t\tFETCH NEXT FROM login_curs\r\n\t\tINTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin, @defaultlanguage;\r\n\tEND;\r\n\r\n\tCLOSE login_curs;\r\n\tDEALLOCATE login_curs;\r\n\r\n\tRETURN 0;\r\nEND;\r\nGO\r\n\r\n--\r\nEXEC dbo.sp_help_revlogin @login_name = NULL;"
}