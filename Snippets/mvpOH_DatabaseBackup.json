{
  "id": "8f07cca3-9b4d-41e9-8aaf-dd87f924e2a3",
  "prefix": "mvpOH_DatabaseBackup",
  "description": "DatabaseBackup (By Ola Hallengren)",
  "body": "USE [master]\r\nGO\r\n\r\n/****** Object:  StoredProcedure [dbo].[DatabaseBackup] ******/\r\nIF OBJECT_ID('[dbo].[DatabaseBackup]', 'P') IS NOT NULL\r\n\tDROP PROCEDURE [dbo].[DatabaseBackup];\r\nGO\r\n\r\n/****** Object:  StoredProcedure [dbo].[DatabaseBackup] ******/\r\nSET ANSI_NULLS ON\r\nGO\r\n\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\n\r\nCREATE PROCEDURE [dbo].[DatabaseBackup]\r\n\r\n@Databases nvarchar(max) = NULL,\r\n@Directory nvarchar(max) = NULL,\r\n@BackupType nvarchar(max),\r\n@Verify nvarchar(max) = 'N',\r\n@CleanupTime int = NULL,\r\n@CleanupMode nvarchar(max) = 'AFTER_BACKUP',\r\n@Compress nvarchar(max) = NULL,\r\n@CopyOnly nvarchar(max) = 'N',\r\n@ChangeBackupType nvarchar(max) = 'N',\r\n@BackupSoftware nvarchar(max) = NULL,\r\n@CheckSum nvarchar(max) = 'N',\r\n@BlockSize int = NULL,\r\n@BufferCount int = NULL,\r\n@MaxTransferSize int = NULL,\r\n@NumberOfFiles int = NULL,\r\n@MinBackupSizeForMultipleFiles int = NULL,\r\n@MaxFileSize int = NULL,\r\n@CompressionLevel int = NULL,\r\n@Description nvarchar(max) = NULL,\r\n@Threads int = NULL,\r\n@Throttle int = NULL,\r\n@Encrypt nvarchar(max) = 'N',\r\n@EncryptionAlgorithm nvarchar(max) = NULL,\r\n@ServerCertificate nvarchar(max) = NULL,\r\n@ServerAsymmetricKey nvarchar(max) = NULL,\r\n@EncryptionKey nvarchar(max) = NULL,\r\n@ReadWriteFileGroups nvarchar(max) = 'N',\r\n@OverrideBackupPreference nvarchar(max) = 'N',\r\n@NoRecovery nvarchar(max) = 'N',\r\n@URL nvarchar(max) = NULL,\r\n@Credential nvarchar(max) = NULL,\r\n@MirrorDirectory nvarchar(max) = NULL,\r\n@MirrorCleanupTime int = NULL,\r\n@MirrorCleanupMode nvarchar(max) = 'AFTER_BACKUP',\r\n@MirrorURL nvarchar(max) = NULL,\r\n@AvailabilityGroups nvarchar(max) = NULL,\r\n@Updateability nvarchar(max) = 'ALL',\r\n@AdaptiveCompression nvarchar(max) = NULL,\r\n@ModificationLevel int = NULL,\r\n@LogSizeSinceLastLogBackup int = NULL,\r\n@TimeSinceLastLogBackup int = NULL,\r\n@DataDomainBoostHost nvarchar(max) = NULL,\r\n@DataDomainBoostUser nvarchar(max) = NULL,\r\n@DataDomainBoostDevicePath nvarchar(max) = NULL,\r\n@DataDomainBoostLockboxPath nvarchar(max) = NULL,\r\n@DirectoryStructure nvarchar(max) = '{ServerName}${InstanceName}{DirectorySeparator}{DatabaseName}{DirectorySeparator}{BackupType}_{Partial}_{CopyOnly}',\r\n@AvailabilityGroupDirectoryStructure nvarchar(max) = '{ClusterName}${AvailabilityGroupName}{DirectorySeparator}{DatabaseName}{DirectorySeparator}{BackupType}_{Partial}_{CopyOnly}',\r\n@FileName nvarchar(max) = '{ServerName}${InstanceName}_{DatabaseName}_{BackupType}_{Partial}_{CopyOnly}_{Year}{Month}{Day}_{Hour}{Minute}{Second}_{FileNumber}.{FileExtension}',\r\n@AvailabilityGroupFileName nvarchar(max) = '{ClusterName}${AvailabilityGroupName}_{DatabaseName}_{BackupType}_{Partial}_{CopyOnly}_{Year}{Month}{Day}_{Hour}{Minute}{Second}_{FileNumber}.{FileExtension}',\r\n@FileExtensionFull nvarchar(max) = NULL,\r\n@FileExtensionDiff nvarchar(max) = NULL,\r\n@FileExtensionLog nvarchar(max) = NULL,\r\n@Init nvarchar(max) = 'N',\r\n@Format nvarchar(max) = 'N',\r\n@ObjectLevelRecoveryMap nvarchar(max) = 'N',\r\n@ExcludeLogShippedFromLogBackup nvarchar(max) = 'Y',\r\n@StringDelimiter nvarchar(max) = ',',\r\n@DatabaseOrder nvarchar(max) = NULL,\r\n@DatabasesInParallel nvarchar(max) = 'N',\r\n@LogToTable nvarchar(max) = 'N',\r\n@Execute nvarchar(max) = 'Y'\r\n\r\nAS\r\n\r\nBEGIN\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Source:  https://ola.hallengren.com                                                        //--\r\n  --// License: https://ola.hallengren.com/license.html                                           //--\r\n  --// GitHub:  https://github.com/olahallengren/sql-server-maintenance-solution                  //--\r\n  --// Version: 2020-12-31 18:58:56                                                               //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET NOCOUNT ON\r\n\r\n  DECLARE @StartMessage nvarchar(max)\r\n  DECLARE @EndMessage nvarchar(max)\r\n  DECLARE @DatabaseMessage nvarchar(max)\r\n  DECLARE @ErrorMessage nvarchar(max)\r\n\r\n  DECLARE @StartTime datetime2 = SYSDATETIME()\r\n  DECLARE @SchemaName nvarchar(max) = OBJECT_SCHEMA_NAME(@@PROCID)\r\n  DECLARE @ObjectName nvarchar(max) = OBJECT_NAME(@@PROCID)\r\n  DECLARE @VersionTimestamp nvarchar(max) = SUBSTRING(OBJECT_DEFINITION(@@PROCID),CHARINDEX('--// Version: ',OBJECT_DEFINITION(@@PROCID)) + LEN('--// Version: ') + 1, 19)\r\n  DECLARE @Parameters nvarchar(max)\r\n\r\n  DECLARE @HostPlatform nvarchar(max)\r\n  DECLARE @DirectorySeparator nvarchar(max)\r\n\r\n  DECLARE @Updated bit\r\n\r\n  DECLARE @Cluster nvarchar(max)\r\n\r\n  DECLARE @DefaultDirectory nvarchar(4000)\r\n\r\n  DECLARE @QueueID int\r\n  DECLARE @QueueStartTime datetime2\r\n\r\n  DECLARE @CurrentRootDirectoryID int\r\n  DECLARE @CurrentRootDirectoryPath nvarchar(4000)\r\n\r\n  DECLARE @CurrentDBID int\r\n  DECLARE @CurrentDatabaseName nvarchar(max)\r\n\r\n  DECLARE @CurrentDatabase_sp_executesql nvarchar(max)\r\n\r\n  DECLARE @CurrentUserAccess nvarchar(max)\r\n  DECLARE @CurrentIsReadOnly bit\r\n  DECLARE @CurrentDatabaseState nvarchar(max)\r\n  DECLARE @CurrentInStandby bit\r\n  DECLARE @CurrentRecoveryModel nvarchar(max)\r\n  DECLARE @CurrentDatabaseSize bigint\r\n\r\n  DECLARE @CurrentIsEncrypted bit\r\n\r\n  DECLARE @CurrentBackupType nvarchar(max)\r\n  DECLARE @CurrentMaxTransferSize int\r\n  DECLARE @CurrentNumberOfFiles int\r\n  DECLARE @CurrentFileExtension nvarchar(max)\r\n  DECLARE @CurrentFileNumber int\r\n  DECLARE @CurrentDifferentialBaseLSN numeric(25,0)\r\n  DECLARE @CurrentDifferentialBaseIsSnapshot bit\r\n  DECLARE @CurrentLogLSN numeric(25,0)\r\n  DECLARE @CurrentLatestBackup datetime2\r\n  DECLARE @CurrentDatabaseNameFS nvarchar(max)\r\n  DECLARE @CurrentDirectoryStructure nvarchar(max)\r\n  DECLARE @CurrentDatabaseFileName nvarchar(max)\r\n  DECLARE @CurrentMaxFilePathLength nvarchar(max)\r\n  DECLARE @CurrentFileName nvarchar(max)\r\n  DECLARE @CurrentDirectoryID int\r\n  DECLARE @CurrentDirectoryPath nvarchar(max)\r\n  DECLARE @CurrentFilePath nvarchar(max)\r\n  DECLARE @CurrentDate datetime2\r\n  DECLARE @CurrentCleanupDate datetime2\r\n  DECLARE @CurrentIsDatabaseAccessible bit\r\n  DECLARE @CurrentReplicaID uniqueidentifier\r\n  DECLARE @CurrentAvailabilityGroupID uniqueidentifier\r\n  DECLARE @CurrentAvailabilityGroup nvarchar(max)\r\n  DECLARE @CurrentAvailabilityGroupRole nvarchar(max)\r\n  DECLARE @CurrentAvailabilityGroupBackupPreference nvarchar(max)\r\n  DECLARE @CurrentIsPreferredBackupReplica bit\r\n  DECLARE @CurrentDatabaseMirroringRole nvarchar(max)\r\n  DECLARE @CurrentLogShippingRole nvarchar(max)\r\n\r\n  DECLARE @CurrentBackupSetID int\r\n  DECLARE @CurrentIsMirror bit\r\n  DECLARE @CurrentLastLogBackup datetime2\r\n  DECLARE @CurrentLogSizeSinceLastLogBackup float\r\n  DECLARE @CurrentAllocatedExtentPageCount bigint\r\n  DECLARE @CurrentModifiedExtentPageCount bigint\r\n\r\n  DECLARE @CurrentDatabaseContext nvarchar(max)\r\n  DECLARE @CurrentCommand nvarchar(max)\r\n  DECLARE @CurrentCommandOutput int\r\n  DECLARE @CurrentCommandType nvarchar(max)\r\n\r\n  DECLARE @Errors TABLE (ID int IDENTITY PRIMARY KEY,\r\n                         [Message] nvarchar(max) NOT NULL,\r\n                         Severity int NOT NULL,\r\n                         [State] int)\r\n\r\n  DECLARE @CurrentMessage nvarchar(max)\r\n  DECLARE @CurrentSeverity int\r\n  DECLARE @CurrentState int\r\n\r\n  DECLARE @Directories TABLE (ID int PRIMARY KEY,\r\n                              DirectoryPath nvarchar(max),\r\n                              Mirror bit,\r\n                              Completed bit)\r\n\r\n  DECLARE @URLs TABLE (ID int PRIMARY KEY,\r\n                       DirectoryPath nvarchar(max),\r\n                       Mirror bit)\r\n\r\n  DECLARE @DirectoryInfo TABLE (FileExists bit,\r\n                                FileIsADirectory bit,\r\n                                ParentDirectoryExists bit)\r\n\r\n  DECLARE @tmpDatabases TABLE (ID int IDENTITY,\r\n                               DatabaseName nvarchar(max),\r\n                               DatabaseNameFS nvarchar(max),\r\n                               DatabaseType nvarchar(max),\r\n                               AvailabilityGroup bit,\r\n                               StartPosition int,\r\n                               DatabaseSize bigint,\r\n                               LogSizeSinceLastLogBackup float,\r\n                               [Order] int,\r\n                               Selected bit,\r\n                               Completed bit,\r\n                               PRIMARY KEY(Selected, Completed, [Order], ID))\r\n\r\n  DECLARE @tmpAvailabilityGroups TABLE (ID int IDENTITY PRIMARY KEY,\r\n                                        AvailabilityGroupName nvarchar(max),\r\n                                        StartPosition int,\r\n                                        Selected bit)\r\n\r\n  DECLARE @tmpDatabasesAvailabilityGroups TABLE (DatabaseName nvarchar(max),\r\n                                                 AvailabilityGroupName nvarchar(max))\r\n\r\n  DECLARE @SelectedDatabases TABLE (DatabaseName nvarchar(max),\r\n                                    DatabaseType nvarchar(max),\r\n                                    AvailabilityGroup nvarchar(max),\r\n                                    StartPosition int,\r\n                                    Selected bit)\r\n\r\n  DECLARE @SelectedAvailabilityGroups TABLE (AvailabilityGroupName nvarchar(max),\r\n                                             StartPosition int,\r\n                                             Selected bit)\r\n\r\n  DECLARE @CurrentBackupOutput bit\r\n\r\n  DECLARE @CurrentBackupSet TABLE (ID int IDENTITY PRIMARY KEY,\r\n                                   Mirror bit,\r\n                                   VerifyCompleted bit,\r\n                                   VerifyOutput int)\r\n\r\n  DECLARE @CurrentDirectories TABLE (ID int PRIMARY KEY,\r\n                                     DirectoryPath nvarchar(max),\r\n                                     Mirror bit,\r\n                                     DirectoryNumber int,\r\n                                     CleanupDate datetime2,\r\n                                     CleanupMode nvarchar(max),\r\n                                     CreateCompleted bit,\r\n                                     CleanupCompleted bit,\r\n                                     CreateOutput int,\r\n                                     CleanupOutput int)\r\n\r\n  DECLARE @CurrentURLs TABLE (ID int PRIMARY KEY,\r\n                              DirectoryPath nvarchar(max),\r\n                              Mirror bit,\r\n                              DirectoryNumber int)\r\n\r\n  DECLARE @CurrentFiles TABLE ([Type] nvarchar(max),\r\n                               FilePath nvarchar(max),\r\n                               Mirror bit)\r\n\r\n  DECLARE @CurrentCleanupDates TABLE (CleanupDate datetime2,\r\n                                      Mirror bit)\r\n\r\n  DECLARE @Error int = 0\r\n  DECLARE @ReturnCode int = 0\r\n\r\n  DECLARE @EmptyLine nvarchar(max) = CHAR(9)\r\n\r\n  DECLARE @Version numeric(18,10) = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))) - CHARINDEX('.',CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max)))),'.','') AS numeric(18,10))\r\n\r\n  IF @Version >= 14\r\n  BEGIN\r\n    SELECT @HostPlatform = host_platform\r\n    FROM sys.dm_os_host_info\r\n  END\r\n  ELSE\r\n  BEGIN\r\n    SET @HostPlatform = 'Windows'\r\n  END\r\n\r\n  DECLARE @AmazonRDS bit = CASE WHEN DB_ID('rdsadmin') IS NOT NULL AND SUSER_SNAME(0x01) = 'rdsa' THEN 1 ELSE 0 END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Log initial information                                                                    //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @Parameters = '@Databases = ' + ISNULL('''' + REPLACE(@Databases,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Directory = ' + ISNULL('''' + REPLACE(@Directory,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @BackupType = ' + ISNULL('''' + REPLACE(@BackupType,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Verify = ' + ISNULL('''' + REPLACE(@Verify,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @CleanupTime = ' + ISNULL(CAST(@CleanupTime AS nvarchar),'NULL')\r\n  SET @Parameters += ', @CleanupMode = ' + ISNULL('''' + REPLACE(@CleanupMode,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Compress = ' + ISNULL('''' + REPLACE(@Compress,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @CopyOnly = ' + ISNULL('''' + REPLACE(@CopyOnly,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @ChangeBackupType = ' + ISNULL('''' + REPLACE(@ChangeBackupType,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @BackupSoftware = ' + ISNULL('''' + REPLACE(@BackupSoftware,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @CheckSum = ' + ISNULL('''' + REPLACE(@CheckSum,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @BlockSize = ' + ISNULL(CAST(@BlockSize AS nvarchar),'NULL')\r\n  SET @Parameters += ', @BufferCount = ' + ISNULL(CAST(@BufferCount AS nvarchar),'NULL')\r\n  SET @Parameters += ', @MaxTransferSize = ' + ISNULL(CAST(@MaxTransferSize AS nvarchar),'NULL')\r\n  SET @Parameters += ', @NumberOfFiles = ' + ISNULL(CAST(@NumberOfFiles AS nvarchar),'NULL')\r\n  SET @Parameters += ', @MinBackupSizeForMultipleFiles = ' + ISNULL(CAST(@MinBackupSizeForMultipleFiles AS nvarchar),'NULL')\r\n  SET @Parameters += ', @MaxFileSize = ' + ISNULL(CAST(@MaxFileSize AS nvarchar),'NULL')\r\n  SET @Parameters += ', @CompressionLevel = ' + ISNULL(CAST(@CompressionLevel AS nvarchar),'NULL')\r\n  SET @Parameters += ', @Description = ' + ISNULL('''' + REPLACE(@Description,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Threads = ' + ISNULL(CAST(@Threads AS nvarchar),'NULL')\r\n  SET @Parameters += ', @Throttle = ' + ISNULL(CAST(@Throttle AS nvarchar),'NULL')\r\n  SET @Parameters += ', @Encrypt = ' + ISNULL('''' + REPLACE(@Encrypt,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @EncryptionAlgorithm = ' + ISNULL('''' + REPLACE(@EncryptionAlgorithm,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @ServerCertificate = ' + ISNULL('''' + REPLACE(@ServerCertificate,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @ServerAsymmetricKey = ' + ISNULL('''' + REPLACE(@ServerAsymmetricKey,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @EncryptionKey = ' + ISNULL('''' + REPLACE(@EncryptionKey,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @ReadWriteFileGroups = ' + ISNULL('''' + REPLACE(@ReadWriteFileGroups,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @OverrideBackupPreference = ' + ISNULL('''' + REPLACE(@OverrideBackupPreference,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @NoRecovery = ' + ISNULL('''' + REPLACE(@NoRecovery,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @URL = ' + ISNULL('''' + REPLACE(@URL,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Credential = ' + ISNULL('''' + REPLACE(@Credential,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @MirrorDirectory = ' + ISNULL('''' + REPLACE(@MirrorDirectory,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @MirrorCleanupTime = ' + ISNULL(CAST(@MirrorCleanupTime AS nvarchar),'NULL')\r\n  SET @Parameters += ', @MirrorCleanupMode = ' + ISNULL('''' + REPLACE(@MirrorCleanupMode,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @MirrorURL = ' + ISNULL('''' + REPLACE(@MirrorURL,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @AvailabilityGroups = ' + ISNULL('''' + REPLACE(@AvailabilityGroups,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Updateability = ' + ISNULL('''' + REPLACE(@Updateability,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @AdaptiveCompression = ' + ISNULL('''' + REPLACE(@AdaptiveCompression,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @ModificationLevel = ' + ISNULL(CAST(@ModificationLevel AS nvarchar),'NULL')\r\n  SET @Parameters += ', @LogSizeSinceLastLogBackup = ' + ISNULL(CAST(@LogSizeSinceLastLogBackup AS nvarchar),'NULL')\r\n  SET @Parameters += ', @TimeSinceLastLogBackup = ' + ISNULL(CAST(@TimeSinceLastLogBackup AS nvarchar),'NULL')\r\n  SET @Parameters += ', @DataDomainBoostHost = ' + ISNULL('''' + REPLACE(@DataDomainBoostHost,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @DataDomainBoostUser = ' + ISNULL('''' + REPLACE(@DataDomainBoostUser,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @DataDomainBoostDevicePath = ' + ISNULL('''' + REPLACE(@DataDomainBoostDevicePath,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @DataDomainBoostLockboxPath = ' + ISNULL('''' + REPLACE(@DataDomainBoostLockboxPath,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @DirectoryStructure = ' + ISNULL('''' + REPLACE(@DirectoryStructure,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @AvailabilityGroupDirectoryStructure = ' + ISNULL('''' + REPLACE(@AvailabilityGroupDirectoryStructure,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @FileName = ' + ISNULL('''' + REPLACE(@FileName,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @AvailabilityGroupFileName = ' + ISNULL('''' + REPLACE(@AvailabilityGroupFileName,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @FileExtensionFull = ' + ISNULL('''' + REPLACE(@FileExtensionFull,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @FileExtensionDiff = ' + ISNULL('''' + REPLACE(@FileExtensionDiff,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @FileExtensionLog = ' + ISNULL('''' + REPLACE(@FileExtensionLog,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Init = ' + ISNULL('''' + REPLACE(@Init,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Format = ' + ISNULL('''' + REPLACE(@Format,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @ObjectLevelRecoveryMap = ' + ISNULL('''' + REPLACE(@ObjectLevelRecoveryMap,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @ExcludeLogShippedFromLogBackup = ' + ISNULL('''' + REPLACE(@ExcludeLogShippedFromLogBackup,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @StringDelimiter = ' + ISNULL('''' + REPLACE(@StringDelimiter,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @DatabaseOrder = ' + ISNULL('''' + REPLACE(@DatabaseOrder,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @DatabasesInParallel = ' + ISNULL('''' + REPLACE(@DatabasesInParallel,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @LogToTable = ' + ISNULL('''' + REPLACE(@LogToTable,'''','''''') + '''','NULL')\r\n  SET @Parameters += ', @Execute = ' + ISNULL('''' + REPLACE(@Execute,'''','''''') + '''','NULL')\r\n\r\n  SET @StartMessage = 'Date and time: ' + CONVERT(nvarchar,@StartTime,120)\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Server: ' + CAST(SERVERPROPERTY('ServerName') AS nvarchar(max))\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Version: ' + CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(max))\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Edition: ' + CAST(SERVERPROPERTY('Edition') AS nvarchar(max))\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Platform: ' + @HostPlatform\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Procedure: ' + QUOTENAME(DB_NAME(DB_ID())) + '.' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@ObjectName)\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Parameters: ' + @Parameters\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Version: ' + @VersionTimestamp\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  SET @StartMessage = 'Source: https://ola.hallengren.com'\r\n  RAISERROR('%s',10,1,@StartMessage) WITH NOWAIT\r\n\r\n  RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check core requirements                                                                    //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF NOT (SELECT [compatibility_level] FROM sys.databases WHERE database_id = DB_ID()) >= 90\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The database ' + QUOTENAME(DB_NAME(DB_ID())) + ' has to be in compatibility level 90 or higher.', 16, 1\r\n  END\r\n\r\n  IF NOT (SELECT uses_ansi_nulls FROM sys.sql_modules WHERE [object_id] = @@PROCID) = 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'ANSI_NULLS has to be set to ON for the stored procedure.', 16, 1\r\n  END\r\n\r\n  IF NOT (SELECT uses_quoted_identifier FROM sys.sql_modules WHERE [object_id] = @@PROCID) = 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'QUOTED_IDENTIFIER has to be set to ON for the stored procedure.', 16, 1\r\n  END\r\n\r\n  IF NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The stored procedure CommandExecute is missing. Download https://ola.hallengren.com/scripts/CommandExecute.sql.', 16, 1\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'P' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandExecute' AND OBJECT_DEFINITION(objects.[object_id]) NOT LIKE '%@DatabaseContext%')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The stored procedure CommandExecute needs to be updated. Download https://ola.hallengren.com/scripts/CommandExecute.sql.', 16, 1\r\n  END\r\n\r\n  IF @LogToTable = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'CommandLog')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The table CommandLog is missing. Download https://ola.hallengren.com/scripts/CommandLog.sql.', 16, 1\r\n  END\r\n\r\n  IF @DatabasesInParallel = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'Queue')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The table Queue is missing. Download https://ola.hallengren.com/scripts/Queue.sql.', 16, 1\r\n  END\r\n\r\n  IF @DatabasesInParallel = 'Y' AND NOT EXISTS (SELECT * FROM sys.objects objects INNER JOIN sys.schemas schemas ON objects.[schema_id] = schemas.[schema_id] WHERE objects.[type] = 'U' AND schemas.[name] = 'dbo' AND objects.[name] = 'QueueDatabase')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The table QueueDatabase is missing. Download https://ola.hallengren.com/scripts/QueueDatabase.sql.', 16, 1\r\n  END\r\n\r\n  IF @@TRANCOUNT <> 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The transaction count is not 0.', 16, 1\r\n  END\r\n\r\n  IF @AmazonRDS = 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The stored procedure DatabaseBackup is not supported on Amazon RDS.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Select databases                                                                           //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @Databases = REPLACE(@Databases, CHAR(10), '')\r\n  SET @Databases = REPLACE(@Databases, CHAR(13), '')\r\n\r\n  WHILE CHARINDEX(@StringDelimiter + ' ', @Databases) > 0 SET @Databases = REPLACE(@Databases, @StringDelimiter + ' ', @StringDelimiter)\r\n  WHILE CHARINDEX(' ' + @StringDelimiter, @Databases) > 0 SET @Databases = REPLACE(@Databases, ' ' + @StringDelimiter, @StringDelimiter)\r\n\r\n  SET @Databases = LTRIM(RTRIM(@Databases));\r\n\r\n  WITH Databases1 (StartPosition, EndPosition, DatabaseItem) AS\r\n  (\r\n  SELECT 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Databases, 1), 0), LEN(@Databases) + 1) AS EndPosition,\r\n         SUBSTRING(@Databases, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Databases, 1), 0), LEN(@Databases) + 1) - 1) AS DatabaseItem\r\n  WHERE @Databases IS NOT NULL\r\n  UNION ALL\r\n  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) AS EndPosition,\r\n         SUBSTRING(@Databases, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) - EndPosition - 1) AS DatabaseItem\r\n  FROM Databases1\r\n  WHERE EndPosition < LEN(@Databases) + 1\r\n  ),\r\n  Databases2 (DatabaseItem, StartPosition, Selected) AS\r\n  (\r\n  SELECT CASE WHEN DatabaseItem LIKE '-%' THEN RIGHT(DatabaseItem,LEN(DatabaseItem) - 1) ELSE DatabaseItem END AS DatabaseItem,\r\n         StartPosition,\r\n         CASE WHEN DatabaseItem LIKE '-%' THEN 0 ELSE 1 END AS Selected\r\n  FROM Databases1\r\n  ),\r\n  Databases3 (DatabaseItem, DatabaseType, AvailabilityGroup, StartPosition, Selected) AS\r\n  (\r\n  SELECT CASE WHEN DatabaseItem IN('ALL_DATABASES','SYSTEM_DATABASES','USER_DATABASES','AVAILABILITY_GROUP_DATABASES') THEN '%' ELSE DatabaseItem END AS DatabaseItem,\r\n         CASE WHEN DatabaseItem = 'SYSTEM_DATABASES' THEN 'S' WHEN DatabaseItem = 'USER_DATABASES' THEN 'U' ELSE NULL END AS DatabaseType,\r\n         CASE WHEN DatabaseItem = 'AVAILABILITY_GROUP_DATABASES' THEN 1 ELSE NULL END AvailabilityGroup,\r\n         StartPosition,\r\n         Selected\r\n  FROM Databases2\r\n  ),\r\n  Databases4 (DatabaseName, DatabaseType, AvailabilityGroup, StartPosition, Selected) AS\r\n  (\r\n  SELECT CASE WHEN LEFT(DatabaseItem,1) = '[' AND RIGHT(DatabaseItem,1) = ']' THEN PARSENAME(DatabaseItem,1) ELSE DatabaseItem END AS DatabaseItem,\r\n         DatabaseType,\r\n         AvailabilityGroup,\r\n         StartPosition,\r\n         Selected\r\n  FROM Databases3\r\n  )\r\n  INSERT INTO @SelectedDatabases (DatabaseName, DatabaseType, AvailabilityGroup, StartPosition, Selected)\r\n  SELECT DatabaseName,\r\n         DatabaseType,\r\n         AvailabilityGroup,\r\n         StartPosition,\r\n         Selected\r\n  FROM Databases4\r\n  OPTION (MAXRECURSION 0)\r\n\r\n  IF @Version >= 11 AND SERVERPROPERTY('IsHadrEnabled') = 1\r\n  BEGIN\r\n    INSERT INTO @tmpAvailabilityGroups (AvailabilityGroupName, Selected)\r\n    SELECT name AS AvailabilityGroupName,\r\n           0 AS Selected\r\n    FROM sys.availability_groups\r\n\r\n    INSERT INTO @tmpDatabasesAvailabilityGroups (DatabaseName, AvailabilityGroupName)\r\n    SELECT databases.name,\r\n           availability_groups.name\r\n    FROM sys.databases databases\r\n    INNER JOIN sys.availability_replicas availability_replicas ON databases.replica_id = availability_replicas.replica_id\r\n    INNER JOIN sys.availability_groups availability_groups ON availability_replicas.group_id = availability_groups.group_id\r\n  END\r\n\r\n  INSERT INTO @tmpDatabases (DatabaseName, DatabaseNameFS, DatabaseType, AvailabilityGroup, [Order], Selected, Completed)\r\n  SELECT [name] AS DatabaseName,\r\n         RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE([name],'\\',''),'/',''),':',''),'*',''),'?',''),'\"',''),'<',''),'>',''),'|','')) AS DatabaseNameFS,\r\n         CASE WHEN name IN('master','msdb','model') OR is_distributor = 1 THEN 'S' ELSE 'U' END AS DatabaseType,\r\n         NULL AS AvailabilityGroup,\r\n         0 AS [Order],\r\n         0 AS Selected,\r\n         0 AS Completed\r\n  FROM sys.databases\r\n  WHERE [name] <> 'tempdb'\r\n  AND source_database_id IS NULL\r\n  ORDER BY [name] ASC\r\n\r\n  UPDATE tmpDatabases\r\n  SET AvailabilityGroup = CASE WHEN EXISTS (SELECT * FROM @tmpDatabasesAvailabilityGroups WHERE DatabaseName = tmpDatabases.DatabaseName) THEN 1 ELSE 0 END\r\n  FROM @tmpDatabases tmpDatabases\r\n\r\n  UPDATE tmpDatabases\r\n  SET tmpDatabases.Selected = SelectedDatabases.Selected\r\n  FROM @tmpDatabases tmpDatabases\r\n  INNER JOIN @SelectedDatabases SelectedDatabases\r\n  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')\r\n  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)\r\n  AND (tmpDatabases.AvailabilityGroup = SelectedDatabases.AvailabilityGroup OR SelectedDatabases.AvailabilityGroup IS NULL)\r\n  WHERE SelectedDatabases.Selected = 1\r\n\r\n  UPDATE tmpDatabases\r\n  SET tmpDatabases.Selected = SelectedDatabases.Selected\r\n  FROM @tmpDatabases tmpDatabases\r\n  INNER JOIN @SelectedDatabases SelectedDatabases\r\n  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')\r\n  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)\r\n  AND (tmpDatabases.AvailabilityGroup = SelectedDatabases.AvailabilityGroup OR SelectedDatabases.AvailabilityGroup IS NULL)\r\n  WHERE SelectedDatabases.Selected = 0\r\n\r\n  UPDATE tmpDatabases\r\n  SET tmpDatabases.StartPosition = SelectedDatabases2.StartPosition\r\n  FROM @tmpDatabases tmpDatabases\r\n  INNER JOIN (SELECT tmpDatabases.DatabaseName, MIN(SelectedDatabases.StartPosition) AS StartPosition\r\n              FROM @tmpDatabases tmpDatabases\r\n              INNER JOIN @SelectedDatabases SelectedDatabases\r\n              ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')\r\n              AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)\r\n              AND (tmpDatabases.AvailabilityGroup = SelectedDatabases.AvailabilityGroup OR SelectedDatabases.AvailabilityGroup IS NULL)\r\n              WHERE SelectedDatabases.Selected = 1\r\n              GROUP BY tmpDatabases.DatabaseName) SelectedDatabases2\r\n  ON tmpDatabases.DatabaseName = SelectedDatabases2.DatabaseName\r\n\r\n  IF @Databases IS NOT NULL AND (NOT EXISTS(SELECT * FROM @SelectedDatabases) OR EXISTS(SELECT * FROM @SelectedDatabases WHERE DatabaseName IS NULL OR DatabaseName = ''))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Databases is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Select availability groups                                                                 //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @AvailabilityGroups IS NOT NULL AND @Version >= 11 AND SERVERPROPERTY('IsHadrEnabled') = 1\r\n  BEGIN\r\n\r\n    SET @AvailabilityGroups = REPLACE(@AvailabilityGroups, CHAR(10), '')\r\n    SET @AvailabilityGroups = REPLACE(@AvailabilityGroups, CHAR(13), '')\r\n\r\n    WHILE CHARINDEX(@StringDelimiter + ' ', @AvailabilityGroups) > 0 SET @AvailabilityGroups = REPLACE(@AvailabilityGroups, @StringDelimiter + ' ', @StringDelimiter)\r\n    WHILE CHARINDEX(' ' + @StringDelimiter, @AvailabilityGroups) > 0 SET @AvailabilityGroups = REPLACE(@AvailabilityGroups, ' ' + @StringDelimiter, @StringDelimiter)\r\n\r\n    SET @AvailabilityGroups = LTRIM(RTRIM(@AvailabilityGroups));\r\n\r\n    WITH AvailabilityGroups1 (StartPosition, EndPosition, AvailabilityGroupItem) AS\r\n    (\r\n    SELECT 1 AS StartPosition,\r\n           ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @AvailabilityGroups, 1), 0), LEN(@AvailabilityGroups) + 1) AS EndPosition,\r\n           SUBSTRING(@AvailabilityGroups, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @AvailabilityGroups, 1), 0), LEN(@AvailabilityGroups) + 1) - 1) AS AvailabilityGroupItem\r\n    WHERE @AvailabilityGroups IS NOT NULL\r\n    UNION ALL\r\n    SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n           ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @AvailabilityGroups, EndPosition + 1), 0), LEN(@AvailabilityGroups) + 1) AS EndPosition,\r\n           SUBSTRING(@AvailabilityGroups, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @AvailabilityGroups, EndPosition + 1), 0), LEN(@AvailabilityGroups) + 1) - EndPosition - 1) AS AvailabilityGroupItem\r\n    FROM AvailabilityGroups1\r\n    WHERE EndPosition < LEN(@AvailabilityGroups) + 1\r\n    ),\r\n    AvailabilityGroups2 (AvailabilityGroupItem, StartPosition, Selected) AS\r\n    (\r\n    SELECT CASE WHEN AvailabilityGroupItem LIKE '-%' THEN RIGHT(AvailabilityGroupItem,LEN(AvailabilityGroupItem) - 1) ELSE AvailabilityGroupItem END AS AvailabilityGroupItem,\r\n           StartPosition,\r\n           CASE WHEN AvailabilityGroupItem LIKE '-%' THEN 0 ELSE 1 END AS Selected\r\n    FROM AvailabilityGroups1\r\n    ),\r\n    AvailabilityGroups3 (AvailabilityGroupItem, StartPosition, Selected) AS\r\n    (\r\n    SELECT CASE WHEN AvailabilityGroupItem = 'ALL_AVAILABILITY_GROUPS' THEN '%' ELSE AvailabilityGroupItem END AS AvailabilityGroupItem,\r\n           StartPosition,\r\n           Selected\r\n    FROM AvailabilityGroups2\r\n    ),\r\n    AvailabilityGroups4 (AvailabilityGroupName, StartPosition, Selected) AS\r\n    (\r\n    SELECT CASE WHEN LEFT(AvailabilityGroupItem,1) = '[' AND RIGHT(AvailabilityGroupItem,1) = ']' THEN PARSENAME(AvailabilityGroupItem,1) ELSE AvailabilityGroupItem END AS AvailabilityGroupItem,\r\n           StartPosition,\r\n           Selected\r\n    FROM AvailabilityGroups3\r\n    )\r\n    INSERT INTO @SelectedAvailabilityGroups (AvailabilityGroupName, StartPosition, Selected)\r\n    SELECT AvailabilityGroupName, StartPosition, Selected\r\n    FROM AvailabilityGroups4\r\n    OPTION (MAXRECURSION 0)\r\n\r\n    UPDATE tmpAvailabilityGroups\r\n    SET tmpAvailabilityGroups.Selected = SelectedAvailabilityGroups.Selected\r\n    FROM @tmpAvailabilityGroups tmpAvailabilityGroups\r\n    INNER JOIN @SelectedAvailabilityGroups SelectedAvailabilityGroups\r\n    ON tmpAvailabilityGroups.AvailabilityGroupName LIKE REPLACE(SelectedAvailabilityGroups.AvailabilityGroupName,'_','[_]')\r\n    WHERE SelectedAvailabilityGroups.Selected = 1\r\n\r\n    UPDATE tmpAvailabilityGroups\r\n    SET tmpAvailabilityGroups.Selected = SelectedAvailabilityGroups.Selected\r\n    FROM @tmpAvailabilityGroups tmpAvailabilityGroups\r\n    INNER JOIN @SelectedAvailabilityGroups SelectedAvailabilityGroups\r\n    ON tmpAvailabilityGroups.AvailabilityGroupName LIKE REPLACE(SelectedAvailabilityGroups.AvailabilityGroupName,'_','[_]')\r\n    WHERE SelectedAvailabilityGroups.Selected = 0\r\n\r\n    UPDATE tmpAvailabilityGroups\r\n    SET tmpAvailabilityGroups.StartPosition = SelectedAvailabilityGroups2.StartPosition\r\n    FROM @tmpAvailabilityGroups tmpAvailabilityGroups\r\n    INNER JOIN (SELECT tmpAvailabilityGroups.AvailabilityGroupName, MIN(SelectedAvailabilityGroups.StartPosition) AS StartPosition\r\n                FROM @tmpAvailabilityGroups tmpAvailabilityGroups\r\n                INNER JOIN @SelectedAvailabilityGroups SelectedAvailabilityGroups\r\n                ON tmpAvailabilityGroups.AvailabilityGroupName LIKE REPLACE(SelectedAvailabilityGroups.AvailabilityGroupName,'_','[_]')\r\n                WHERE SelectedAvailabilityGroups.Selected = 1\r\n                GROUP BY tmpAvailabilityGroups.AvailabilityGroupName) SelectedAvailabilityGroups2\r\n    ON tmpAvailabilityGroups.AvailabilityGroupName = SelectedAvailabilityGroups2.AvailabilityGroupName\r\n\r\n    UPDATE tmpDatabases\r\n    SET tmpDatabases.StartPosition = tmpAvailabilityGroups.StartPosition,\r\n        tmpDatabases.Selected = 1\r\n    FROM @tmpDatabases tmpDatabases\r\n    INNER JOIN @tmpDatabasesAvailabilityGroups tmpDatabasesAvailabilityGroups ON tmpDatabases.DatabaseName = tmpDatabasesAvailabilityGroups.DatabaseName\r\n    INNER JOIN @tmpAvailabilityGroups tmpAvailabilityGroups ON tmpDatabasesAvailabilityGroups.AvailabilityGroupName = tmpAvailabilityGroups.AvailabilityGroupName\r\n    WHERE tmpAvailabilityGroups.Selected = 1\r\n\r\n  END\r\n\r\n  IF @AvailabilityGroups IS NOT NULL AND (NOT EXISTS(SELECT * FROM @SelectedAvailabilityGroups) OR EXISTS(SELECT * FROM @SelectedAvailabilityGroups WHERE AvailabilityGroupName IS NULL OR AvailabilityGroupName = '') OR @Version < 11 OR SERVERPROPERTY('IsHadrEnabled') = 0)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AvailabilityGroups is not supported.', 16, 1\r\n  END\r\n\r\n  IF (@Databases IS NULL AND @AvailabilityGroups IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'You need to specify one of the parameters @Databases and @AvailabilityGroups.', 16, 2\r\n  END\r\n\r\n  IF (@Databases IS NOT NULL AND @AvailabilityGroups IS NOT NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'You can only specify one of the parameters @Databases and @AvailabilityGroups.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check database names                                                                       //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @ErrorMessage = ''\r\n  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '\r\n  FROM @tmpDatabases\r\n  WHERE Selected = 1\r\n  AND DatabaseNameFS = ''\r\n  ORDER BY DatabaseName ASC\r\n  IF @@ROWCOUNT > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The names of the following databases are not supported: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.', 16, 1\r\n  END\r\n\r\n  SET @ErrorMessage = ''\r\n  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '\r\n  FROM @tmpDatabases\r\n  WHERE UPPER(DatabaseNameFS) IN(SELECT UPPER(DatabaseNameFS) FROM @tmpDatabases GROUP BY UPPER(DatabaseNameFS) HAVING COUNT(*) > 1)\r\n  AND UPPER(DatabaseNameFS) IN(SELECT UPPER(DatabaseNameFS) FROM @tmpDatabases WHERE Selected = 1)\r\n  AND DatabaseNameFS <> ''\r\n  ORDER BY DatabaseName ASC\r\n  OPTION (RECOMPILE)\r\n  IF @@ROWCOUNT > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The names of the following databases are not unique in the file system: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Select default directory                                                                      //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Directory IS NULL AND @URL IS NULL AND (@BackupSoftware <> 'DATA_DOMAIN_BOOST' OR @BackupSoftware IS NULL)\r\n  BEGIN\r\n    IF @Version >= 15\r\n    BEGIN\r\n      SET @DefaultDirectory = CAST(SERVERPROPERTY('InstanceDefaultBackupPath') AS nvarchar(max))\r\n    END\r\n    ELSE\r\n    BEGIN\r\n      EXECUTE [master].dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'SOFTWARE\\Microsoft\\MSSQLServer\\MSSQLServer', N'BackupDirectory', @DefaultDirectory OUTPUT\r\n    END\r\n\r\n    IF @DefaultDirectory LIKE 'http://%' OR @DefaultDirectory LIKE 'https://%'\r\n    BEGIN\r\n      SET @URL = @DefaultDirectory\r\n    END\r\n    ELSE\r\n    BEGIN\r\n      INSERT INTO @Directories (ID, DirectoryPath, Mirror, Completed)\r\n      SELECT 1, @DefaultDirectory, 0, 0\r\n    END\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Select directories                                                                         //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @Directory = REPLACE(@Directory, CHAR(10), '')\r\n  SET @Directory = REPLACE(@Directory, CHAR(13), '')\r\n\r\n  WHILE CHARINDEX(@StringDelimiter + ' ', @Directory) > 0 SET @Directory = REPLACE(@Directory, @StringDelimiter + ' ', @StringDelimiter)\r\n  WHILE CHARINDEX(' ' + @StringDelimiter, @Directory) > 0 SET @Directory = REPLACE(@Directory, ' ' + @StringDelimiter, @StringDelimiter)\r\n\r\n  SET @Directory = LTRIM(RTRIM(@Directory));\r\n\r\n  WITH Directories (StartPosition, EndPosition, Directory) AS\r\n  (\r\n  SELECT 1 AS StartPosition,\r\n          ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Directory, 1), 0), LEN(@Directory) + 1) AS EndPosition,\r\n          SUBSTRING(@Directory, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Directory, 1), 0), LEN(@Directory) + 1) - 1) AS Directory\r\n  WHERE @Directory IS NOT NULL\r\n  UNION ALL\r\n  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n          ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Directory, EndPosition + 1), 0), LEN(@Directory) + 1) AS EndPosition,\r\n          SUBSTRING(@Directory, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @Directory, EndPosition + 1), 0), LEN(@Directory) + 1) - EndPosition - 1) AS Directory\r\n  FROM Directories\r\n  WHERE EndPosition < LEN(@Directory) + 1\r\n  )\r\n  INSERT INTO @Directories (ID, DirectoryPath, Mirror, Completed)\r\n  SELECT ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS ID,\r\n          Directory,\r\n          0,\r\n          0\r\n  FROM Directories\r\n  OPTION (MAXRECURSION 0)\r\n\r\n  SET @MirrorDirectory = REPLACE(@MirrorDirectory, CHAR(10), '')\r\n  SET @MirrorDirectory = REPLACE(@MirrorDirectory, CHAR(13), '')\r\n\r\n  WHILE CHARINDEX(', ',@MirrorDirectory) > 0 SET @MirrorDirectory = REPLACE(@MirrorDirectory,', ',',')\r\n  WHILE CHARINDEX(' ,',@MirrorDirectory) > 0 SET @MirrorDirectory = REPLACE(@MirrorDirectory,' ,',',')\r\n\r\n  SET @MirrorDirectory = LTRIM(RTRIM(@MirrorDirectory));\r\n\r\n  WITH Directories (StartPosition, EndPosition, Directory) AS\r\n  (\r\n  SELECT 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @MirrorDirectory, 1), 0), LEN(@MirrorDirectory) + 1) AS EndPosition,\r\n         SUBSTRING(@MirrorDirectory, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @MirrorDirectory, 1), 0), LEN(@MirrorDirectory) + 1) - 1) AS Directory\r\n  WHERE @MirrorDirectory IS NOT NULL\r\n  UNION ALL\r\n  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @MirrorDirectory, EndPosition + 1), 0), LEN(@MirrorDirectory) + 1) AS EndPosition,\r\n         SUBSTRING(@MirrorDirectory, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @MirrorDirectory, EndPosition + 1), 0), LEN(@MirrorDirectory) + 1) - EndPosition - 1) AS Directory\r\n  FROM Directories\r\n  WHERE EndPosition < LEN(@MirrorDirectory) + 1\r\n  )\r\n  INSERT INTO @Directories (ID, DirectoryPath, Mirror, Completed)\r\n  SELECT (SELECT COUNT(*) FROM @Directories) + ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS ID,\r\n         Directory,\r\n         1,\r\n         0\r\n  FROM Directories\r\n  OPTION (MAXRECURSION 0)\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check directories                                                                          //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS (SELECT * FROM @Directories WHERE Mirror = 0 AND (NOT (DirectoryPath LIKE '_:' OR DirectoryPath LIKE '_:\\%' OR DirectoryPath LIKE '\\\\%\\%' OR (DirectoryPath LIKE '/%/%' AND @HostPlatform = 'Linux') OR DirectoryPath = 'NUL') OR DirectoryPath IS NULL OR LEFT(DirectoryPath,1) = ' ' OR RIGHT(DirectoryPath,1) = ' '))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Directory is not supported.', 16, 1\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM @Directories GROUP BY DirectoryPath HAVING COUNT(*) <> 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Directory is not supported.', 16, 2\r\n  END\r\n\r\n  IF (SELECT COUNT(*) FROM @Directories WHERE Mirror = 0) <> (SELECT COUNT(*) FROM @Directories WHERE Mirror = 1) AND (SELECT COUNT(*) FROM @Directories WHERE Mirror = 1) > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Directory is not supported.', 16, 3\r\n  END\r\n\r\n  IF (@Directory IS NOT NULL AND SERVERPROPERTY('EngineEdition') = 8) OR (@Directory IS NOT NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Directory is not supported.', 16, 4\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM @Directories WHERE Mirror = 0 AND DirectoryPath = 'NUL') AND EXISTS(SELECT * FROM @Directories WHERE Mirror = 0 AND DirectoryPath <> 'NUL')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Directory is not supported.', 16, 5\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM @Directories WHERE Mirror = 0 AND DirectoryPath = 'NUL') AND EXISTS(SELECT * FROM @Directories WHERE Mirror = 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Directory is not supported.', 16, 6\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS(SELECT * FROM @Directories WHERE Mirror = 1 AND (NOT (DirectoryPath LIKE '_:' OR DirectoryPath LIKE '_:\\%' OR DirectoryPath LIKE '\\\\%\\%' OR (DirectoryPath LIKE '/%/%' AND @HostPlatform = 'Linux')) OR DirectoryPath IS NULL OR LEFT(DirectoryPath,1) = ' ' OR RIGHT(DirectoryPath,1) = ' '))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorDirectory is not supported.', 16, 1\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM @Directories GROUP BY DirectoryPath HAVING COUNT(*) <> 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorDirectory is not supported.', 16, 2\r\n  END\r\n\r\n  IF (SELECT COUNT(*) FROM @Directories WHERE Mirror = 0) <> (SELECT COUNT(*) FROM @Directories WHERE Mirror = 1) AND (SELECT COUNT(*) FROM @Directories WHERE Mirror = 1) > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorDirectory is not supported.', 16, 3\r\n  END\r\n\r\n  IF @BackupSoftware IN('SQLBACKUP','SQLSAFE') AND (SELECT COUNT(*) FROM @Directories WHERE Mirror = 1) > 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorDirectory is not supported.', 16, 4\r\n  END\r\n\r\n  IF @MirrorDirectory IS NOT NULL AND SERVERPROPERTY('EngineEdition') = 8\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorDirectory is not supported.', 16, 5\r\n  END\r\n\r\n  IF @MirrorDirectory IS NOT NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorDirectory is not supported.', 16, 6\r\n  END\r\n\r\n  IF EXISTS(SELECT * FROM @Directories WHERE Mirror = 0 AND DirectoryPath = 'NUL') AND EXISTS(SELECT * FROM @Directories WHERE Mirror = 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorDirectory is not supported.', 16, 7\r\n  END\r\n\r\n  IF (@BackupSoftware IS NULL AND EXISTS(SELECT * FROM @Directories WHERE Mirror = 1) AND SERVERPROPERTY('EngineEdition') <> 3)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorDirectory is not supported. Mirrored backup to disk is only available in Enterprise and Developer Edition.', 16, 8\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF NOT EXISTS (SELECT * FROM @Errors WHERE Severity >= 16)\r\n  BEGIN\r\n    WHILE (1 = 1)\r\n    BEGIN\r\n      SELECT TOP 1 @CurrentRootDirectoryID = ID,\r\n                   @CurrentRootDirectoryPath = DirectoryPath\r\n      FROM @Directories\r\n      WHERE Completed = 0\r\n      AND DirectoryPath <> 'NUL'\r\n      ORDER BY ID ASC\r\n\r\n      IF @@ROWCOUNT = 0\r\n      BEGIN\r\n        BREAK\r\n      END\r\n\r\n      INSERT INTO @DirectoryInfo (FileExists, FileIsADirectory, ParentDirectoryExists)\r\n      EXECUTE [master].dbo.xp_fileexist @CurrentRootDirectoryPath\r\n\r\n      IF NOT EXISTS (SELECT * FROM @DirectoryInfo WHERE FileExists = 0 AND FileIsADirectory = 1 AND ParentDirectoryExists = 1)\r\n      BEGIN\r\n        INSERT INTO @Errors ([Message], Severity, [State])\r\n        SELECT 'The directory ' + @CurrentRootDirectoryPath + ' does not exist.', 16, 1\r\n      END\r\n\r\n      UPDATE @Directories\r\n      SET Completed = 1\r\n      WHERE ID = @CurrentRootDirectoryID\r\n\r\n      SET @CurrentRootDirectoryID = NULL\r\n      SET @CurrentRootDirectoryPath = NULL\r\n\r\n      DELETE FROM @DirectoryInfo\r\n    END\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Select URLs                                                                                //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @URL = REPLACE(@URL, CHAR(10), '')\r\n  SET @URL = REPLACE(@URL, CHAR(13), '')\r\n\r\n  WHILE CHARINDEX(@StringDelimiter + ' ', @URL) > 0 SET @URL = REPLACE(@URL, @StringDelimiter + ' ', @StringDelimiter)\r\n  WHILE CHARINDEX(' ' + @StringDelimiter, @URL) > 0 SET @URL = REPLACE(@URL, ' ' + @StringDelimiter, @StringDelimiter)\r\n\r\n  SET @URL = LTRIM(RTRIM(@URL));\r\n\r\n  WITH URLs (StartPosition, EndPosition, [URL]) AS\r\n  (\r\n  SELECT 1 AS StartPosition,\r\n          ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @URL, 1), 0), LEN(@URL) + 1) AS EndPosition,\r\n          SUBSTRING(@URL, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @URL, 1), 0), LEN(@URL) + 1) - 1) AS [URL]\r\n  WHERE @URL IS NOT NULL\r\n  UNION ALL\r\n  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n          ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @URL, EndPosition + 1), 0), LEN(@URL) + 1) AS EndPosition,\r\n          SUBSTRING(@URL, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @URL, EndPosition + 1), 0), LEN(@URL) + 1) - EndPosition - 1) AS [URL]\r\n  FROM URLs\r\n  WHERE EndPosition < LEN(@URL) + 1\r\n  )\r\n  INSERT INTO @URLs (ID, DirectoryPath, Mirror)\r\n  SELECT ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS ID,\r\n          [URL],\r\n          0\r\n  FROM URLs\r\n  OPTION (MAXRECURSION 0)\r\n\r\n  SET @MirrorURL = REPLACE(@MirrorURL, CHAR(10), '')\r\n  SET @MirrorURL = REPLACE(@MirrorURL, CHAR(13), '')\r\n\r\n  WHILE CHARINDEX(@StringDelimiter + ' ', @MirrorURL) > 0 SET @MirrorURL = REPLACE(@MirrorURL, @StringDelimiter + ' ', @StringDelimiter)\r\n  WHILE CHARINDEX(' ' + @StringDelimiter ,@MirrorURL) > 0 SET @MirrorURL = REPLACE(@MirrorURL, ' ' + @StringDelimiter, @StringDelimiter)\r\n\r\n  SET @MirrorURL = LTRIM(RTRIM(@MirrorURL));\r\n\r\n  WITH URLs (StartPosition, EndPosition, [URL]) AS\r\n  (\r\n  SELECT 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @MirrorURL, 1), 0), LEN(@MirrorURL) + 1) AS EndPosition,\r\n         SUBSTRING(@MirrorURL, 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @MirrorURL, 1), 0), LEN(@MirrorURL) + 1) - 1) AS [URL]\r\n  WHERE @MirrorURL IS NOT NULL\r\n  UNION ALL\r\n  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,\r\n         ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @MirrorURL, EndPosition + 1), 0), LEN(@MirrorURL) + 1) AS EndPosition,\r\n         SUBSTRING(@MirrorURL, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(@StringDelimiter, @MirrorURL, EndPosition + 1), 0), LEN(@MirrorURL) + 1) - EndPosition - 1) AS [URL]\r\n  FROM URLs\r\n  WHERE EndPosition < LEN(@MirrorURL) + 1\r\n  )\r\n  INSERT INTO @URLs (ID, DirectoryPath, Mirror)\r\n  SELECT (SELECT COUNT(*) FROM @URLs) + ROW_NUMBER() OVER(ORDER BY StartPosition ASC) AS ID,\r\n         [URL],\r\n         1\r\n  FROM URLs\r\n  OPTION (MAXRECURSION 0)\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check URLs                                                                          //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS(SELECT * FROM @URLs WHERE Mirror = 0 AND DirectoryPath NOT LIKE 'https://%/%')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @URL is not supported.', 16, 1\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM @URLs GROUP BY DirectoryPath HAVING COUNT(*) <> 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @URL is not supported.', 16, 2\r\n  END\r\n\r\n  IF (SELECT COUNT(*) FROM @URLs WHERE Mirror = 0) <> (SELECT COUNT(*) FROM @URLs WHERE Mirror = 1) AND (SELECT COUNT(*) FROM @URLs WHERE Mirror = 1) > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @URL is not supported.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS(SELECT * FROM @URLs WHERE Mirror = 1 AND DirectoryPath NOT LIKE 'https://%/%')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorURL is not supported.', 16, 1\r\n  END\r\n\r\n  IF EXISTS (SELECT * FROM @URLs GROUP BY DirectoryPath HAVING COUNT(*) <> 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorURL is not supported.', 16, 2\r\n  END\r\n\r\n  IF (SELECT COUNT(*) FROM @URLs WHERE Mirror = 0) <> (SELECT COUNT(*) FROM @URLs WHERE Mirror = 1) AND (SELECT COUNT(*) FROM @URLs WHERE Mirror = 1) > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorURL is not supported.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Get directory separator                                                                   //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SELECT @DirectorySeparator = CASE\r\n  WHEN @URL IS NOT NULL THEN '/'\r\n  WHEN @HostPlatform = 'Windows' THEN '\\'\r\n  WHEN @HostPlatform = 'Linux' THEN '/'\r\n  END\r\n\r\n  UPDATE @Directories\r\n  SET DirectoryPath = LEFT(DirectoryPath,LEN(DirectoryPath) - 1)\r\n  WHERE RIGHT(DirectoryPath,1) = @DirectorySeparator\r\n\r\n  UPDATE @URLs\r\n  SET DirectoryPath = LEFT(DirectoryPath,LEN(DirectoryPath) - 1)\r\n  WHERE RIGHT(DirectoryPath,1) = @DirectorySeparator\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Get file extension                                                                         //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @FileExtensionFull IS NULL\r\n  BEGIN\r\n    SELECT @FileExtensionFull = CASE\r\n    WHEN @BackupSoftware IS NULL THEN 'bak'\r\n    WHEN @BackupSoftware = 'LITESPEED' THEN 'bak'\r\n    WHEN @BackupSoftware = 'SQLBACKUP' THEN 'sqb'\r\n    WHEN @BackupSoftware = 'SQLSAFE' THEN 'safe'\r\n    END\r\n  END\r\n\r\n  IF @FileExtensionDiff IS NULL\r\n  BEGIN\r\n    SELECT @FileExtensionDiff = CASE\r\n    WHEN @BackupSoftware IS NULL THEN 'bak'\r\n    WHEN @BackupSoftware = 'LITESPEED' THEN 'bak'\r\n    WHEN @BackupSoftware = 'SQLBACKUP' THEN 'sqb'\r\n    WHEN @BackupSoftware = 'SQLSAFE' THEN 'safe'\r\n    END\r\n  END\r\n\r\n  IF @FileExtensionLog IS NULL\r\n  BEGIN\r\n    SELECT @FileExtensionLog = CASE\r\n    WHEN @BackupSoftware IS NULL THEN 'trn'\r\n    WHEN @BackupSoftware = 'LITESPEED' THEN 'trn'\r\n    WHEN @BackupSoftware = 'SQLBACKUP' THEN 'sqb'\r\n    WHEN @BackupSoftware = 'SQLSAFE' THEN 'safe'\r\n    END\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Get default compression                                                                    //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Compress IS NULL\r\n  BEGIN\r\n    SELECT @Compress = CASE WHEN @BackupSoftware IS NULL AND EXISTS(SELECT * FROM sys.configurations WHERE name = 'backup compression default' AND value_in_use = 1) THEN 'Y'\r\n                            WHEN @BackupSoftware IS NULL AND NOT EXISTS(SELECT * FROM sys.configurations WHERE name = 'backup compression default' AND value_in_use = 1) THEN 'N'\r\n                            WHEN @BackupSoftware IS NOT NULL AND (@CompressionLevel IS NULL OR @CompressionLevel > 0)  THEN 'Y'\r\n                            WHEN @BackupSoftware IS NOT NULL AND @CompressionLevel = 0  THEN 'N' END\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check input parameters                                                                     //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @BackupType NOT IN ('FULL','DIFF','LOG') OR @BackupType IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BackupType is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF SERVERPROPERTY('EngineEdition') = 8 AND NOT (@BackupType = 'FULL' AND @CopyOnly = 'Y')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'SQL Database Managed Instance only supports COPY_ONLY full backups.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Verify NOT IN ('Y','N') OR @Verify IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Verify is not supported.', 16, 1\r\n  END\r\n\r\n  IF @BackupSoftware = 'SQLSAFE' AND @Encrypt = 'Y' AND @Verify = 'Y'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Verify is not supported. Verify is not supported with encrypted backups with Idera SQL Safe Backup', 16, 2\r\n  END\r\n\r\n  IF @Verify = 'Y' AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Verify is not supported. Verify is not supported with Data Domain Boost', 16, 3\r\n  END\r\n\r\n  IF @Verify = 'Y' AND EXISTS(SELECT * FROM @Directories WHERE DirectoryPath = 'NUL')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Verify is not supported. Verify is not supported when backing up to NUL.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @CleanupTime < 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CleanupTime is not supported.', 16, 1\r\n  END\r\n\r\n  IF @CleanupTime IS NOT NULL AND @URL IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CleanupTime is not supported. Cleanup is not supported on Azure Blob Storage.', 16, 2\r\n  END\r\n\r\n  IF @CleanupTime IS NOT NULL AND EXISTS(SELECT * FROM @Directories WHERE DirectoryPath = 'NUL')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CleanupTime is not supported. Cleanup is not supported when backing up to NUL.', 16, 4\r\n  END\r\n\r\n  IF @CleanupTime IS NOT NULL AND ((@DirectoryStructure NOT LIKE '%{DatabaseName}%' OR @DirectoryStructure IS NULL) OR (SERVERPROPERTY('IsHadrEnabled') = 1 AND (@AvailabilityGroupDirectoryStructure NOT LIKE '%{DatabaseName}%' OR @AvailabilityGroupDirectoryStructure IS NULL)))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CleanupTime is not supported. Cleanup is not supported if the token {DatabaseName} is not part of the directory.', 16, 5\r\n  END\r\n\r\n  IF @CleanupTime IS NOT NULL AND ((@DirectoryStructure NOT LIKE '%{BackupType}%' OR @DirectoryStructure IS NULL) OR (SERVERPROPERTY('IsHadrEnabled') = 1 AND (@AvailabilityGroupDirectoryStructure NOT LIKE '%{BackupType}%' OR @AvailabilityGroupDirectoryStructure IS NULL)))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CleanupTime is not supported. Cleanup is not supported if the token {BackupType} is not part of the directory.', 16, 6\r\n  END\r\n\r\n  IF @CleanupTime IS NOT NULL AND @CopyOnly = 'Y' AND ((@DirectoryStructure NOT LIKE '%{CopyOnly}%' OR @DirectoryStructure IS NULL) OR (SERVERPROPERTY('IsHadrEnabled') = 1 AND (@AvailabilityGroupDirectoryStructure NOT LIKE '%{CopyOnly}%' OR @AvailabilityGroupDirectoryStructure IS NULL)))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CleanupTime is not supported. Cleanup is not supported if the token {CopyOnly} is not part of the directory.', 16, 7\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @CleanupMode NOT IN('BEFORE_BACKUP','AFTER_BACKUP') OR @CleanupMode IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CleanupMode is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Compress NOT IN ('Y','N') OR @Compress IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Compress is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Compress = 'Y' AND @BackupSoftware IS NULL AND NOT ((@Version >= 10 AND @Version < 10.5 AND SERVERPROPERTY('EngineEdition') = 3) OR (@Version >= 10.5 AND (SERVERPROPERTY('EngineEdition') IN (3, 8) OR SERVERPROPERTY('EditionID') IN (-1534726760, 284895786))))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Compress is not supported.', 16, 2\r\n  END\r\n\r\n  IF @Compress = 'N' AND @BackupSoftware IN ('LITESPEED','SQLBACKUP','SQLSAFE') AND (@CompressionLevel IS NULL OR @CompressionLevel >= 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Compress is not supported.', 16, 3\r\n  END\r\n\r\n  IF @Compress = 'Y' AND @BackupSoftware IN ('LITESPEED','SQLBACKUP','SQLSAFE') AND @CompressionLevel = 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Compress is not supported.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @CopyOnly NOT IN ('Y','N') OR @CopyOnly IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CopyOnly is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @ChangeBackupType NOT IN ('Y','N') OR @ChangeBackupType IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ChangeBackupType is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @BackupSoftware NOT IN ('LITESPEED','SQLBACKUP','SQLSAFE','DATA_DOMAIN_BOOST')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BackupSoftware is not supported.', 16, 1\r\n  END\r\n\r\n  IF @BackupSoftware IS NOT NULL AND @HostPlatform = 'Linux'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BackupSoftware is not supported. Only native backups are supported on Linux', 16, 2\r\n  END\r\n\r\n  IF @BackupSoftware = 'LITESPEED' AND NOT EXISTS (SELECT * FROM [master].sys.objects WHERE [type] = 'X' AND [name] = 'xp_backup_database')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'LiteSpeed for SQL Server is not installed. Download https://www.quest.com/products/litespeed-for-sql-server/.', 16, 3\r\n  END\r\n\r\n  IF @BackupSoftware = 'SQLBACKUP' AND NOT EXISTS (SELECT * FROM [master].sys.objects WHERE [type] = 'X' AND [name] = 'sqlbackup')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'Red Gate SQL Backup Pro is not installed. Download https://www.red-gate.com/products/dba/sql-backup/.', 16, 4\r\n  END\r\n\r\n  IF @BackupSoftware = 'SQLSAFE' AND NOT EXISTS (SELECT * FROM [master].sys.objects WHERE [type] = 'X' AND [name] = 'xp_ss_backup')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'Idera SQL Safe Backup is not installed. Download https://www.idera.com/productssolutions/sqlserver/sqlsafebackup.', 16, 5\r\n  END\r\n\r\n  IF @BackupSoftware = 'DATA_DOMAIN_BOOST' AND NOT EXISTS (SELECT * FROM [master].sys.objects WHERE [type] = 'PC' AND [name] = 'emc_run_backup')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'EMC Data Domain Boost is not installed. Download https://www.emc.com/en-us/data-protection/data-domain.htm.', 16, 6\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @CheckSum NOT IN ('Y','N') OR @CheckSum IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CheckSum is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @BlockSize NOT IN (512,1024,2048,4096,8192,16384,32768,65536)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BlockSize is not supported.', 16, 1\r\n  END\r\n\r\n  IF @BlockSize IS NOT NULL AND @BackupSoftware = 'SQLBACKUP'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BlockSize is not supported. This parameter is not supported with Redgate SQL Backup Pro', 16, 2\r\n  END\r\n\r\n  IF @BlockSize IS NOT NULL AND @BackupSoftware = 'SQLSAFE'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BlockSize is not supported. This parameter is not supported with Idera SQL Safe', 16, 3\r\n  END\r\n\r\n  IF @BlockSize IS NOT NULL AND @URL IS NOT NULL AND @Credential IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BlockSize is not supported.', 16, 4\r\n  END\r\n\r\n  IF @BlockSize IS NOT NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BlockSize is not supported. This parameter is not supported with Data Domain Boost', 16, 5\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @BufferCount <= 0 OR @BufferCount > 2147483647\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BufferCount is not supported.', 16, 1\r\n  END\r\n\r\n  IF @BufferCount IS NOT NULL AND @BackupSoftware = 'SQLBACKUP'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BufferCount is not supported.', 16, 2\r\n  END\r\n\r\n  IF @BufferCount IS NOT NULL AND @BackupSoftware = 'SQLSAFE'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @BufferCount is not supported.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @MaxTransferSize < 65536 OR @MaxTransferSize > 4194304\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MaxTransferSize is not supported.', 16, 1\r\n  END\r\n\r\n  IF @MaxTransferSize > 1048576 AND @BackupSoftware = 'SQLBACKUP'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MaxTransferSize is not supported.', 16, 2\r\n  END\r\n\r\n  IF @MaxTransferSize IS NOT NULL AND @BackupSoftware = 'SQLSAFE'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MaxTransferSize is not supported.', 16, 3\r\n  END\r\n\r\n  IF @MaxTransferSize IS NOT NULL AND @URL IS NOT NULL AND @Credential IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MaxTransferSize is not supported.', 16, 4\r\n  END\r\n\r\n  IF @MaxTransferSize IS NOT NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MaxTransferSize is not supported.', 16, 5\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @NumberOfFiles < 1 OR @NumberOfFiles > 64\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NumberOfFiles is not supported.', 16, 1\r\n  END\r\n\r\n  IF @NumberOfFiles > 32 AND @BackupSoftware = 'SQLBACKUP'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NumberOfFiles is not supported.', 16, 2\r\n  END\r\n\r\n  IF @NumberOfFiles < (SELECT COUNT(*) FROM @Directories WHERE Mirror = 0)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NumberOfFiles is not supported.', 16, 3\r\n  END\r\n\r\n  IF @NumberOfFiles % (SELECT NULLIF(COUNT(*),0) FROM @Directories WHERE Mirror = 0) > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NumberOfFiles is not supported.', 16, 4\r\n  END\r\n\r\n  IF @URL IS NOT NULL AND @Credential IS NOT NULL AND @NumberOfFiles <> 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NumberOfFiles is not supported.', 16, 5\r\n  END\r\n\r\n  IF @NumberOfFiles > 1 AND @BackupSoftware IN('SQLBACKUP','SQLSAFE') AND EXISTS(SELECT * FROM @Directories WHERE Mirror = 1)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NumberOfFiles is not supported.', 16, 6\r\n  END\r\n\r\n  IF @NumberOfFiles > 32 AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NumberOfFiles is not supported.', 16, 7\r\n  END\r\n\r\n  IF @NumberOfFiles < (SELECT COUNT(*) FROM @URLs WHERE Mirror = 0)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NumberOfFiles is not supported.', 16, 8\r\n  END\r\n\r\n  IF @NumberOfFiles % (SELECT NULLIF(COUNT(*),0) FROM @URLs WHERE Mirror = 0) > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NumberOfFiles is not supported.', 16, 9\r\n  END\r\n\r\n    ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @MinBackupSizeForMultipleFiles <= 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MinBackupSizeForMultipleFiles is not supported.', 16, 1\r\n  END\r\n\r\n  IF @MinBackupSizeForMultipleFiles IS NOT NULL AND @NumberOfFiles IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MinBackupSizeForMultipleFiles is not supported. This parameter can only be used together with @NumberOfFiles.', 16, 2\r\n  END\r\n\r\n  IF @MinBackupSizeForMultipleFiles IS NOT NULL AND @BackupType = 'DIFF' AND NOT EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_file_space_usage') AND name = 'modified_extent_page_count')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MinBackupSizeForMultipleFiles is not supported. The column sys.dm_db_file_space_usage.modified_extent_page_count is not available in this version of SQL Server.', 16, 3\r\n  END\r\n\r\n  IF @MinBackupSizeForMultipleFiles IS NOT NULL AND @BackupType = 'LOG' AND NOT EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_log_stats') AND name = 'log_since_last_log_backup_mb')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MinBackupSizeForMultipleFiles is not supported. The column sys.dm_db_log_stats.log_since_last_log_backup_mb is not available in this version of SQL Server.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @MaxFileSize <= 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MaxFileSize is not supported.', 16, 1\r\n  END\r\n\r\n  IF @MaxFileSize IS NOT NULL AND @NumberOfFiles IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The parameters @MaxFileSize and @NumberOfFiles cannot be used together.', 16, 2\r\n  END\r\n\r\n  IF @MaxFileSize IS NOT NULL AND @BackupType = 'DIFF' AND NOT EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_file_space_usage') AND name = 'modified_extent_page_count')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MaxFileSize is not supported. The column sys.dm_db_file_space_usage.modified_extent_page_count is not available in this version of SQL Server.', 16, 3\r\n  END\r\n\r\n  IF @MaxFileSize IS NOT NULL AND @BackupType = 'LOG' AND NOT EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_log_stats') AND name = 'log_since_last_log_backup_mb')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MaxFileSize is not supported. The column sys.dm_db_log_stats.log_since_last_log_backup_mb is not available in this version of SQL Server.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF (@BackupSoftware IS NULL AND @CompressionLevel IS NOT NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CompressionLevel is not supported.', 16, 1\r\n  END\r\n\r\n  IF @BackupSoftware = 'LITESPEED' AND (@CompressionLevel < 0  OR @CompressionLevel > 8)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CompressionLevel is not supported.', 16, 2\r\n  END\r\n\r\n  IF @BackupSoftware = 'SQLBACKUP' AND (@CompressionLevel < 0 OR @CompressionLevel > 4)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CompressionLevel is not supported.', 16, 3\r\n  END\r\n\r\n  IF @BackupSoftware = 'SQLSAFE' AND (@CompressionLevel < 1 OR @CompressionLevel > 4)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CompressionLevel is not supported.', 16, 4\r\n  END\r\n\r\n  IF @CompressionLevel IS NOT NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @CompressionLevel is not supported.', 16, 5\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF LEN(@Description) > 255\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Description is not supported.', 16, 1\r\n  END\r\n\r\n  IF @BackupSoftware = 'LITESPEED' AND LEN(@Description) > 128\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Description is not supported.', 16, 2\r\n  END\r\n\r\n  IF @BackupSoftware = 'DATA_DOMAIN_BOOST' AND LEN(@Description) > 254\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Description is not supported.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Threads IS NOT NULL AND (@BackupSoftware NOT IN('LITESPEED','SQLBACKUP','SQLSAFE') OR @BackupSoftware IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Threads is not supported.', 16, 1\r\n  END\r\n\r\n  IF @BackupSoftware = 'LITESPEED' AND (@Threads < 1 OR @Threads > 32)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Threads is not supported.', 16, 2\r\n  END\r\n\r\n  IF @BackupSoftware = 'SQLBACKUP' AND (@Threads < 2 OR @Threads > 32)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Threads is not supported.', 16, 3\r\n  END\r\n\r\n  IF @BackupSoftware = 'SQLSAFE' AND (@Threads < 1 OR @Threads > 64)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Threads is not supported.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Throttle < 1 OR @Throttle > 100\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Throttle is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Throttle IS NOT NULL AND (@BackupSoftware NOT IN('LITESPEED') OR @BackupSoftware IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Throttle is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Encrypt NOT IN('Y','N') OR @Encrypt IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Encrypt is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Encrypt = 'Y' AND @BackupSoftware IS NULL AND NOT (@Version >= 12 AND (SERVERPROPERTY('EngineEdition') = 3) OR SERVERPROPERTY('EditionID') IN(-1534726760, 284895786))\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Encrypt is not supported.', 16, 2\r\n  END\r\n\r\n  IF @Encrypt = 'Y' AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Encrypt is not supported.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @BackupSoftware IS NULL AND @Encrypt = 'Y' AND (@EncryptionAlgorithm NOT IN('AES_128','AES_192','AES_256','TRIPLE_DES_3KEY') OR @EncryptionAlgorithm IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @EncryptionAlgorithm is not supported.', 16, 1\r\n  END\r\n\r\n  IF @BackupSoftware = 'LITESPEED' AND @Encrypt = 'Y' AND (@EncryptionAlgorithm NOT IN('RC2_40','RC2_56','RC2_112','RC2_128','TRIPLE_DES_3KEY','RC4_128','AES_128','AES_192','AES_256') OR @EncryptionAlgorithm IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @EncryptionAlgorithm is not supported.', 16, 2\r\n  END\r\n\r\n  IF @BackupSoftware = 'SQLBACKUP' AND @Encrypt = 'Y' AND (@EncryptionAlgorithm NOT IN('AES_128','AES_256') OR @EncryptionAlgorithm IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @EncryptionAlgorithm is not supported.', 16, 3\r\n  END\r\n\r\n  IF @BackupSoftware = 'SQLSAFE' AND @Encrypt = 'Y' AND (@EncryptionAlgorithm NOT IN('AES_128','AES_256') OR @EncryptionAlgorithm IS NULL)\r\n  OR (@EncryptionAlgorithm IS NOT NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @EncryptionAlgorithm is not supported.', 16, 4\r\n  END\r\n\r\n  IF @EncryptionAlgorithm IS NOT NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @EncryptionAlgorithm is not supported.', 16, 5\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF (NOT (@BackupSoftware IS NULL AND @Encrypt = 'Y') AND @ServerCertificate IS NOT NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ServerCertificate is not supported.', 16, 1\r\n  END\r\n\r\n  IF @BackupSoftware IS NULL AND @Encrypt = 'Y' AND @ServerCertificate IS NULL AND @ServerAsymmetricKey IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ServerCertificate is not supported.', 16, 2\r\n  END\r\n\r\n  IF @BackupSoftware IS NULL AND @Encrypt = 'Y' AND @ServerCertificate IS NOT NULL AND @ServerAsymmetricKey IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ServerCertificate is not supported.', 16, 3\r\n  END\r\n\r\n  IF @ServerCertificate IS NOT NULL AND NOT EXISTS(SELECT * FROM master.sys.certificates WHERE name = @ServerCertificate)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ServerCertificate is not supported.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF NOT (@BackupSoftware IS NULL AND @Encrypt = 'Y') AND @ServerAsymmetricKey IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ServerAsymmetricKey is not supported.', 16, 1\r\n  END\r\n\r\n  IF @BackupSoftware IS NULL AND @Encrypt = 'Y' AND @ServerAsymmetricKey IS NULL AND @ServerCertificate IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ServerAsymmetricKey is not supported.', 16, 2\r\n  END\r\n\r\n  IF @BackupSoftware IS NULL AND @Encrypt = 'Y' AND @ServerAsymmetricKey IS NOT NULL AND @ServerCertificate IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ServerAsymmetricKey is not supported.', 16, 3\r\n  END\r\n\r\n  IF @ServerAsymmetricKey IS NOT NULL AND NOT EXISTS(SELECT * FROM master.sys.asymmetric_keys WHERE name = @ServerAsymmetricKey)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ServerAsymmetricKey is not supported.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @EncryptionKey IS NOT NULL AND @BackupSoftware IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @EncryptionKey is not supported.', 16, 1\r\n  END\r\n\r\n  IF @EncryptionKey IS NOT NULL AND @Encrypt = 'N'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @EncryptionKey is not supported.', 16, 2\r\n  END\r\n\r\n  IF @EncryptionKey IS NULL AND @Encrypt = 'Y' AND @BackupSoftware IN('LITESPEED','SQLBACKUP','SQLSAFE')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @EncryptionKey is not supported.', 16, 3\r\n  END\r\n\r\n  IF @EncryptionKey IS NOT NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @EncryptionKey is not supported.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @ReadWriteFileGroups NOT IN('Y','N') OR @ReadWriteFileGroups IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ReadWriteFileGroups is not supported.', 16, 1\r\n  END\r\n\r\n  IF @ReadWriteFileGroups = 'Y' AND @BackupType = 'LOG'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ReadWriteFileGroups is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @OverrideBackupPreference NOT IN('Y','N') OR @OverrideBackupPreference IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @OverrideBackupPreference is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @NoRecovery NOT IN('Y','N') OR @NoRecovery IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NoRecovery is not supported.', 16, 1\r\n  END\r\n\r\n  IF @NoRecovery = 'Y' AND @BackupType <> 'LOG'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NoRecovery is not supported.', 16, 2\r\n  END\r\n\r\n  IF @NoRecovery = 'Y' AND @BackupSoftware = 'SQLSAFE'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @NoRecovery is not supported.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @URL IS NOT NULL AND @Directory IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @URL is not supported.', 16, 1\r\n  END\r\n\r\n  IF @URL IS NOT NULL AND @MirrorDirectory IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @URL is not supported.', 16, 2\r\n  END\r\n\r\n  IF @URL IS NOT NULL AND @Version < 11.03339\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @URL is not supported.', 16, 3\r\n  END\r\n\r\n  IF @URL IS NOT NULL AND @BackupSoftware IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @URL is not supported.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Credential IS NULL AND @URL IS NOT NULL AND NOT (@Version >= 13 OR SERVERPROPERTY('EngineEdition') = 8)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Credential is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Credential IS NOT NULL AND @URL IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Credential is not supported.', 16, 2\r\n  END\r\n\r\n  IF @URL IS NOT NULL AND @Credential IS NULL AND NOT EXISTS(SELECT * FROM sys.credentials WHERE UPPER(credential_identity) = 'SHARED ACCESS SIGNATURE')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Credential is not supported.', 16, 3\r\n  END\r\n\r\n  IF @Credential IS NOT NULL AND NOT EXISTS(SELECT * FROM sys.credentials WHERE name = @Credential)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Credential is not supported.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @MirrorCleanupTime < 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorCleanupTime is not supported.', 16, 1\r\n  END\r\n\r\n  IF @MirrorCleanupTime IS NOT NULL AND @MirrorDirectory IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorCleanupTime is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @MirrorCleanupMode NOT IN('BEFORE_BACKUP','AFTER_BACKUP') OR @MirrorCleanupMode IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorCleanupMode is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @MirrorURL IS NOT NULL AND @Directory IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorURL is not supported.', 16, 1\r\n  END\r\n\r\n  IF @MirrorURL IS NOT NULL AND @MirrorDirectory IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorURL is not supported.', 16, 2\r\n  END\r\n\r\n  IF @MirrorURL IS NOT NULL AND @Version < 11.03339\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorURL is not supported.', 16, 3\r\n  END\r\n\r\n  IF @MirrorURL IS NOT NULL AND @BackupSoftware IS NOT NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorURL is not supported.', 16, 4\r\n  END\r\n\r\n  IF @MirrorURL IS NOT NULL AND @URL IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @MirrorURL is not supported.', 16, 5\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Updateability NOT IN('READ_ONLY','READ_WRITE','ALL') OR @Updateability IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Updateability is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @AdaptiveCompression NOT IN('SIZE','SPEED')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AdaptiveCompression is not supported.', 16, 1\r\n  END\r\n\r\n  IF @AdaptiveCompression IS NOT NULL AND (@BackupSoftware NOT IN('LITESPEED') OR @BackupSoftware IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AdaptiveCompression is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @ModificationLevel IS NOT NULL AND NOT EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_file_space_usage') AND name = 'modified_extent_page_count')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ModificationLevel is not supported.', 16, 1\r\n  END\r\n\r\n  IF @ModificationLevel IS NOT NULL AND @ChangeBackupType = 'N'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ModificationLevel is not supported.', 16, 2\r\n  END\r\n\r\n  IF @ModificationLevel IS NOT NULL AND @BackupType <> 'DIFF'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ModificationLevel is not supported.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @LogSizeSinceLastLogBackup IS NOT NULL AND NOT EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_log_stats') AND name = 'log_since_last_log_backup_mb')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @LogSizeSinceLastLogBackup is not supported.', 16, 1\r\n  END\r\n\r\n  IF @LogSizeSinceLastLogBackup IS NOT NULL AND @BackupType <> 'LOG'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @LogSizeSinceLastLogBackup is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @TimeSinceLastLogBackup IS NOT NULL AND NOT EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_log_stats') AND name = 'log_backup_time')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @TimeSinceLastLogBackup is not supported.', 16, 1\r\n  END\r\n\r\n  IF @TimeSinceLastLogBackup IS NOT NULL AND @BackupType <> 'LOG'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @TimeSinceLastLogBackup is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF (@TimeSinceLastLogBackup IS NOT NULL AND @LogSizeSinceLastLogBackup IS NULL) OR (@TimeSinceLastLogBackup IS NULL AND @LogSizeSinceLastLogBackup IS NOT NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The parameters @TimeSinceLastLogBackup and @LogSizeSinceLastLogBackup can only be used together.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DataDomainBoostHost IS NOT NULL AND (@BackupSoftware <> 'DATA_DOMAIN_BOOST' OR @BackupSoftware IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DataDomainBoostHost is not supported.', 16, 1\r\n  END\r\n\r\n  IF @DataDomainBoostHost IS NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DataDomainBoostHost is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DataDomainBoostUser IS NOT NULL AND (@BackupSoftware <> 'DATA_DOMAIN_BOOST' OR @BackupSoftware IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DataDomainBoostUser is not supported.', 16, 1\r\n  END\r\n\r\n  IF @DataDomainBoostUser IS NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DataDomainBoostUser is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DataDomainBoostDevicePath IS NOT NULL AND (@BackupSoftware <> 'DATA_DOMAIN_BOOST' OR @BackupSoftware IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DataDomainBoostDevicePath is not supported.', 16, 1\r\n  END\r\n\r\n  IF @DataDomainBoostDevicePath IS NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DataDomainBoostDevicePath is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DataDomainBoostLockboxPath IS NOT NULL AND (@BackupSoftware <> 'DATA_DOMAIN_BOOST' OR @BackupSoftware IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DataDomainBoostLockboxPath is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DirectoryStructure = ''\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DirectoryStructure is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @AvailabilityGroupDirectoryStructure = ''\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AvailabilityGroupDirectoryStructure is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @FileName IS NULL OR @FileName = ''\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FileName is not supported.', 16, 1\r\n  END\r\n\r\n  IF @FileName NOT LIKE '%.{FileExtension}'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FileName is not supported.', 16, 2\r\n  END\r\n\r\n  IF (@NumberOfFiles > 1 AND @FileName NOT LIKE '%{FileNumber}%')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FileName is not supported.', 16, 3\r\n  END\r\n\r\n  IF @FileName LIKE '%{DirectorySeparator}%'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FileName is not supported.', 16, 4\r\n  END\r\n\r\n  IF @FileName LIKE '%/%'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FileName is not supported.', 16, 5\r\n  END\r\n\r\n  IF @FileName LIKE '%\\%'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FileName is not supported.', 16, 6\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF (SERVERPROPERTY('IsHadrEnabled') = 1 AND @AvailabilityGroupFileName IS NULL)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AvailabilityGroupFileName is not supported.', 16, 1\r\n  END\r\n\r\n  IF @AvailabilityGroupFileName = ''\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AvailabilityGroupFileName is not supported.', 16, 2\r\n  END\r\n\r\n  IF @AvailabilityGroupFileName NOT LIKE '%.{FileExtension}'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AvailabilityGroupFileName is not supported.', 16, 3\r\n  END\r\n\r\n  IF (@NumberOfFiles > 1 AND @AvailabilityGroupFileName NOT LIKE '%{FileNumber}%')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AvailabilityGroupFileName is not supported.', 16, 4\r\n  END\r\n\r\n  IF @AvailabilityGroupFileName LIKE '%{DirectorySeparator}%'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AvailabilityGroupFileName is not supported.', 16, 5\r\n  END\r\n\r\n  IF @AvailabilityGroupFileName LIKE '%/%'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AvailabilityGroupFileName is not supported.', 16, 6\r\n  END\r\n\r\n  IF @AvailabilityGroupFileName LIKE '%\\%'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @AvailabilityGroupFileName is not supported.', 16, 7\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS (SELECT * FROM (SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@DirectoryStructure,'{DirectorySeparator}',''),'{ServerName}',''),'{InstanceName}',''),'{ServiceName}',''),'{ClusterName}',''),'{AvailabilityGroupName}',''),'{DatabaseName}',''),'{BackupType}',''),'{Partial}',''),'{CopyOnly}',''),'{Description}',''),'{Year}',''),'{Month}',''),'{Day}',''),'{Week}',''),'{Hour}',''),'{Minute}',''),'{Second}',''),'{Millisecond}',''),'{Microsecond}',''),'{MajorVersion}',''),'{MinorVersion}','') AS DirectoryStructure) Temp WHERE DirectoryStructure LIKE '%{%' OR DirectoryStructure LIKE '%}%')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The parameter @DirectoryStructure contains one or more tokens that are not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS (SELECT * FROM (SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@AvailabilityGroupDirectoryStructure,'{DirectorySeparator}',''),'{ServerName}',''),'{InstanceName}',''),'{ServiceName}',''),'{ClusterName}',''),'{AvailabilityGroupName}',''),'{DatabaseName}',''),'{BackupType}',''),'{Partial}',''),'{CopyOnly}',''),'{Description}',''),'{Year}',''),'{Month}',''),'{Day}',''),'{Week}',''),'{Hour}',''),'{Minute}',''),'{Second}',''),'{Millisecond}',''),'{Microsecond}',''),'{MajorVersion}',''),'{MinorVersion}','') AS AvailabilityGroupDirectoryStructure) Temp WHERE AvailabilityGroupDirectoryStructure LIKE '%{%' OR AvailabilityGroupDirectoryStructure LIKE '%}%')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The parameter @AvailabilityGroupDirectoryStructure contains one or more tokens that are not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS (SELECT * FROM (SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@FileName,'{DirectorySeparator}',''),'{ServerName}',''),'{InstanceName}',''),'{ServiceName}',''),'{ClusterName}',''),'{AvailabilityGroupName}',''),'{DatabaseName}',''),'{BackupType}',''),'{Partial}',''),'{CopyOnly}',''),'{Description}',''),'{Year}',''),'{Month}',''),'{Day}',''),'{Week}',''),'{Hour}',''),'{Minute}',''),'{Second}',''),'{Millisecond}',''),'{Microsecond}',''),'{FileNumber}',''),'{NumberOfFiles}',''),'{FileExtension}',''),'{MajorVersion}',''),'{MinorVersion}','') AS [FileName]) Temp WHERE [FileName] LIKE '%{%' OR [FileName] LIKE '%}%')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The parameter @FileName contains one or more tokens that are not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS (SELECT * FROM (SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@AvailabilityGroupFileName,'{DirectorySeparator}',''),'{ServerName}',''),'{InstanceName}',''),'{ServiceName}',''),'{ClusterName}',''),'{AvailabilityGroupName}',''),'{DatabaseName}',''),'{BackupType}',''),'{Partial}',''),'{CopyOnly}',''),'{Description}',''),'{Year}',''),'{Month}',''),'{Day}',''),'{Week}',''),'{Hour}',''),'{Minute}',''),'{Second}',''),'{Millisecond}',''),'{Microsecond}',''),'{FileNumber}',''),'{NumberOfFiles}',''),'{FileExtension}',''),'{MajorVersion}',''),'{MinorVersion}','') AS AvailabilityGroupFileName) Temp WHERE AvailabilityGroupFileName LIKE '%{%' OR AvailabilityGroupFileName LIKE '%}%')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The parameter @AvailabilityGroupFileName contains one or more tokens that are not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @FileExtensionFull LIKE '%.%'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FileExtensionFull is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @FileExtensionDiff LIKE '%.%'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FileExtensionDiff is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @FileExtensionLog LIKE '%.%'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @FileExtensionLog is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Init NOT IN('Y','N') OR @Init IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Init is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Init = 'Y' AND @BackupType = 'LOG'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Init is not supported.', 16, 2\r\n  END\r\n\r\n  IF @Init = 'Y' AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Init is not supported.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Format NOT IN('Y','N') OR @Format IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Format is not supported.', 16, 1\r\n  END\r\n\r\n  IF @Format = 'Y' AND @BackupType = 'LOG'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Format is not supported.', 16, 2\r\n  END\r\n\r\n  IF @Format = 'Y' AND @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Format is not supported.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @ObjectLevelRecoveryMap NOT IN('Y','N') OR @ObjectLevelRecoveryMap IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ObjectLevelRecovery is not supported.', 16, 1\r\n  END\r\n\r\n  IF @ObjectLevelRecoveryMap = 'Y' AND @BackupSoftware IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ObjectLevelRecovery is not supported.', 16, 2\r\n  END\r\n\r\n  IF @ObjectLevelRecoveryMap = 'Y' AND @BackupSoftware <> 'LITESPEED'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ObjectLevelRecovery is not supported.', 16, 3\r\n  END\r\n\r\n  IF @ObjectLevelRecoveryMap = 'Y' AND @BackupType = 'LOG'\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ObjectLevelRecovery is not supported.', 16, 4\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @ExcludeLogShippedFromLogBackup NOT IN('Y','N') OR @ExcludeLogShippedFromLogBackup IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @ExcludeLogShippedFromLogBackup is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @StringDelimiter IS NULL OR LEN(@StringDelimiter) > 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @StringDelimiter is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DatabaseOrder NOT IN('DATABASE_NAME_ASC','DATABASE_NAME_DESC','DATABASE_SIZE_ASC','DATABASE_SIZE_DESC','LOG_SIZE_SINCE_LAST_LOG_BACKUP_ASC','LOG_SIZE_SINCE_LAST_LOG_BACKUP_DESC')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DatabaseOrder is not supported.', 16, 1\r\n  END\r\n\r\n  IF @DatabaseOrder IN('LOG_SIZE_SINCE_LAST_LOG_BACKUP_ASC','LOG_SIZE_SINCE_LAST_LOG_BACKUP_DESC') AND NOT EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_log_stats') AND name = 'log_since_last_log_backup_mb')\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DatabaseOrder is not supported. The column sys.dm_db_log_stats.log_since_last_log_backup_mb is not available in this version of SQL Server.', 16, 2\r\n  END\r\n\r\n  IF @DatabaseOrder IS NOT NULL AND SERVERPROPERTY('EngineEdition') = 5\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DatabaseOrder is not supported.', 16, 3\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DatabasesInParallel NOT IN('Y','N') OR @DatabasesInParallel IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DatabasesInParallel is not supported.', 16, 1\r\n  END\r\n\r\n  IF @DatabasesInParallel = 'Y' AND SERVERPROPERTY('EngineEdition') = 5\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @DatabasesInParallel is not supported.', 16, 2\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @LogToTable NOT IN('Y','N') OR @LogToTable IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @LogToTable is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Execute NOT IN('Y','N') OR @Execute IS NULL\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The value for the parameter @Execute is not supported.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF EXISTS(SELECT * FROM @Errors)\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The documentation is available at https://ola.hallengren.com/sql-server-backup.html.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check that selected databases and availability groups exist                                //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  SET @ErrorMessage = ''\r\n  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '\r\n  FROM @SelectedDatabases\r\n  WHERE DatabaseName NOT LIKE '%[%]%'\r\n  AND DatabaseName NOT IN (SELECT DatabaseName FROM @tmpDatabases)\r\n  IF @@ROWCOUNT > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The following databases in the @Databases parameter do not exist: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.', 10, 1\r\n  END\r\n\r\n  SET @ErrorMessage = ''\r\n  SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(AvailabilityGroupName) + ', '\r\n  FROM @SelectedAvailabilityGroups\r\n  WHERE AvailabilityGroupName NOT LIKE '%[%]%'\r\n  AND AvailabilityGroupName NOT IN (SELECT AvailabilityGroupName FROM @tmpAvailabilityGroups)\r\n  IF @@ROWCOUNT > 0\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The following availability groups do not exist: ' + LEFT(@ErrorMessage,LEN(@ErrorMessage)-1) + '.', 10, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check @@SERVERNAME                                                                         //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @@SERVERNAME <> CAST(SERVERPROPERTY('ServerName') AS nvarchar(max)) AND SERVERPROPERTY('IsHadrEnabled') = 1\r\n  BEGIN\r\n    INSERT INTO @Errors ([Message], Severity, [State])\r\n    SELECT 'The @@SERVERNAME does not match SERVERPROPERTY(''ServerName''). See ' + CASE WHEN SERVERPROPERTY('IsClustered') = 0 THEN 'https://docs.microsoft.com/en-us/sql/database-engine/install-windows/rename-a-computer-that-hosts-a-stand-alone-instance-of-sql-server' WHEN SERVERPROPERTY('IsClustered') = 1 THEN 'https://docs.microsoft.com/en-us/sql/sql-server/failover-clusters/install/rename-a-sql-server-failover-cluster-instance' END + '.', 16, 1\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Raise errors                                                                               //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  DECLARE ErrorCursor CURSOR FAST_FORWARD FOR SELECT [Message], Severity, [State] FROM @Errors ORDER BY [ID] ASC\r\n\r\n  OPEN ErrorCursor\r\n\r\n  FETCH ErrorCursor INTO @CurrentMessage, @CurrentSeverity, @CurrentState\r\n\r\n  WHILE @@FETCH_STATUS = 0\r\n  BEGIN\r\n    RAISERROR('%s', @CurrentSeverity, @CurrentState, @CurrentMessage) WITH NOWAIT\r\n    RAISERROR(@EmptyLine, 10, 1) WITH NOWAIT\r\n\r\n    FETCH NEXT FROM ErrorCursor INTO @CurrentMessage, @CurrentSeverity, @CurrentState\r\n  END\r\n\r\n  CLOSE ErrorCursor\r\n\r\n  DEALLOCATE ErrorCursor\r\n\r\n  IF EXISTS (SELECT * FROM @Errors WHERE Severity >= 16)\r\n  BEGIN\r\n    SET @ReturnCode = 50000\r\n    GOTO Logging\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Check Availability Group cluster name                                                      //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @Version >= 11 AND SERVERPROPERTY('IsHadrEnabled') = 1\r\n  BEGIN\r\n    SELECT @Cluster = NULLIF(cluster_name,'')\r\n    FROM sys.dm_hadr_cluster\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Update database order                                                                      //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DatabaseOrder IN('DATABASE_SIZE_ASC','DATABASE_SIZE_DESC')\r\n  BEGIN\r\n    UPDATE tmpDatabases\r\n    SET DatabaseSize = (SELECT SUM(CAST(size AS bigint)) FROM sys.master_files WHERE [type] = 0 AND database_id = DB_ID(tmpDatabases.DatabaseName))\r\n    FROM @tmpDatabases tmpDatabases\r\n  END\r\n\r\n  IF @DatabaseOrder IN('LOG_SIZE_SINCE_LAST_LOG_BACKUP_ASC','LOG_SIZE_SINCE_LAST_LOG_BACKUP_DESC')\r\n  BEGIN\r\n    UPDATE tmpDatabases\r\n    SET LogSizeSinceLastLogBackup = (SELECT log_since_last_log_backup_mb FROM sys.dm_db_log_stats(DB_ID(tmpDatabases.DatabaseName)))\r\n    FROM @tmpDatabases tmpDatabases\r\n  END\r\n\r\n  IF @DatabaseOrder IS NULL\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY StartPosition ASC, DatabaseName ASC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n  ELSE\r\n  IF @DatabaseOrder = 'DATABASE_NAME_ASC'\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY DatabaseName ASC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n  ELSE\r\n  IF @DatabaseOrder = 'DATABASE_NAME_DESC'\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY DatabaseName DESC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n  ELSE\r\n  IF @DatabaseOrder = 'DATABASE_SIZE_ASC'\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY DatabaseSize ASC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n  ELSE\r\n  IF @DatabaseOrder = 'DATABASE_SIZE_DESC'\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY DatabaseSize DESC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n  ELSE\r\n  IF @DatabaseOrder = 'LOG_SIZE_SINCE_LAST_LOG_BACKUP_ASC'\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY LogSizeSinceLastLogBackup ASC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n  ELSE\r\n  IF @DatabaseOrder = 'LOG_SIZE_SINCE_LAST_LOG_BACKUP_DESC'\r\n  BEGIN\r\n    WITH tmpDatabases AS (\r\n    SELECT DatabaseName, [Order], ROW_NUMBER() OVER (ORDER BY LogSizeSinceLastLogBackup DESC) AS RowNumber\r\n    FROM @tmpDatabases tmpDatabases\r\n    WHERE Selected = 1\r\n    )\r\n    UPDATE tmpDatabases\r\n    SET [Order] = RowNumber\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Update the queue                                                                           //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  IF @DatabasesInParallel = 'Y'\r\n  BEGIN\r\n\r\n    BEGIN TRY\r\n\r\n      SELECT @QueueID = QueueID\r\n      FROM dbo.[Queue]\r\n      WHERE SchemaName = @SchemaName\r\n      AND ObjectName = @ObjectName\r\n      AND [Parameters] = @Parameters\r\n\r\n      IF @QueueID IS NULL\r\n      BEGIN\r\n        BEGIN TRANSACTION\r\n\r\n        SELECT @QueueID = QueueID\r\n        FROM dbo.[Queue] WITH (UPDLOCK, HOLDLOCK)\r\n        WHERE SchemaName = @SchemaName\r\n        AND ObjectName = @ObjectName\r\n        AND [Parameters] = @Parameters\r\n\r\n        IF @QueueID IS NULL\r\n        BEGIN\r\n          INSERT INTO dbo.[Queue] (SchemaName, ObjectName, [Parameters])\r\n          SELECT @SchemaName, @ObjectName, @Parameters\r\n\r\n          SET @QueueID = SCOPE_IDENTITY()\r\n        END\r\n\r\n        COMMIT TRANSACTION\r\n      END\r\n\r\n      BEGIN TRANSACTION\r\n\r\n      UPDATE [Queue]\r\n      SET QueueStartTime = SYSDATETIME(),\r\n          SessionID = @@SPID,\r\n          RequestID = (SELECT request_id FROM sys.dm_exec_requests WHERE session_id = @@SPID),\r\n          RequestStartTime = (SELECT start_time FROM sys.dm_exec_requests WHERE session_id = @@SPID)\r\n      FROM dbo.[Queue] [Queue]\r\n      WHERE QueueID = @QueueID\r\n      AND NOT EXISTS (SELECT *\r\n                      FROM sys.dm_exec_requests\r\n                      WHERE session_id = [Queue].SessionID\r\n                      AND request_id = [Queue].RequestID\r\n                      AND start_time = [Queue].RequestStartTime)\r\n      AND NOT EXISTS (SELECT *\r\n                      FROM dbo.QueueDatabase QueueDatabase\r\n                      INNER JOIN sys.dm_exec_requests ON QueueDatabase.SessionID = session_id AND QueueDatabase.RequestID = request_id AND QueueDatabase.RequestStartTime = start_time\r\n                      WHERE QueueDatabase.QueueID = @QueueID)\r\n\r\n      IF @@ROWCOUNT = 1\r\n      BEGIN\r\n        INSERT INTO dbo.QueueDatabase (QueueID, DatabaseName)\r\n        SELECT @QueueID AS QueueID,\r\n               DatabaseName\r\n        FROM @tmpDatabases tmpDatabases\r\n        WHERE Selected = 1\r\n        AND NOT EXISTS (SELECT * FROM dbo.QueueDatabase WHERE DatabaseName = tmpDatabases.DatabaseName AND QueueID = @QueueID)\r\n\r\n        DELETE QueueDatabase\r\n        FROM dbo.QueueDatabase QueueDatabase\r\n        WHERE QueueID = @QueueID\r\n        AND NOT EXISTS (SELECT * FROM @tmpDatabases tmpDatabases WHERE DatabaseName = QueueDatabase.DatabaseName AND Selected = 1)\r\n\r\n        UPDATE QueueDatabase\r\n        SET DatabaseOrder = tmpDatabases.[Order]\r\n        FROM dbo.QueueDatabase QueueDatabase\r\n        INNER JOIN @tmpDatabases tmpDatabases ON QueueDatabase.DatabaseName = tmpDatabases.DatabaseName\r\n        WHERE QueueID = @QueueID\r\n      END\r\n\r\n      COMMIT TRANSACTION\r\n\r\n      SELECT @QueueStartTime = QueueStartTime\r\n      FROM dbo.[Queue]\r\n      WHERE QueueID = @QueueID\r\n\r\n    END TRY\r\n\r\n    BEGIN CATCH\r\n      IF XACT_STATE() <> 0\r\n      BEGIN\r\n        ROLLBACK TRANSACTION\r\n      END\r\n      SET @ErrorMessage = 'Msg ' + CAST(ERROR_NUMBER() AS nvarchar) + ', ' + ISNULL(ERROR_MESSAGE(),'')\r\n      RAISERROR('%s',16,1,@ErrorMessage) WITH NOWAIT\r\n      RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n      SET @ReturnCode = ERROR_NUMBER()\r\n      GOTO Logging\r\n    END CATCH\r\n\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Execute backup commands                                                                    //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  WHILE (1 = 1)\r\n  BEGIN\r\n\r\n    IF @DatabasesInParallel = 'Y'\r\n    BEGIN\r\n      UPDATE QueueDatabase\r\n      SET DatabaseStartTime = NULL,\r\n          SessionID = NULL,\r\n          RequestID = NULL,\r\n          RequestStartTime = NULL\r\n      FROM dbo.QueueDatabase QueueDatabase\r\n      WHERE QueueID = @QueueID\r\n      AND DatabaseStartTime IS NOT NULL\r\n      AND DatabaseEndTime IS NULL\r\n      AND NOT EXISTS (SELECT * FROM sys.dm_exec_requests WHERE session_id = QueueDatabase.SessionID AND request_id = QueueDatabase.RequestID AND start_time = QueueDatabase.RequestStartTime)\r\n\r\n      UPDATE QueueDatabase\r\n      SET DatabaseStartTime = SYSDATETIME(),\r\n          DatabaseEndTime = NULL,\r\n          SessionID = @@SPID,\r\n          RequestID = (SELECT request_id FROM sys.dm_exec_requests WHERE session_id = @@SPID),\r\n          RequestStartTime = (SELECT start_time FROM sys.dm_exec_requests WHERE session_id = @@SPID),\r\n          @CurrentDatabaseName = DatabaseName,\r\n          @CurrentDatabaseNameFS = (SELECT DatabaseNameFS FROM @tmpDatabases WHERE DatabaseName = QueueDatabase.DatabaseName)\r\n      FROM (SELECT TOP 1 DatabaseStartTime,\r\n                         DatabaseEndTime,\r\n                         SessionID,\r\n                         RequestID,\r\n                         RequestStartTime,\r\n                         DatabaseName\r\n            FROM dbo.QueueDatabase\r\n            WHERE QueueID = @QueueID\r\n            AND (DatabaseStartTime < @QueueStartTime OR DatabaseStartTime IS NULL)\r\n            AND NOT (DatabaseStartTime IS NOT NULL AND DatabaseEndTime IS NULL)\r\n            ORDER BY DatabaseOrder ASC\r\n            ) QueueDatabase\r\n    END\r\n    ELSE\r\n    BEGIN\r\n      SELECT TOP 1 @CurrentDBID = ID,\r\n                   @CurrentDatabaseName = DatabaseName,\r\n                   @CurrentDatabaseNameFS = DatabaseNameFS\r\n      FROM @tmpDatabases\r\n      WHERE Selected = 1\r\n      AND Completed = 0\r\n      ORDER BY [Order] ASC\r\n    END\r\n\r\n    IF @@ROWCOUNT = 0\r\n    BEGIN\r\n      BREAK\r\n    END\r\n\r\n    SET @CurrentDatabase_sp_executesql = QUOTENAME(@CurrentDatabaseName) + '.sys.sp_executesql'\r\n\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Date and time: ' + CONVERT(nvarchar,SYSDATETIME(),120)\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Database: ' + QUOTENAME(@CurrentDatabaseName)\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    SELECT @CurrentUserAccess = user_access_desc,\r\n           @CurrentIsReadOnly = is_read_only,\r\n           @CurrentDatabaseState = state_desc,\r\n           @CurrentInStandby = is_in_standby,\r\n           @CurrentRecoveryModel = recovery_model_desc,\r\n           @CurrentIsEncrypted = is_encrypted,\r\n           @CurrentDatabaseSize = (SELECT SUM(CAST(size AS bigint)) FROM sys.master_files WHERE [type] = 0 AND database_id = sys.databases.database_id)\r\n    FROM sys.databases\r\n    WHERE [name] = @CurrentDatabaseName\r\n\r\n    BEGIN\r\n      SET @DatabaseMessage = 'State: ' + @CurrentDatabaseState\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Standby: ' + CASE WHEN @CurrentInStandby = 1 THEN 'Yes' ELSE 'No' END\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage =  'Updateability: ' + CASE WHEN @CurrentIsReadOnly = 1 THEN 'READ_ONLY' WHEN  @CurrentIsReadOnly = 0 THEN 'READ_WRITE' END\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage =  'User access: ' + @CurrentUserAccess\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Recovery model: ' + @CurrentRecoveryModel\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Encrypted: ' + CASE WHEN @CurrentIsEncrypted = 1 THEN 'Yes' WHEN @CurrentIsEncrypted = 0 THEN 'No' ELSE 'N/A' END\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    SELECT @CurrentMaxTransferSize = CASE\r\n    WHEN @MaxTransferSize IS NOT NULL THEN @MaxTransferSize\r\n    WHEN @MaxTransferSize IS NULL AND @Compress = 'Y' AND @CurrentIsEncrypted = 1 AND @BackupSoftware IS NULL AND (@Version >= 13 AND @Version < 15.0404316) THEN 65537\r\n    END\r\n\r\n    IF @CurrentDatabaseState = 'ONLINE'\r\n    BEGIN\r\n      IF EXISTS (SELECT * FROM sys.database_recovery_status WHERE database_id = DB_ID(@CurrentDatabaseName) AND database_guid IS NOT NULL)\r\n      BEGIN\r\n        SET @CurrentIsDatabaseAccessible = 1\r\n      END\r\n      ELSE\r\n      BEGIN\r\n        SET @CurrentIsDatabaseAccessible = 0\r\n      END\r\n    END\r\n\r\n    IF @Version >= 11 AND SERVERPROPERTY('IsHadrEnabled') = 1\r\n    BEGIN\r\n      SELECT @CurrentReplicaID = databases.replica_id\r\n      FROM sys.databases databases\r\n      INNER JOIN sys.availability_replicas availability_replicas ON databases.replica_id = availability_replicas.replica_id\r\n      WHERE databases.[name] = @CurrentDatabaseName\r\n\r\n      SELECT @CurrentAvailabilityGroupID = group_id\r\n      FROM sys.availability_replicas\r\n      WHERE replica_id = @CurrentReplicaID\r\n\r\n      SELECT @CurrentAvailabilityGroupRole = role_desc\r\n      FROM sys.dm_hadr_availability_replica_states\r\n      WHERE replica_id = @CurrentReplicaID\r\n\r\n      SELECT @CurrentAvailabilityGroup = [name],\r\n             @CurrentAvailabilityGroupBackupPreference = UPPER(automated_backup_preference_desc)\r\n      FROM sys.availability_groups\r\n      WHERE group_id = @CurrentAvailabilityGroupID\r\n    END\r\n\r\n    IF @Version >= 11 AND SERVERPROPERTY('IsHadrEnabled') = 1 AND @CurrentAvailabilityGroup IS NOT NULL\r\n    BEGIN\r\n      SELECT @CurrentIsPreferredBackupReplica = sys.fn_hadr_backup_is_preferred_replica(@CurrentDatabaseName)\r\n    END\r\n\r\n    SELECT @CurrentDifferentialBaseLSN = differential_base_lsn\r\n    FROM sys.master_files\r\n    WHERE database_id = DB_ID(@CurrentDatabaseName)\r\n    AND [type] = 0\r\n    AND [file_id] = 1\r\n\r\n    IF @CurrentDatabaseState = 'ONLINE'\r\n    BEGIN\r\n      SELECT @CurrentLogLSN = last_log_backup_lsn\r\n      FROM sys.database_recovery_status\r\n      WHERE database_id = DB_ID(@CurrentDatabaseName)\r\n    END\r\n\r\n    IF @CurrentDatabaseState = 'ONLINE' AND EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_file_space_usage') AND name = 'modified_extent_page_count') AND (@CurrentAvailabilityGroupRole = 'PRIMARY' OR @CurrentAvailabilityGroupRole IS NULL)\r\n    BEGIN\r\n      SET @CurrentCommand = 'SELECT @ParamAllocatedExtentPageCount = SUM(allocated_extent_page_count), @ParamModifiedExtentPageCount = SUM(modified_extent_page_count) FROM sys.dm_db_file_space_usage'\r\n\r\n      EXECUTE @CurrentDatabase_sp_executesql @stmt = @CurrentCommand, @params = N'@ParamAllocatedExtentPageCount bigint OUTPUT, @ParamModifiedExtentPageCount bigint OUTPUT', @ParamAllocatedExtentPageCount = @CurrentAllocatedExtentPageCount OUTPUT, @ParamModifiedExtentPageCount = @CurrentModifiedExtentPageCount OUTPUT\r\n    END\r\n\r\n    SET @CurrentBackupType = @BackupType\r\n\r\n    IF @ChangeBackupType = 'Y'\r\n    BEGIN\r\n      IF @CurrentBackupType = 'LOG' AND @CurrentRecoveryModel IN('FULL','BULK_LOGGED') AND @CurrentLogLSN IS NULL AND @CurrentDatabaseName <> 'master'\r\n      BEGIN\r\n        SET @CurrentBackupType = 'DIFF'\r\n      END\r\n      IF @CurrentBackupType = 'DIFF' AND (@CurrentDatabaseName = 'master' OR @CurrentDifferentialBaseLSN IS NULL OR (@CurrentModifiedExtentPageCount * 1. / @CurrentAllocatedExtentPageCount * 100 >= @ModificationLevel))\r\n      BEGIN\r\n        SET @CurrentBackupType = 'FULL'\r\n      END\r\n    END\r\n\r\n    IF @CurrentDatabaseState = 'ONLINE' AND EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_log_stats') AND name = 'log_since_last_log_backup_mb')\r\n    BEGIN\r\n      SELECT @CurrentLastLogBackup = log_backup_time,\r\n             @CurrentLogSizeSinceLastLogBackup = log_since_last_log_backup_mb\r\n      FROM sys.dm_db_log_stats (DB_ID(@CurrentDatabaseName))\r\n    END\r\n\r\n    IF @CurrentBackupType = 'DIFF'\r\n    BEGIN\r\n      SELECT @CurrentDifferentialBaseIsSnapshot = is_snapshot\r\n      FROM msdb.dbo.backupset\r\n      WHERE database_name = @CurrentDatabaseName\r\n      AND [type] = 'D'\r\n      AND checkpoint_lsn = @CurrentDifferentialBaseLSN\r\n    END\r\n\r\n    IF @ChangeBackupType = 'Y'\r\n    BEGIN\r\n      IF @CurrentBackupType = 'DIFF' AND @CurrentDifferentialBaseIsSnapshot = 1\r\n      BEGIN\r\n        SET @CurrentBackupType = 'FULL'\r\n      END\r\n    END;\r\n\r\n    WITH CurrentDatabase AS\r\n    (\r\n    SELECT BackupSize = CASE WHEN @CurrentBackupType = 'FULL' THEN COALESCE(CAST(@CurrentAllocatedExtentPageCount AS bigint) * 8192, CAST(@CurrentDatabaseSize AS bigint) * 8192)\r\n                             WHEN @CurrentBackupType = 'DIFF' THEN CAST(@CurrentModifiedExtentPageCount AS bigint) * 8192\r\n                             WHEN @CurrentBackupType = 'LOG' THEN CAST(@CurrentLogSizeSinceLastLogBackup * 1024 * 1024 AS bigint)\r\n                             END,\r\n           MaxNumberOfFiles = CASE WHEN @BackupSoftware IN('SQLBACKUP','DATA_DOMAIN_BOOST') THEN 32 ELSE 64 END,\r\n           CASE WHEN (SELECT COUNT(*) FROM @Directories WHERE Mirror = 0) > 0 THEN (SELECT COUNT(*) FROM @Directories WHERE Mirror = 0) ELSE (SELECT COUNT(*) FROM @URLs WHERE Mirror = 0) END AS NumberOfDirectories,\r\n           CAST(@MinBackupSizeForMultipleFiles AS bigint) * 1024 * 1024 AS MinBackupSizeForMultipleFiles,\r\n           CAST(@MaxFileSize AS bigint) * 1024 * 1024 AS MaxFileSize\r\n    )\r\n    SELECT @CurrentNumberOfFiles = CASE WHEN @NumberOfFiles IS NULL AND @BackupSoftware = 'DATA_DOMAIN_BOOST' THEN 1\r\n                                        WHEN @NumberOfFiles IS NULL AND @MaxFileSize IS NULL THEN NumberOfDirectories\r\n                                        WHEN @NumberOfFiles = 1 THEN @NumberOfFiles\r\n                                        WHEN @NumberOfFiles > 1 AND (BackupSize >= MinBackupSizeForMultipleFiles OR MinBackupSizeForMultipleFiles IS NULL OR BackupSize IS NULL) THEN @NumberOfFiles\r\n                                        WHEN @NumberOfFiles > 1 AND (BackupSize < MinBackupSizeForMultipleFiles) THEN NumberOfDirectories\r\n                                        WHEN @NumberOfFiles IS NULL AND @MaxFileSize IS NOT NULL AND (BackupSize IS NULL OR BackupSize = 0) THEN NumberOfDirectories\r\n                                        WHEN @NumberOfFiles IS NULL AND @MaxFileSize IS NOT NULL THEN (SELECT MIN(NumberOfFilesInEachDirectory)\r\n                                                                                                       FROM (SELECT ((BackupSize / NumberOfDirectories) / MaxFileSize + CASE WHEN (BackupSize / NumberOfDirectories) % MaxFileSize = 0 THEN 0 ELSE 1 END) AS NumberOfFilesInEachDirectory\r\n                                                                                                             UNION\r\n                                                                                                             SELECT MaxNumberOfFiles / NumberOfDirectories) Files) * NumberOfDirectories\r\n                                        END\r\n\r\n    FROM CurrentDatabase\r\n\r\n    SELECT @CurrentDatabaseMirroringRole = UPPER(mirroring_role_desc)\r\n    FROM sys.database_mirroring\r\n    WHERE database_id = DB_ID(@CurrentDatabaseName)\r\n\r\n    IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_primary_databases WHERE primary_database = @CurrentDatabaseName)\r\n    BEGIN\r\n      SET @CurrentLogShippingRole = 'PRIMARY'\r\n    END\r\n    ELSE\r\n    IF EXISTS (SELECT * FROM msdb.dbo.log_shipping_secondary_databases WHERE secondary_database = @CurrentDatabaseName)\r\n    BEGIN\r\n      SET @CurrentLogShippingRole = 'SECONDARY'\r\n    END\r\n\r\n    IF @CurrentIsDatabaseAccessible IS NOT NULL\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Is accessible: ' + CASE WHEN @CurrentIsDatabaseAccessible = 1 THEN 'Yes' ELSE 'No' END\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    IF @CurrentAvailabilityGroup IS NOT NULL\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Availability group: ' + ISNULL(@CurrentAvailabilityGroup,'N/A')\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Availability group role: ' + ISNULL(@CurrentAvailabilityGroupRole,'N/A')\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Availability group backup preference: ' + ISNULL(@CurrentAvailabilityGroupBackupPreference,'N/A')\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Is preferred backup replica: ' + CASE WHEN @CurrentIsPreferredBackupReplica = 1 THEN 'Yes' WHEN @CurrentIsPreferredBackupReplica = 0 THEN 'No' ELSE 'N/A' END\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    IF @CurrentDatabaseMirroringRole IS NOT NULL\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Database mirroring role: ' + @CurrentDatabaseMirroringRole\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    IF @CurrentLogShippingRole IS NOT NULL\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Log shipping role: ' + @CurrentLogShippingRole\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    SET @DatabaseMessage = 'Differential base LSN: ' + ISNULL(CAST(@CurrentDifferentialBaseLSN AS nvarchar),'N/A')\r\n    RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n    IF @CurrentBackupType = 'DIFF' OR @CurrentDifferentialBaseIsSnapshot IS NOT NULL\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Differential base is snapshot: ' + CASE WHEN @CurrentDifferentialBaseIsSnapshot = 1 THEN 'Yes' WHEN @CurrentDifferentialBaseIsSnapshot = 0 THEN 'No' ELSE 'N/A' END\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    SET @DatabaseMessage = 'Last log backup LSN: ' + ISNULL(CAST(@CurrentLogLSN AS nvarchar),'N/A')\r\n    RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n    IF @CurrentBackupType IN('DIFF','FULL') AND EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_file_space_usage') AND name = 'modified_extent_page_count')\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Allocated extent page count: ' + ISNULL(CAST(@CurrentAllocatedExtentPageCount AS nvarchar) + ' (' + CAST(@CurrentAllocatedExtentPageCount * 1. * 8 / 1024 AS nvarchar) + ' MB)','N/A')\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Modified extent page count: ' + ISNULL(CAST(@CurrentModifiedExtentPageCount AS nvarchar) + ' (' + CAST(@CurrentModifiedExtentPageCount * 1. * 8 / 1024 AS nvarchar) + ' MB)','N/A')\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    IF @CurrentBackupType = 'LOG' AND EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_db_log_stats') AND name = 'log_since_last_log_backup_mb')\r\n    BEGIN\r\n      SET @DatabaseMessage = 'Last log backup: ' + ISNULL(CONVERT(nvarchar(19),NULLIF(@CurrentLastLogBackup,'1900-01-01'),120),'N/A')\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n\r\n      SET @DatabaseMessage = 'Log size since last log backup (MB): ' + ISNULL(CAST(@CurrentLogSizeSinceLastLogBackup AS nvarchar),'N/A')\r\n      RAISERROR('%s',10,1,@DatabaseMessage) WITH NOWAIT\r\n    END\r\n\r\n    RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n    IF @CurrentDatabaseState = 'ONLINE'\r\n    AND NOT (@CurrentUserAccess = 'SINGLE_USER' AND @CurrentIsDatabaseAccessible = 0)\r\n    AND NOT (@CurrentInStandby = 1)\r\n    AND NOT (@CurrentBackupType = 'LOG' AND @CurrentRecoveryModel = 'SIMPLE')\r\n    AND NOT (@CurrentBackupType = 'LOG' AND @CurrentRecoveryModel IN('FULL','BULK_LOGGED') AND @CurrentLogLSN IS NULL)\r\n    AND NOT (@CurrentBackupType = 'DIFF' AND @CurrentDifferentialBaseLSN IS NULL)\r\n    AND NOT (@CurrentBackupType IN('DIFF','LOG') AND @CurrentDatabaseName = 'master')\r\n    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'FULL' AND @CopyOnly = 'N' AND (@CurrentAvailabilityGroupRole <> 'PRIMARY' OR @CurrentAvailabilityGroupRole IS NULL))\r\n    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'FULL' AND @CopyOnly = 'Y' AND (@CurrentIsPreferredBackupReplica <> 1 OR @CurrentIsPreferredBackupReplica IS NULL) AND @OverrideBackupPreference = 'N')\r\n    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'DIFF' AND (@CurrentAvailabilityGroupRole <> 'PRIMARY' OR @CurrentAvailabilityGroupRole IS NULL))\r\n    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'LOG' AND @CopyOnly = 'N' AND (@CurrentIsPreferredBackupReplica <> 1 OR @CurrentIsPreferredBackupReplica IS NULL) AND @OverrideBackupPreference = 'N')\r\n    AND NOT (@CurrentAvailabilityGroup IS NOT NULL AND @CurrentBackupType = 'LOG' AND @CopyOnly = 'Y' AND (@CurrentAvailabilityGroupRole <> 'PRIMARY' OR @CurrentAvailabilityGroupRole IS NULL))\r\n    AND NOT ((@CurrentLogShippingRole = 'PRIMARY' AND @CurrentLogShippingRole IS NOT NULL) AND @CurrentBackupType = 'LOG' AND @ExcludeLogShippedFromLogBackup = 'Y')\r\n    AND NOT (@CurrentIsReadOnly = 1 AND @Updateability = 'READ_WRITE')\r\n    AND NOT (@CurrentIsReadOnly = 0 AND @Updateability = 'READ_ONLY')\r\n    AND NOT (@CurrentBackupType = 'LOG' AND @LogSizeSinceLastLogBackup IS NOT NULL AND @TimeSinceLastLogBackup IS NOT NULL AND NOT(@CurrentLogSizeSinceLastLogBackup >= @LogSizeSinceLastLogBackup OR @CurrentLogSizeSinceLastLogBackup IS NULL OR DATEDIFF(SECOND,@CurrentLastLogBackup,SYSDATETIME()) >= @TimeSinceLastLogBackup OR @CurrentLastLogBackup IS NULL))\r\n    AND NOT (@CurrentBackupType = 'LOG' AND @Updateability = 'READ_ONLY' AND @BackupSoftware = 'DATA_DOMAIN_BOOST')\r\n    BEGIN\r\n\r\n      IF @CurrentBackupType = 'LOG' AND (@CleanupTime IS NOT NULL OR @MirrorCleanupTime IS NOT NULL)\r\n      BEGIN\r\n        SELECT @CurrentLatestBackup = MAX(backup_start_date)\r\n        FROM msdb.dbo.backupset\r\n        WHERE ([type] IN('D','I')\r\n        OR ([type] = 'L' AND last_lsn < @CurrentDifferentialBaseLSN))\r\n        AND is_damaged = 0\r\n        AND [database_name] = @CurrentDatabaseName\r\n      END\r\n\r\n      SET @CurrentDate = SYSDATETIME()\r\n\r\n      INSERT INTO @CurrentCleanupDates (CleanupDate)\r\n      SELECT @CurrentDate\r\n\r\n      IF @CurrentBackupType = 'LOG'\r\n      BEGIN\r\n        INSERT INTO @CurrentCleanupDates (CleanupDate)\r\n        SELECT @CurrentLatestBackup\r\n      END\r\n\r\n      SELECT @CurrentDirectoryStructure = CASE\r\n      WHEN @CurrentAvailabilityGroup IS NOT NULL THEN @AvailabilityGroupDirectoryStructure\r\n      ELSE @DirectoryStructure\r\n      END\r\n\r\n      IF @CurrentDirectoryStructure IS NOT NULL\r\n      BEGIN\r\n      -- Directory structure - remove tokens that are not needed\r\n        IF @ReadWriteFileGroups = 'N' SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Partial}','')\r\n        IF @CopyOnly = 'N' SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{CopyOnly}','')\r\n        IF @Cluster IS NULL SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{ClusterName}','')\r\n        IF @CurrentAvailabilityGroup IS NULL SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{AvailabilityGroupName}','')\r\n        IF SERVERPROPERTY('InstanceName') IS NULL SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{InstanceName}','')\r\n        IF @@SERVICENAME IS NULL SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{ServiceName}','')\r\n        IF @Description IS NULL SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Description}','')\r\n\r\n        IF @Directory IS NULL AND @MirrorDirectory IS NULL AND @URL IS NULL AND @DefaultDirectory LIKE '%' + '.' + @@SERVICENAME + @DirectorySeparator + 'MSSQL' + @DirectorySeparator + 'Backup'\r\n        BEGIN\r\n          SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{ServerName}','')\r\n          SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{InstanceName}','')\r\n          SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{ClusterName}','')\r\n          SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{AvailabilityGroupName}','')\r\n        END\r\n\r\n        WHILE (@Updated = 1 OR @Updated IS NULL)\r\n        BEGIN\r\n          SET @Updated = 0\r\n\r\n          IF CHARINDEX('\\',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'\\','{DirectorySeparator}')\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF CHARINDEX('/',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'/','{DirectorySeparator}')\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF CHARINDEX('__',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'__','_')\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF CHARINDEX('--',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'--','-')\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF CHARINDEX('{DirectorySeparator}{DirectorySeparator}',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{DirectorySeparator}{DirectorySeparator}','{DirectorySeparator}')\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF CHARINDEX('{DirectorySeparator}$',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{DirectorySeparator}$','{DirectorySeparator}')\r\n            SET @Updated = 1\r\n          END\r\n          IF CHARINDEX('${DirectorySeparator}',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'${DirectorySeparator}','{DirectorySeparator}')\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF CHARINDEX('{DirectorySeparator}_',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{DirectorySeparator}_','{DirectorySeparator}')\r\n            SET @Updated = 1\r\n          END\r\n          IF CHARINDEX('_{DirectorySeparator}',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'_{DirectorySeparator}','{DirectorySeparator}')\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF CHARINDEX('{DirectorySeparator}-',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{DirectorySeparator}-','{DirectorySeparator}')\r\n            SET @Updated = 1\r\n          END\r\n          IF CHARINDEX('-{DirectorySeparator}',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'-{DirectorySeparator}','{DirectorySeparator}')\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF CHARINDEX('_$',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'_$','_')\r\n            SET @Updated = 1\r\n          END\r\n          IF CHARINDEX('$_',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'$_','_')\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF CHARINDEX('-$',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'-$','-')\r\n            SET @Updated = 1\r\n          END\r\n          IF CHARINDEX('$-',@CurrentDirectoryStructure) > 0\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'$-','-')\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF LEFT(@CurrentDirectoryStructure,1) = '_'\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = RIGHT(@CurrentDirectoryStructure,LEN(@CurrentDirectoryStructure) - 1)\r\n            SET @Updated = 1\r\n          END\r\n          IF RIGHT(@CurrentDirectoryStructure,1) = '_'\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = LEFT(@CurrentDirectoryStructure,LEN(@CurrentDirectoryStructure) - 1)\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF LEFT(@CurrentDirectoryStructure,1) = '-'\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = RIGHT(@CurrentDirectoryStructure,LEN(@CurrentDirectoryStructure) - 1)\r\n            SET @Updated = 1\r\n          END\r\n          IF RIGHT(@CurrentDirectoryStructure,1) = '-'\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = LEFT(@CurrentDirectoryStructure,LEN(@CurrentDirectoryStructure) - 1)\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF LEFT(@CurrentDirectoryStructure,1) = '$'\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = RIGHT(@CurrentDirectoryStructure,LEN(@CurrentDirectoryStructure) - 1)\r\n            SET @Updated = 1\r\n          END\r\n          IF RIGHT(@CurrentDirectoryStructure,1) = '$'\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = LEFT(@CurrentDirectoryStructure,LEN(@CurrentDirectoryStructure) - 1)\r\n            SET @Updated = 1\r\n          END\r\n\r\n          IF LEFT(@CurrentDirectoryStructure,20) = '{DirectorySeparator}'\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = RIGHT(@CurrentDirectoryStructure,LEN(@CurrentDirectoryStructure) - 20)\r\n            SET @Updated = 1\r\n          END\r\n          IF RIGHT(@CurrentDirectoryStructure,20) = '{DirectorySeparator}'\r\n          BEGIN\r\n            SET @CurrentDirectoryStructure = LEFT(@CurrentDirectoryStructure,LEN(@CurrentDirectoryStructure) - 20)\r\n            SET @Updated = 1\r\n          END\r\n        END\r\n\r\n        SET @Updated = NULL\r\n\r\n        -- Directory structure - replace tokens with real values\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{DirectorySeparator}',@DirectorySeparator)\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{ServerName}',CASE WHEN SERVERPROPERTY('EngineEdition') = 8 THEN LEFT(CAST(SERVERPROPERTY('ServerName') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ServerName') AS nvarchar(max))) - 1) ELSE CAST(SERVERPROPERTY('MachineName') AS nvarchar(max)) END)\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{InstanceName}',ISNULL(CAST(SERVERPROPERTY('InstanceName') AS nvarchar(max)),''))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{ServiceName}',ISNULL(@@SERVICENAME,''))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{ClusterName}',ISNULL(@Cluster,''))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{AvailabilityGroupName}',ISNULL(@CurrentAvailabilityGroup,''))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{DatabaseName}',@CurrentDatabaseNameFS)\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{BackupType}',@CurrentBackupType)\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Partial}','PARTIAL')\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{CopyOnly}','COPY_ONLY')\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Description}',LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(ISNULL(@Description,''),'\\',''),'/',''),':',''),'*',''),'?',''),'\"',''),'<',''),'>',''),'|',''))))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Year}',CAST(DATEPART(YEAR,@CurrentDate) AS nvarchar))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Month}',RIGHT('0' + CAST(DATEPART(MONTH,@CurrentDate) AS nvarchar),2))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Day}',RIGHT('0' + CAST(DATEPART(DAY,@CurrentDate) AS nvarchar),2))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Week}',RIGHT('0' + CAST(DATEPART(WEEK,@CurrentDate) AS nvarchar),2))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Hour}',RIGHT('0' + CAST(DATEPART(HOUR,@CurrentDate) AS nvarchar),2))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Minute}',RIGHT('0' + CAST(DATEPART(MINUTE,@CurrentDate) AS nvarchar),2))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Second}',RIGHT('0' + CAST(DATEPART(SECOND,@CurrentDate) AS nvarchar),2))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Millisecond}',RIGHT('00' + CAST(DATEPART(MILLISECOND,@CurrentDate) AS nvarchar),3))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{Microsecond}',RIGHT('00000' + CAST(DATEPART(MICROSECOND,@CurrentDate) AS nvarchar),6))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{MajorVersion}',ISNULL(CAST(SERVERPROPERTY('ProductMajorVersion') AS nvarchar),PARSENAME(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar),4)))\r\n        SET @CurrentDirectoryStructure = REPLACE(@CurrentDirectoryStructure,'{MinorVersion}',ISNULL(CAST(SERVERPROPERTY('ProductMinorVersion') AS nvarchar),PARSENAME(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar),3)))\r\n      END\r\n\r\n      INSERT INTO @CurrentDirectories (ID, DirectoryPath, Mirror, DirectoryNumber, CreateCompleted, CleanupCompleted)\r\n      SELECT ROW_NUMBER() OVER (ORDER BY ID),\r\n             DirectoryPath + CASE WHEN DirectoryPath = 'NUL' THEN '' WHEN @CurrentDirectoryStructure IS NOT NULL THEN @DirectorySeparator + @CurrentDirectoryStructure ELSE '' END,\r\n             Mirror,\r\n             ROW_NUMBER() OVER (PARTITION BY Mirror ORDER BY ID ASC),\r\n             0,\r\n             0\r\n      FROM @Directories\r\n      ORDER BY ID ASC\r\n\r\n      INSERT INTO @CurrentURLs (ID, DirectoryPath, Mirror, DirectoryNumber)\r\n      SELECT ROW_NUMBER() OVER (ORDER BY ID),\r\n             DirectoryPath + CASE WHEN @CurrentDirectoryStructure IS NOT NULL THEN @DirectorySeparator + @CurrentDirectoryStructure ELSE '' END,\r\n             Mirror,\r\n             ROW_NUMBER() OVER (PARTITION BY Mirror ORDER BY ID ASC)\r\n      FROM @URLs\r\n      ORDER BY ID ASC\r\n\r\n      SELECT @CurrentDatabaseFileName = CASE\r\n      WHEN @CurrentAvailabilityGroup IS NOT NULL THEN @AvailabilityGroupFileName\r\n      ELSE @FileName\r\n      END\r\n\r\n      -- File name - remove tokens that are not needed\r\n      IF @ReadWriteFileGroups = 'N' SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Partial}','')\r\n      IF @CopyOnly = 'N' SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{CopyOnly}','')\r\n      IF @Cluster IS NULL SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{ClusterName}','')\r\n      IF @CurrentAvailabilityGroup IS NULL SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{AvailabilityGroupName}','')\r\n      IF SERVERPROPERTY('InstanceName') IS NULL SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{InstanceName}','')\r\n      IF @@SERVICENAME IS NULL SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{ServiceName}','')\r\n      IF @Description IS NULL SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Description}','')\r\n      IF @CurrentNumberOfFiles = 1 SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{FileNumber}','')\r\n      IF @CurrentNumberOfFiles = 1 SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{NumberOfFiles}','')\r\n\r\n      WHILE (@Updated = 1 OR @Updated IS NULL)\r\n      BEGIN\r\n        SET @Updated = 0\r\n\r\n        IF CHARINDEX('__',@CurrentDatabaseFileName) > 0\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'__','_')\r\n          SET @Updated = 1\r\n        END\r\n\r\n        IF CHARINDEX('--',@CurrentDatabaseFileName) > 0\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'--','-')\r\n          SET @Updated = 1\r\n        END\r\n\r\n        IF CHARINDEX('_$',@CurrentDatabaseFileName) > 0\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'_$','_')\r\n          SET @Updated = 1\r\n        END\r\n        IF CHARINDEX('$_',@CurrentDatabaseFileName) > 0\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'$_','_')\r\n          SET @Updated = 1\r\n        END\r\n\r\n        IF CHARINDEX('-$',@CurrentDatabaseFileName) > 0\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'-$','-')\r\n          SET @Updated = 1\r\n        END\r\n        IF CHARINDEX('$-',@CurrentDatabaseFileName) > 0\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'$-','-')\r\n          SET @Updated = 1\r\n        END\r\n\r\n        IF CHARINDEX('_.',@CurrentDatabaseFileName) > 0\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'_.','.')\r\n          SET @Updated = 1\r\n        END\r\n\r\n        IF CHARINDEX('-.',@CurrentDatabaseFileName) > 0\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'-.','.')\r\n          SET @Updated = 1\r\n        END\r\n\r\n        IF CHARINDEX('of.',@CurrentDatabaseFileName) > 0\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'of.','.')\r\n          SET @Updated = 1\r\n        END\r\n\r\n        IF LEFT(@CurrentDatabaseFileName,1) = '_'\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = RIGHT(@CurrentDatabaseFileName,LEN(@CurrentDatabaseFileName) - 1)\r\n          SET @Updated = 1\r\n        END\r\n        IF RIGHT(@CurrentDatabaseFileName,1) = '_'\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = LEFT(@CurrentDatabaseFileName,LEN(@CurrentDatabaseFileName) - 1)\r\n          SET @Updated = 1\r\n        END\r\n\r\n        IF LEFT(@CurrentDatabaseFileName,1) = '-'\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = RIGHT(@CurrentDatabaseFileName,LEN(@CurrentDatabaseFileName) - 1)\r\n          SET @Updated = 1\r\n        END\r\n        IF RIGHT(@CurrentDatabaseFileName,1) = '-'\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = LEFT(@CurrentDatabaseFileName,LEN(@CurrentDatabaseFileName) - 1)\r\n          SET @Updated = 1\r\n        END\r\n\r\n        IF LEFT(@CurrentDatabaseFileName,1) = '$'\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = RIGHT(@CurrentDatabaseFileName,LEN(@CurrentDatabaseFileName) - 1)\r\n          SET @Updated = 1\r\n        END\r\n        IF RIGHT(@CurrentDatabaseFileName,1) = '$'\r\n        BEGIN\r\n          SET @CurrentDatabaseFileName = LEFT(@CurrentDatabaseFileName,LEN(@CurrentDatabaseFileName) - 1)\r\n          SET @Updated = 1\r\n        END\r\n      END\r\n\r\n      SET @Updated = NULL\r\n\r\n      SELECT @CurrentFileExtension = CASE\r\n      WHEN @CurrentBackupType = 'FULL' THEN @FileExtensionFull\r\n      WHEN @CurrentBackupType = 'DIFF' THEN @FileExtensionDiff\r\n      WHEN @CurrentBackupType = 'LOG' THEN @FileExtensionLog\r\n      END\r\n\r\n      -- File name - replace tokens with real values\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{ServerName}',CASE WHEN SERVERPROPERTY('EngineEdition') = 8 THEN LEFT(CAST(SERVERPROPERTY('ServerName') AS nvarchar(max)),CHARINDEX('.',CAST(SERVERPROPERTY('ServerName') AS nvarchar(max))) - 1) ELSE CAST(SERVERPROPERTY('MachineName') AS nvarchar(max)) END)\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{InstanceName}',ISNULL(CAST(SERVERPROPERTY('InstanceName') AS nvarchar(max)),''))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{ServiceName}',ISNULL(@@SERVICENAME,''))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{ClusterName}',ISNULL(@Cluster,''))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{AvailabilityGroupName}',ISNULL(@CurrentAvailabilityGroup,''))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{BackupType}',@CurrentBackupType)\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Partial}','PARTIAL')\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{CopyOnly}','COPY_ONLY')\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Description}',LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(ISNULL(@Description,''),'\\',''),'/',''),':',''),'*',''),'?',''),'\"',''),'<',''),'>',''),'|',''))))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Year}',CAST(DATEPART(YEAR,@CurrentDate) AS nvarchar))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Month}',RIGHT('0' + CAST(DATEPART(MONTH,@CurrentDate) AS nvarchar),2))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Day}',RIGHT('0' + CAST(DATEPART(DAY,@CurrentDate) AS nvarchar),2))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Week}',RIGHT('0' + CAST(DATEPART(WEEK,@CurrentDate) AS nvarchar),2))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Hour}',RIGHT('0' + CAST(DATEPART(HOUR,@CurrentDate) AS nvarchar),2))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Minute}',RIGHT('0' + CAST(DATEPART(MINUTE,@CurrentDate) AS nvarchar),2))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Second}',RIGHT('0' + CAST(DATEPART(SECOND,@CurrentDate) AS nvarchar),2))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Millisecond}',RIGHT('00' + CAST(DATEPART(MILLISECOND,@CurrentDate) AS nvarchar),3))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{Microsecond}',RIGHT('00000' + CAST(DATEPART(MICROSECOND,@CurrentDate) AS nvarchar),6))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{NumberOfFiles}',@CurrentNumberOfFiles)\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{FileExtension}',@CurrentFileExtension)\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{MajorVersion}',ISNULL(CAST(SERVERPROPERTY('ProductMajorVersion') AS nvarchar),PARSENAME(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar),4)))\r\n      SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{MinorVersion}',ISNULL(CAST(SERVERPROPERTY('ProductMinorVersion') AS nvarchar),PARSENAME(CAST(SERVERPROPERTY('ProductVersion') AS nvarchar),3)))\r\n\r\n      SELECT @CurrentMaxFilePathLength = CASE\r\n      WHEN EXISTS (SELECT * FROM @CurrentDirectories) THEN (SELECT MAX(LEN(DirectoryPath + @DirectorySeparator)) FROM @CurrentDirectories)\r\n      WHEN EXISTS (SELECT * FROM @CurrentURLs) THEN (SELECT MAX(LEN(DirectoryPath + @DirectorySeparator)) FROM @CurrentURLs)\r\n      END\r\n      + LEN(REPLACE(REPLACE(@CurrentDatabaseFileName,'{DatabaseName}',@CurrentDatabaseNameFS), '{FileNumber}', CASE WHEN @CurrentNumberOfFiles >= 1 AND @CurrentNumberOfFiles <= 9 THEN '1' WHEN @CurrentNumberOfFiles >= 10 THEN '01' END))\r\n\r\n      -- The maximum length of a backup device is 259 characters\r\n      IF @CurrentMaxFilePathLength > 259\r\n      BEGIN\r\n        SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{DatabaseName}',LEFT(@CurrentDatabaseNameFS,CASE WHEN (LEN(@CurrentDatabaseNameFS) + 259 - @CurrentMaxFilePathLength - 3) < 20 THEN 20 ELSE (LEN(@CurrentDatabaseNameFS) + 259 - @CurrentMaxFilePathLength - 3) END) + '...')\r\n      END\r\n      ELSE\r\n      BEGIN\r\n        SET @CurrentDatabaseFileName = REPLACE(@CurrentDatabaseFileName,'{DatabaseName}',@CurrentDatabaseNameFS)\r\n      END\r\n\r\n      IF EXISTS (SELECT * FROM @CurrentDirectories WHERE Mirror = 0)\r\n      BEGIN\r\n        SET @CurrentFileNumber = 0\r\n\r\n        WHILE @CurrentFileNumber < @CurrentNumberOfFiles\r\n        BEGIN\r\n          SET @CurrentFileNumber = @CurrentFileNumber + 1\r\n\r\n          SELECT @CurrentDirectoryPath = DirectoryPath\r\n          FROM @CurrentDirectories\r\n          WHERE @CurrentFileNumber >= (DirectoryNumber - 1) * (SELECT @CurrentNumberOfFiles / COUNT(*) FROM @CurrentDirectories WHERE Mirror = 0) + 1\r\n          AND @CurrentFileNumber <= DirectoryNumber * (SELECT @CurrentNumberOfFiles / COUNT(*) FROM @CurrentDirectories WHERE Mirror = 0)\r\n          AND Mirror = 0\r\n\r\n          SET @CurrentFileName = REPLACE(@CurrentDatabaseFileName, '{FileNumber}', CASE WHEN @CurrentNumberOfFiles >= 1 AND @CurrentNumberOfFiles <= 9 THEN CAST(@CurrentFileNumber AS nvarchar) WHEN @CurrentNumberOfFiles >= 10 THEN RIGHT('0' + CAST(@CurrentFileNumber AS nvarchar),2) END)\r\n\r\n          IF @CurrentDirectoryPath = 'NUL'\r\n          BEGIN\r\n            SET @CurrentFilePath = 'NUL'\r\n          END\r\n          ELSE\r\n          BEGIN\r\n            SET @CurrentFilePath = @CurrentDirectoryPath + @DirectorySeparator + @CurrentFileName\r\n          END\r\n\r\n          INSERT INTO @CurrentFiles ([Type], FilePath, Mirror)\r\n          SELECT 'DISK', @CurrentFilePath, 0\r\n\r\n          SET @CurrentDirectoryPath = NULL\r\n          SET @CurrentFileName = NULL\r\n          SET @CurrentFilePath = NULL\r\n        END\r\n\r\n        INSERT INTO @CurrentBackupSet (Mirror, VerifyCompleted)\r\n        SELECT 0, 0\r\n      END\r\n\r\n      IF EXISTS (SELECT * FROM @CurrentDirectories WHERE Mirror = 1)\r\n      BEGIN\r\n        SET @CurrentFileNumber = 0\r\n\r\n        WHILE @CurrentFileNumber < @CurrentNumberOfFiles\r\n        BEGIN\r\n          SET @CurrentFileNumber = @CurrentFileNumber + 1\r\n\r\n          SELECT @CurrentDirectoryPath = DirectoryPath\r\n          FROM @CurrentDirectories\r\n          WHERE @CurrentFileNumber >= (DirectoryNumber - 1) * (SELECT @CurrentNumberOfFiles / COUNT(*) FROM @CurrentDirectories WHERE Mirror = 1) + 1\r\n          AND @CurrentFileNumber <= DirectoryNumber * (SELECT @CurrentNumberOfFiles / COUNT(*) FROM @CurrentDirectories WHERE Mirror = 1)\r\n          AND Mirror = 1\r\n\r\n          SET @CurrentFileName = REPLACE(@CurrentDatabaseFileName, '{FileNumber}', CASE WHEN @CurrentNumberOfFiles > 1 AND @CurrentNumberOfFiles <= 9 THEN CAST(@CurrentFileNumber AS nvarchar) WHEN @CurrentNumberOfFiles >= 10 THEN RIGHT('0' + CAST(@CurrentFileNumber AS nvarchar),2) ELSE '' END)\r\n\r\n          SET @CurrentFilePath = @CurrentDirectoryPath + @DirectorySeparator + @CurrentFileName\r\n\r\n          INSERT INTO @CurrentFiles ([Type], FilePath, Mirror)\r\n          SELECT 'DISK', @CurrentFilePath, 1\r\n\r\n          SET @CurrentDirectoryPath = NULL\r\n          SET @CurrentFileName = NULL\r\n          SET @CurrentFilePath = NULL\r\n        END\r\n\r\n        INSERT INTO @CurrentBackupSet (Mirror, VerifyCompleted)\r\n        SELECT 1, 0\r\n      END\r\n\r\n      IF EXISTS (SELECT * FROM @CurrentURLs WHERE Mirror = 0)\r\n      BEGIN\r\n        SET @CurrentFileNumber = 0\r\n\r\n        WHILE @CurrentFileNumber < @CurrentNumberOfFiles\r\n        BEGIN\r\n          SET @CurrentFileNumber = @CurrentFileNumber + 1\r\n\r\n          SELECT @CurrentDirectoryPath = DirectoryPath\r\n          FROM @CurrentURLs\r\n          WHERE @CurrentFileNumber >= (DirectoryNumber - 1) * (SELECT @CurrentNumberOfFiles / COUNT(*) FROM @CurrentURLs WHERE Mirror = 0) + 1\r\n          AND @CurrentFileNumber <= DirectoryNumber * (SELECT @CurrentNumberOfFiles / COUNT(*) FROM @CurrentURLs WHERE Mirror = 0)\r\n          AND Mirror = 0\r\n\r\n          SET @CurrentFileName = REPLACE(@CurrentDatabaseFileName, '{FileNumber}', CASE WHEN @CurrentNumberOfFiles > 1 AND @CurrentNumberOfFiles <= 9 THEN CAST(@CurrentFileNumber AS nvarchar) WHEN @CurrentNumberOfFiles >= 10 THEN RIGHT('0' + CAST(@CurrentFileNumber AS nvarchar),2) ELSE '' END)\r\n\r\n          SET @CurrentFilePath = @CurrentDirectoryPath + @DirectorySeparator + @CurrentFileName\r\n\r\n          INSERT INTO @CurrentFiles ([Type], FilePath, Mirror)\r\n          SELECT 'URL', @CurrentFilePath, 0\r\n\r\n          SET @CurrentDirectoryPath = NULL\r\n          SET @CurrentFileName = NULL\r\n          SET @CurrentFilePath = NULL\r\n        END\r\n\r\n        INSERT INTO @CurrentBackupSet (Mirror, VerifyCompleted)\r\n        SELECT 0, 0\r\n      END\r\n\r\n      IF EXISTS (SELECT * FROM @CurrentURLs WHERE Mirror = 1)\r\n      BEGIN\r\n        SET @CurrentFileNumber = 0\r\n\r\n        WHILE @CurrentFileNumber < @CurrentNumberOfFiles\r\n        BEGIN\r\n          SET @CurrentFileNumber = @CurrentFileNumber + 1\r\n\r\n          SELECT @CurrentDirectoryPath = DirectoryPath\r\n          FROM @CurrentURLs\r\n          WHERE @CurrentFileNumber >= (DirectoryNumber - 1) * (SELECT @CurrentNumberOfFiles / COUNT(*) FROM @CurrentURLs WHERE Mirror = 0) + 1\r\n          AND @CurrentFileNumber <= DirectoryNumber * (SELECT @CurrentNumberOfFiles / COUNT(*) FROM @CurrentURLs WHERE Mirror = 0)\r\n          AND Mirror = 1\r\n\r\n          SET @CurrentFileName = REPLACE(@CurrentDatabaseFileName, '{FileNumber}', CASE WHEN @CurrentNumberOfFiles > 1 AND @CurrentNumberOfFiles <= 9 THEN CAST(@CurrentFileNumber AS nvarchar) WHEN @CurrentNumberOfFiles >= 10 THEN RIGHT('0' + CAST(@CurrentFileNumber AS nvarchar),2) ELSE '' END)\r\n\r\n          SET @CurrentFilePath = @CurrentDirectoryPath + @DirectorySeparator + @CurrentFileName\r\n\r\n          INSERT INTO @CurrentFiles ([Type], FilePath, Mirror)\r\n          SELECT 'URL', @CurrentFilePath, 1\r\n\r\n          SET @CurrentDirectoryPath = NULL\r\n          SET @CurrentFileName = NULL\r\n          SET @CurrentFilePath = NULL\r\n        END\r\n\r\n        INSERT INTO @CurrentBackupSet (Mirror, VerifyCompleted)\r\n        SELECT 1, 0\r\n      END\r\n\r\n      -- Create directory\r\n      IF @HostPlatform = 'Windows'\r\n      AND (@BackupSoftware <> 'DATA_DOMAIN_BOOST' OR @BackupSoftware IS NULL)\r\n      AND NOT EXISTS(SELECT * FROM @CurrentDirectories WHERE DirectoryPath = 'NUL')\r\n      BEGIN\r\n        WHILE (1 = 1)\r\n        BEGIN\r\n          SELECT TOP 1 @CurrentDirectoryID = ID,\r\n                       @CurrentDirectoryPath = DirectoryPath\r\n          FROM @CurrentDirectories\r\n          WHERE CreateCompleted = 0\r\n          ORDER BY ID ASC\r\n\r\n          IF @@ROWCOUNT = 0\r\n          BEGIN\r\n            BREAK\r\n          END\r\n\r\n          SET @CurrentDatabaseContext = 'master'\r\n\r\n          SET @CurrentCommandType = 'xp_create_subdir'\r\n\r\n          SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_create_subdir N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''' IF @ReturnCode <> 0 RAISERROR(''Error creating directory.'', 16, 1)'\r\n\r\n          EXECUTE @CurrentCommandOutput = dbo.CommandExecute @DatabaseContext = @CurrentDatabaseContext, @Command = @CurrentCommand, @CommandType = @CurrentCommandType, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute\r\n          SET @Error = @@ERROR\r\n          IF @Error <> 0 SET @CurrentCommandOutput = @Error\r\n          IF @CurrentCommandOutput <> 0 SET @ReturnCode = @CurrentCommandOutput\r\n\r\n          UPDATE @CurrentDirectories\r\n          SET CreateCompleted = 1,\r\n              CreateOutput = @CurrentCommandOutput\r\n          WHERE ID = @CurrentDirectoryID\r\n\r\n          SET @CurrentDirectoryID = NULL\r\n          SET @CurrentDirectoryPath = NULL\r\n\r\n          SET @CurrentDatabaseContext = NULL\r\n          SET @CurrentCommand = NULL\r\n          SET @CurrentCommandOutput = NULL\r\n          SET @CurrentCommandType = NULL\r\n        END\r\n      END\r\n\r\n      IF @CleanupMode = 'BEFORE_BACKUP'\r\n      BEGIN\r\n        INSERT INTO @CurrentCleanupDates (CleanupDate, Mirror)\r\n        SELECT DATEADD(hh,-(@CleanupTime),SYSDATETIME()), 0\r\n\r\n        IF NOT EXISTS(SELECT * FROM @CurrentCleanupDates WHERE (Mirror = 0 OR Mirror IS NULL) AND CleanupDate IS NULL)\r\n        BEGIN\r\n          UPDATE @CurrentDirectories\r\n          SET CleanupDate = (SELECT MIN(CleanupDate)\r\n                             FROM @CurrentCleanupDates\r\n                             WHERE (Mirror = 0 OR Mirror IS NULL)),\r\n              CleanupMode = 'BEFORE_BACKUP'\r\n          WHERE Mirror = 0\r\n        END\r\n      END\r\n\r\n      IF @MirrorCleanupMode = 'BEFORE_BACKUP'\r\n      BEGIN\r\n        INSERT INTO @CurrentCleanupDates (CleanupDate, Mirror)\r\n        SELECT DATEADD(hh,-(@MirrorCleanupTime),SYSDATETIME()), 1\r\n\r\n        IF NOT EXISTS(SELECT * FROM @CurrentCleanupDates WHERE (Mirror = 1 OR Mirror IS NULL) AND CleanupDate IS NULL)\r\n        BEGIN\r\n          UPDATE @CurrentDirectories\r\n          SET CleanupDate = (SELECT MIN(CleanupDate)\r\n                             FROM @CurrentCleanupDates\r\n                             WHERE (Mirror = 1 OR Mirror IS NULL)),\r\n              CleanupMode = 'BEFORE_BACKUP'\r\n          WHERE Mirror = 1\r\n        END\r\n      END\r\n\r\n      -- Delete old backup files, before backup\r\n      IF NOT EXISTS (SELECT * FROM @CurrentDirectories WHERE CreateOutput <> 0 OR CreateOutput IS NULL)\r\n      AND (@BackupSoftware <> 'DATA_DOMAIN_BOOST' OR @BackupSoftware IS NULL)\r\n      AND @CurrentBackupType = @BackupType\r\n      BEGIN\r\n        WHILE (1 = 1)\r\n        BEGIN\r\n          SELECT TOP 1 @CurrentDirectoryID = ID,\r\n                       @CurrentDirectoryPath = DirectoryPath,\r\n                       @CurrentCleanupDate = CleanupDate\r\n          FROM @CurrentDirectories\r\n          WHERE CleanupDate IS NOT NULL\r\n          AND CleanupMode = 'BEFORE_BACKUP'\r\n          AND CleanupCompleted = 0\r\n          ORDER BY ID ASC\r\n\r\n          IF @@ROWCOUNT = 0\r\n          BEGIN\r\n            BREAK\r\n          END\r\n\r\n          IF @BackupSoftware IS NULL\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'xp_delete_file'\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_delete_file 0, N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''', ''' + @CurrentFileExtension + ''', ''' + CONVERT(nvarchar(19),@CurrentCleanupDate,126) + ''' IF @ReturnCode <> 0 RAISERROR(''Error deleting files.'', 16, 1)'\r\n          END\r\n\r\n          IF @BackupSoftware = 'LITESPEED'\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'xp_slssqlmaint'\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_slssqlmaint N''-MAINTDEL -DELFOLDER \"' + REPLACE(@CurrentDirectoryPath,'''','''''') + '\" -DELEXTENSION \"' + @CurrentFileExtension + '\" -DELUNIT \"' + CAST(DATEDIFF(mi,@CurrentCleanupDate,SYSDATETIME()) + 1 AS nvarchar) + '\" -DELUNITTYPE \"minutes\" -DELUSEAGE'' IF @ReturnCode <> 0 RAISERROR(''Error deleting LiteSpeed backup files.'', 16, 1)'\r\n          END\r\n\r\n          IF @BackupSoftware = 'SQLBACKUP'\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'sqbutility'\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.sqbutility 1032, N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''', N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''', ''' + CASE WHEN @CurrentBackupType = 'FULL' THEN 'D' WHEN @CurrentBackupType = 'DIFF' THEN 'I' WHEN @CurrentBackupType = 'LOG' THEN 'L' END + ''', ''' + CAST(DATEDIFF(hh,@CurrentCleanupDate,SYSDATETIME()) + 1 AS nvarchar) + 'h'', ' + ISNULL('''' + REPLACE(@EncryptionKey,'''','''''') + '''','NULL') + ' IF @ReturnCode <> 0 RAISERROR(''Error deleting SQLBackup backup files.'', 16, 1)'\r\n          END\r\n\r\n          IF @BackupSoftware = 'SQLSAFE'\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'xp_ss_delete'\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_ss_delete @filename = N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + '\\*.' + @CurrentFileExtension + ''', @age = ''' + CAST(DATEDIFF(mi,@CurrentCleanupDate,SYSDATETIME()) + 1 AS nvarchar) + 'Minutes'' IF @ReturnCode <> 0 RAISERROR(''Error deleting SQLsafe backup files.'', 16, 1)'\r\n          END\r\n\r\n          EXECUTE @CurrentCommandOutput = dbo.CommandExecute @DatabaseContext = @CurrentDatabaseContext, @Command = @CurrentCommand, @CommandType = @CurrentCommandType, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute\r\n          SET @Error = @@ERROR\r\n          IF @Error <> 0 SET @CurrentCommandOutput = @Error\r\n          IF @CurrentCommandOutput <> 0 SET @ReturnCode = @CurrentCommandOutput\r\n\r\n          UPDATE @CurrentDirectories\r\n          SET CleanupCompleted = 1,\r\n              CleanupOutput = @CurrentCommandOutput\r\n          WHERE ID = @CurrentDirectoryID\r\n\r\n          SET @CurrentDirectoryID = NULL\r\n          SET @CurrentDirectoryPath = NULL\r\n          SET @CurrentCleanupDate = NULL\r\n\r\n          SET @CurrentDatabaseContext = NULL\r\n          SET @CurrentCommand = NULL\r\n          SET @CurrentCommandOutput = NULL\r\n          SET @CurrentCommandType = NULL\r\n        END\r\n      END\r\n\r\n      -- Perform a backup\r\n      IF NOT EXISTS (SELECT * FROM @CurrentDirectories WHERE DirectoryPath <> 'NUL' AND (CreateOutput <> 0 OR CreateOutput IS NULL)) OR @HostPlatform = 'Linux'\r\n      BEGIN\r\n        IF @BackupSoftware IS NULL\r\n        BEGIN\r\n          SET @CurrentDatabaseContext = 'master'\r\n\r\n          SELECT @CurrentCommandType = CASE\r\n          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'BACKUP_DATABASE'\r\n          WHEN @CurrentBackupType = 'LOG' THEN 'BACKUP_LOG'\r\n          END\r\n\r\n          SELECT @CurrentCommand = CASE\r\n          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'BACKUP DATABASE ' + QUOTENAME(@CurrentDatabaseName)\r\n          WHEN @CurrentBackupType = 'LOG' THEN 'BACKUP LOG ' + QUOTENAME(@CurrentDatabaseName)\r\n          END\r\n\r\n          IF @ReadWriteFileGroups = 'Y' AND @CurrentDatabaseName <> 'master' SET @CurrentCommand += ' READ_WRITE_FILEGROUPS'\r\n\r\n          SET @CurrentCommand += ' TO'\r\n\r\n          SELECT @CurrentCommand += ' ' + [Type] + ' = N''' + REPLACE(FilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY FilePath ASC) <> @CurrentNumberOfFiles THEN ',' ELSE '' END\r\n          FROM @CurrentFiles\r\n          WHERE Mirror = 0\r\n          ORDER BY FilePath ASC\r\n\r\n          IF EXISTS(SELECT * FROM @CurrentFiles WHERE Mirror = 1)\r\n          BEGIN\r\n            SET @CurrentCommand += ' MIRROR TO'\r\n\r\n            SELECT @CurrentCommand += ' ' + [Type] + ' = N''' + REPLACE(FilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY FilePath ASC) <> @CurrentNumberOfFiles THEN ',' ELSE '' END\r\n            FROM @CurrentFiles\r\n            WHERE Mirror = 1\r\n            ORDER BY FilePath ASC\r\n          END\r\n\r\n          SET @CurrentCommand += ' WITH '\r\n          IF @CheckSum = 'Y' SET @CurrentCommand += 'CHECKSUM'\r\n          IF @CheckSum = 'N' SET @CurrentCommand += 'NO_CHECKSUM'\r\n\r\n          IF @Version >= 10\r\n          BEGIN\r\n            SET @CurrentCommand += CASE WHEN @Compress = 'Y' AND (@CurrentIsEncrypted = 0 OR (@CurrentIsEncrypted = 1 AND ((@Version >= 13 AND @CurrentMaxTransferSize >= 65537) OR @Version >= 15.0404316 OR SERVERPROPERTY('EngineEdition') = 8))) THEN ', COMPRESSION' ELSE ', NO_COMPRESSION' END\r\n          END\r\n\r\n          IF @CurrentBackupType = 'DIFF' SET @CurrentCommand += ', DIFFERENTIAL'\r\n\r\n          IF EXISTS(SELECT * FROM @CurrentFiles WHERE Mirror = 1)\r\n          BEGIN\r\n            SET @CurrentCommand += ', FORMAT'\r\n          END\r\n\r\n          IF @CopyOnly = 'Y' SET @CurrentCommand += ', COPY_ONLY'\r\n          IF @NoRecovery = 'Y' AND @CurrentBackupType = 'LOG' SET @CurrentCommand += ', NORECOVERY'\r\n          IF @Init = 'Y' SET @CurrentCommand += ', INIT'\r\n          IF @Format = 'Y' SET @CurrentCommand += ', FORMAT'\r\n          IF @BlockSize IS NOT NULL SET @CurrentCommand += ', BLOCKSIZE = ' + CAST(@BlockSize AS nvarchar)\r\n          IF @BufferCount IS NOT NULL SET @CurrentCommand += ', BUFFERCOUNT = ' + CAST(@BufferCount AS nvarchar)\r\n          IF @CurrentMaxTransferSize IS NOT NULL SET @CurrentCommand += ', MAXTRANSFERSIZE = ' + CAST(@CurrentMaxTransferSize AS nvarchar)\r\n          IF @Description IS NOT NULL SET @CurrentCommand += ', DESCRIPTION = N''' + REPLACE(@Description,'''','''''') + ''''\r\n          IF @Encrypt = 'Y' SET @CurrentCommand += ', ENCRYPTION (ALGORITHM = ' + UPPER(@EncryptionAlgorithm) + ', '\r\n          IF @Encrypt = 'Y' AND @ServerCertificate IS NOT NULL SET @CurrentCommand += 'SERVER CERTIFICATE = ' + QUOTENAME(@ServerCertificate)\r\n          IF @Encrypt = 'Y' AND @ServerAsymmetricKey IS NOT NULL SET @CurrentCommand += 'SERVER ASYMMETRIC KEY = ' + QUOTENAME(@ServerAsymmetricKey)\r\n          IF @Encrypt = 'Y' SET @CurrentCommand += ')'\r\n          IF @URL IS NOT NULL AND @Credential IS NOT NULL SET @CurrentCommand += ', CREDENTIAL = N''' + REPLACE(@Credential,'''','''''') + ''''\r\n        END\r\n\r\n        IF @BackupSoftware = 'LITESPEED'\r\n        BEGIN\r\n          SET @CurrentDatabaseContext = 'master'\r\n\r\n          SELECT @CurrentCommandType = CASE\r\n          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'xp_backup_database'\r\n          WHEN @CurrentBackupType = 'LOG' THEN 'xp_backup_log'\r\n          END\r\n\r\n          SELECT @CurrentCommand = CASE\r\n          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_backup_database @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''\r\n          WHEN @CurrentBackupType = 'LOG' THEN 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_backup_log @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''\r\n          END\r\n\r\n          SELECT @CurrentCommand += ', @filename = N''' + REPLACE(FilePath,'''','''''') + ''''\r\n          FROM @CurrentFiles\r\n          WHERE Mirror = 0\r\n          ORDER BY FilePath ASC\r\n\r\n          IF EXISTS(SELECT * FROM @CurrentFiles WHERE Mirror = 1)\r\n          BEGIN\r\n            SELECT @CurrentCommand += ', @mirror = N''' + REPLACE(FilePath,'''','''''') + ''''\r\n            FROM @CurrentFiles\r\n            WHERE Mirror = 1\r\n            ORDER BY FilePath ASC\r\n          END\r\n\r\n          SET @CurrentCommand += ', @with = '''\r\n          IF @CheckSum = 'Y' SET @CurrentCommand += 'CHECKSUM'\r\n          IF @CheckSum = 'N' SET @CurrentCommand += 'NO_CHECKSUM'\r\n          IF @CurrentBackupType = 'DIFF' SET @CurrentCommand += ', DIFFERENTIAL'\r\n          IF @CopyOnly = 'Y' SET @CurrentCommand += ', COPY_ONLY'\r\n          IF @NoRecovery = 'Y' AND @CurrentBackupType = 'LOG' SET @CurrentCommand += ', NORECOVERY'\r\n          IF @BlockSize IS NOT NULL SET @CurrentCommand += ', BLOCKSIZE = ' + CAST(@BlockSize AS nvarchar)\r\n          SET @CurrentCommand += ''''\r\n          IF @ReadWriteFileGroups = 'Y' AND @CurrentDatabaseName <> 'master' SET @CurrentCommand += ', @read_write_filegroups = 1'\r\n          IF @CompressionLevel IS NOT NULL SET @CurrentCommand += ', @compressionlevel = ' + CAST(@CompressionLevel AS nvarchar)\r\n          IF @AdaptiveCompression IS NOT NULL SET @CurrentCommand += ', @adaptivecompression = ''' + CASE WHEN @AdaptiveCompression = 'SIZE' THEN 'Size' WHEN @AdaptiveCompression = 'SPEED' THEN 'Speed' END + ''''\r\n          IF @BufferCount IS NOT NULL SET @CurrentCommand += ', @buffercount = ' + CAST(@BufferCount AS nvarchar)\r\n          IF @CurrentMaxTransferSize IS NOT NULL SET @CurrentCommand += ', @maxtransfersize = ' + CAST(@CurrentMaxTransferSize AS nvarchar)\r\n          IF @Threads IS NOT NULL SET @CurrentCommand += ', @threads = ' + CAST(@Threads AS nvarchar)\r\n          IF @Init = 'Y' SET @CurrentCommand += ', @init = 1'\r\n          IF @Format = 'Y' SET @CurrentCommand += ', @format = 1'\r\n          IF @Throttle IS NOT NULL SET @CurrentCommand += ', @throttle = ' + CAST(@Throttle AS nvarchar)\r\n          IF @Description IS NOT NULL SET @CurrentCommand += ', @desc = N''' + REPLACE(@Description,'''','''''') + ''''\r\n          IF @ObjectLevelRecoveryMap = 'Y' SET @CurrentCommand += ', @olrmap = 1'\r\n\r\n          IF @EncryptionAlgorithm IS NOT NULL SET @CurrentCommand += ', @cryptlevel = ' + CASE\r\n          WHEN @EncryptionAlgorithm = 'RC2_40' THEN '0'\r\n          WHEN @EncryptionAlgorithm = 'RC2_56' THEN '1'\r\n          WHEN @EncryptionAlgorithm = 'RC2_112' THEN '2'\r\n          WHEN @EncryptionAlgorithm = 'RC2_128' THEN '3'\r\n          WHEN @EncryptionAlgorithm = 'TRIPLE_DES_3KEY' THEN '4'\r\n          WHEN @EncryptionAlgorithm = 'RC4_128' THEN '5'\r\n          WHEN @EncryptionAlgorithm = 'AES_128' THEN '6'\r\n          WHEN @EncryptionAlgorithm = 'AES_192' THEN '7'\r\n          WHEN @EncryptionAlgorithm = 'AES_256' THEN '8'\r\n          END\r\n\r\n          IF @EncryptionKey IS NOT NULL SET @CurrentCommand += ', @encryptionkey = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''\r\n          SET @CurrentCommand += ' IF @ReturnCode <> 0 RAISERROR(''Error performing LiteSpeed backup.'', 16, 1)'\r\n        END\r\n\r\n        IF @BackupSoftware = 'SQLBACKUP'\r\n        BEGIN\r\n          SET @CurrentDatabaseContext = 'master'\r\n\r\n          SET @CurrentCommandType = 'sqlbackup'\r\n\r\n          SELECT @CurrentCommand = CASE\r\n          WHEN @CurrentBackupType IN('DIFF','FULL') THEN 'BACKUP DATABASE ' + QUOTENAME(@CurrentDatabaseName)\r\n          WHEN @CurrentBackupType = 'LOG' THEN 'BACKUP LOG ' + QUOTENAME(@CurrentDatabaseName)\r\n          END\r\n\r\n          IF @ReadWriteFileGroups = 'Y' AND @CurrentDatabaseName <> 'master' SET @CurrentCommand += ' READ_WRITE_FILEGROUPS'\r\n\r\n          SET @CurrentCommand += ' TO'\r\n\r\n          SELECT @CurrentCommand += ' DISK = N''' + REPLACE(FilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY FilePath ASC) <> @CurrentNumberOfFiles THEN ',' ELSE '' END\r\n          FROM @CurrentFiles\r\n          WHERE Mirror = 0\r\n          ORDER BY FilePath ASC\r\n\r\n          SET @CurrentCommand += ' WITH '\r\n\r\n          IF EXISTS(SELECT * FROM @CurrentFiles WHERE Mirror = 1)\r\n          BEGIN\r\n            SET @CurrentCommand += ' MIRRORFILE' + ' = N''' + REPLACE((SELECT FilePath FROM @CurrentFiles WHERE Mirror = 1),'''','''''') + ''', '\r\n          END\r\n\r\n          IF @CheckSum = 'Y' SET @CurrentCommand += 'CHECKSUM'\r\n          IF @CheckSum = 'N' SET @CurrentCommand += 'NO_CHECKSUM'\r\n          IF @CurrentBackupType = 'DIFF' SET @CurrentCommand += ', DIFFERENTIAL'\r\n          IF @CopyOnly = 'Y' SET @CurrentCommand += ', COPY_ONLY'\r\n          IF @NoRecovery = 'Y' AND @CurrentBackupType = 'LOG' SET @CurrentCommand += ', NORECOVERY'\r\n          IF @Init = 'Y' SET @CurrentCommand += ', INIT'\r\n          IF @Format = 'Y' SET @CurrentCommand += ', FORMAT'\r\n          IF @CompressionLevel IS NOT NULL SET @CurrentCommand += ', COMPRESSION = ' + CAST(@CompressionLevel AS nvarchar)\r\n          IF @Threads IS NOT NULL SET @CurrentCommand += ', THREADCOUNT = ' + CAST(@Threads AS nvarchar)\r\n          IF @CurrentMaxTransferSize IS NOT NULL SET @CurrentCommand += ', MAXTRANSFERSIZE = ' + CAST(@CurrentMaxTransferSize AS nvarchar)\r\n          IF @Description IS NOT NULL SET @CurrentCommand += ', DESCRIPTION = N''' + REPLACE(@Description,'''','''''') + ''''\r\n\r\n          IF @EncryptionAlgorithm IS NOT NULL SET @CurrentCommand += ', KEYSIZE = ' + CASE\r\n          WHEN @EncryptionAlgorithm = 'AES_128' THEN '128'\r\n          WHEN @EncryptionAlgorithm = 'AES_256' THEN '256'\r\n          END\r\n\r\n          IF @EncryptionKey IS NOT NULL SET @CurrentCommand += ', PASSWORD = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''\r\n          SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.sqlbackup N''-SQL \"' + REPLACE(@CurrentCommand,'''','''''') + '\"''' + ' IF @ReturnCode <> 0 RAISERROR(''Error performing SQLBackup backup.'', 16, 1)'\r\n        END\r\n\r\n        IF @BackupSoftware = 'SQLSAFE'\r\n        BEGIN\r\n          SET @CurrentDatabaseContext = 'master'\r\n\r\n          SET @CurrentCommandType = 'xp_ss_backup'\r\n\r\n          SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_ss_backup @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''\r\n\r\n          SELECT @CurrentCommand += ', ' + CASE WHEN ROW_NUMBER() OVER (ORDER BY FilePath ASC) = 1 THEN '@filename' ELSE '@backupfile' END + ' = N''' + REPLACE(FilePath,'''','''''') + ''''\r\n          FROM @CurrentFiles\r\n          WHERE Mirror = 0\r\n          ORDER BY FilePath ASC\r\n\r\n          SELECT @CurrentCommand += ', @mirrorfile = N''' + REPLACE(FilePath,'''','''''') + ''''\r\n          FROM @CurrentFiles\r\n          WHERE Mirror = 1\r\n          ORDER BY FilePath ASC\r\n\r\n          SET @CurrentCommand += ', @backuptype = ' + CASE WHEN @CurrentBackupType = 'FULL' THEN '''Full''' WHEN @CurrentBackupType = 'DIFF' THEN '''Differential''' WHEN @CurrentBackupType = 'LOG' THEN '''Log''' END\r\n          IF @ReadWriteFileGroups = 'Y' AND @CurrentDatabaseName <> 'master' SET @CurrentCommand += ', @readwritefilegroups = 1'\r\n          SET @CurrentCommand += ', @checksum = ' + CASE WHEN @CheckSum = 'Y' THEN '1' WHEN @CheckSum = 'N' THEN '0' END\r\n          SET @CurrentCommand += ', @copyonly = ' + CASE WHEN @CopyOnly = 'Y' THEN '1' WHEN @CopyOnly = 'N' THEN '0' END\r\n          IF @CompressionLevel IS NOT NULL SET @CurrentCommand += ', @compressionlevel = ' + CAST(@CompressionLevel AS nvarchar)\r\n          IF @Threads IS NOT NULL SET @CurrentCommand += ', @threads = ' + CAST(@Threads AS nvarchar)\r\n          IF @Init = 'Y' SET @CurrentCommand += ', @overwrite = 1'\r\n          IF @Description IS NOT NULL SET @CurrentCommand += ', @desc = N''' + REPLACE(@Description,'''','''''') + ''''\r\n\r\n          IF @EncryptionAlgorithm IS NOT NULL SET @CurrentCommand += ', @encryptiontype = N''' + CASE\r\n          WHEN @EncryptionAlgorithm = 'AES_128' THEN 'AES128'\r\n          WHEN @EncryptionAlgorithm = 'AES_256' THEN 'AES256'\r\n          END + ''''\r\n\r\n          IF @EncryptionKey IS NOT NULL SET @CurrentCommand += ', @encryptedbackuppassword = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''\r\n          SET @CurrentCommand += ' IF @ReturnCode <> 0 RAISERROR(''Error performing SQLsafe backup.'', 16, 1)'\r\n        END\r\n\r\n        IF @BackupSoftware = 'DATA_DOMAIN_BOOST'\r\n        BEGIN\r\n          SET @CurrentDatabaseContext = 'master'\r\n\r\n          SET @CurrentCommandType = 'emc_run_backup'\r\n\r\n          SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.emc_run_backup '''\r\n\r\n          SET @CurrentCommand += ' -c ' + CASE WHEN @CurrentAvailabilityGroup IS NOT NULL THEN @Cluster ELSE CAST(SERVERPROPERTY('MachineName') AS nvarchar) END\r\n\r\n          SET @CurrentCommand += ' -l ' + CASE\r\n          WHEN @CurrentBackupType = 'FULL' THEN 'full'\r\n          WHEN @CurrentBackupType = 'DIFF' THEN 'diff'\r\n          WHEN @CurrentBackupType = 'LOG' THEN 'incr'\r\n          END\r\n\r\n          IF @NoRecovery = 'Y' SET @CurrentCommand += ' -H'\r\n\r\n          IF @CleanupTime IS NOT NULL SET @CurrentCommand += ' -y +' + CAST(@CleanupTime/24 + CASE WHEN @CleanupTime%24 > 0 THEN 1 ELSE 0 END AS nvarchar) + 'd'\r\n\r\n          IF @CheckSum = 'Y' SET @CurrentCommand += ' -k'\r\n\r\n          SET @CurrentCommand += ' -S ' + CAST(@CurrentNumberOfFiles AS nvarchar)\r\n\r\n          IF @Description IS NOT NULL SET @CurrentCommand += ' -b \"' + REPLACE(@Description,'''','''''') + '\"'\r\n\r\n          IF @BufferCount IS NOT NULL SET @CurrentCommand += ' -O \"BUFFERCOUNT=' + CAST(@BufferCount AS nvarchar) + '\"'\r\n\r\n          IF @ReadWriteFileGroups = 'Y' AND @CurrentDatabaseName <> 'master' SET @CurrentCommand += ' -O \"READ_WRITE_FILEGROUPS\"'\r\n\r\n          IF @DataDomainBoostHost IS NOT NULL SET @CurrentCommand += ' -a \"NSR_DFA_SI_DD_HOST=' + REPLACE(@DataDomainBoostHost,'''','''''') + '\"'\r\n          IF @DataDomainBoostUser IS NOT NULL SET @CurrentCommand += ' -a \"NSR_DFA_SI_DD_USER=' + REPLACE(@DataDomainBoostUser,'''','''''') + '\"'\r\n          IF @DataDomainBoostDevicePath IS NOT NULL SET @CurrentCommand += ' -a \"NSR_DFA_SI_DEVICE_PATH=' + REPLACE(@DataDomainBoostDevicePath,'''','''''') + '\"'\r\n          IF @DataDomainBoostLockboxPath IS NOT NULL SET @CurrentCommand += ' -a \"NSR_DFA_SI_DD_LOCKBOX_PATH=' + REPLACE(@DataDomainBoostLockboxPath,'''','''''') + '\"'\r\n          SET @CurrentCommand += ' -a \"NSR_SKIP_NON_BACKUPABLE_STATE_DB=TRUE\"'\r\n          SET @CurrentCommand += ' -a \"BACKUP_PROMOTION=NONE\"'\r\n          IF @CopyOnly = 'Y' SET @CurrentCommand += ' -a \"NSR_COPY_ONLY=TRUE\"'\r\n\r\n          IF SERVERPROPERTY('InstanceName') IS NULL SET @CurrentCommand += ' \"MSSQL' + ':' + REPLACE(REPLACE(@CurrentDatabaseName,'''',''''''),'.','\\.') + '\"'\r\n          IF SERVERPROPERTY('InstanceName') IS NOT NULL SET @CurrentCommand += ' \"MSSQL$' + CAST(SERVERPROPERTY('InstanceName') AS nvarchar) + ':' + REPLACE(REPLACE(@CurrentDatabaseName,'''',''''''),'.','\\.') + '\"'\r\n\r\n          SET @CurrentCommand += ''''\r\n\r\n          SET @CurrentCommand += ' IF @ReturnCode <> 0 RAISERROR(''Error performing Data Domain Boost backup.'', 16, 1)'\r\n        END\r\n\r\n        EXECUTE @CurrentCommandOutput = dbo.CommandExecute @DatabaseContext = @CurrentDatabaseContext, @Command = @CurrentCommand, @CommandType = @CurrentCommandType, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute\r\n        SET @Error = @@ERROR\r\n        IF @Error <> 0 SET @CurrentCommandOutput = @Error\r\n        IF @CurrentCommandOutput <> 0 SET @ReturnCode = @CurrentCommandOutput\r\n        SET @CurrentBackupOutput = @CurrentCommandOutput\r\n      END\r\n\r\n      -- Verify the backup\r\n      IF @CurrentBackupOutput = 0 AND @Verify = 'Y'\r\n      BEGIN\r\n        WHILE (1 = 1)\r\n        BEGIN\r\n          SELECT TOP 1 @CurrentBackupSetID = ID,\r\n                       @CurrentIsMirror = Mirror\r\n          FROM @CurrentBackupSet\r\n          WHERE VerifyCompleted = 0\r\n          ORDER BY ID ASC\r\n\r\n          IF @@ROWCOUNT = 0\r\n          BEGIN\r\n            BREAK\r\n          END\r\n\r\n          IF @BackupSoftware IS NULL\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'RESTORE_VERIFYONLY'\r\n\r\n            SET @CurrentCommand = 'RESTORE VERIFYONLY FROM'\r\n\r\n            SELECT @CurrentCommand += ' ' + [Type] + ' = N''' + REPLACE(FilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY FilePath ASC) <> @CurrentNumberOfFiles THEN ',' ELSE '' END\r\n            FROM @CurrentFiles\r\n            WHERE Mirror = @CurrentIsMirror\r\n            ORDER BY FilePath ASC\r\n\r\n            SET @CurrentCommand += ' WITH '\r\n            IF @CheckSum = 'Y' SET @CurrentCommand += 'CHECKSUM'\r\n            IF @CheckSum = 'N' SET @CurrentCommand += 'NO_CHECKSUM'\r\n            IF @URL IS NOT NULL AND @Credential IS NOT NULL SET @CurrentCommand += ', CREDENTIAL = N''' + REPLACE(@Credential,'''','''''') + ''''\r\n          END\r\n\r\n          IF @BackupSoftware = 'LITESPEED'\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'xp_restore_verifyonly'\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_restore_verifyonly'\r\n\r\n            SELECT @CurrentCommand += ' @filename = N''' + REPLACE(FilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY FilePath ASC) <> @CurrentNumberOfFiles THEN ',' ELSE '' END\r\n            FROM @CurrentFiles\r\n            WHERE Mirror = @CurrentIsMirror\r\n            ORDER BY FilePath ASC\r\n\r\n            SET @CurrentCommand += ', @with = '''\r\n            IF @CheckSum = 'Y' SET @CurrentCommand += 'CHECKSUM'\r\n            IF @CheckSum = 'N' SET @CurrentCommand += 'NO_CHECKSUM'\r\n            SET @CurrentCommand += ''''\r\n            IF @EncryptionKey IS NOT NULL SET @CurrentCommand += ', @encryptionkey = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''\r\n\r\n            SET @CurrentCommand += ' IF @ReturnCode <> 0 RAISERROR(''Error verifying LiteSpeed backup.'', 16, 1)'\r\n          END\r\n\r\n          IF @BackupSoftware = 'SQLBACKUP'\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'sqlbackup'\r\n\r\n            SET @CurrentCommand = 'RESTORE VERIFYONLY FROM'\r\n\r\n            SELECT @CurrentCommand += ' DISK = N''' + REPLACE(FilePath,'''','''''') + '''' + CASE WHEN ROW_NUMBER() OVER (ORDER BY FilePath ASC) <> @CurrentNumberOfFiles THEN ',' ELSE '' END\r\n            FROM @CurrentFiles\r\n            WHERE Mirror = @CurrentIsMirror\r\n            ORDER BY FilePath ASC\r\n\r\n            SET @CurrentCommand += ' WITH '\r\n            IF @CheckSum = 'Y' SET @CurrentCommand += 'CHECKSUM'\r\n            IF @CheckSum = 'N' SET @CurrentCommand += 'NO_CHECKSUM'\r\n            IF @EncryptionKey IS NOT NULL SET @CurrentCommand += ', PASSWORD = N''' + REPLACE(@EncryptionKey,'''','''''') + ''''\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.sqlbackup N''-SQL \"' + REPLACE(@CurrentCommand,'''','''''') + '\"''' + ' IF @ReturnCode <> 0 RAISERROR(''Error verifying SQLBackup backup.'', 16, 1)'\r\n          END\r\n\r\n          IF @BackupSoftware = 'SQLSAFE'\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'xp_ss_verify'\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_ss_verify @database = N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''''\r\n\r\n            SELECT @CurrentCommand += ', ' + CASE WHEN ROW_NUMBER() OVER (ORDER BY FilePath ASC) = 1 THEN '@filename' ELSE '@backupfile' END + ' = N''' + REPLACE(FilePath,'''','''''') + ''''\r\n            FROM @CurrentFiles\r\n            WHERE Mirror = @CurrentIsMirror\r\n            ORDER BY FilePath ASC\r\n\r\n            SET @CurrentCommand += ' IF @ReturnCode <> 0 RAISERROR(''Error verifying SQLsafe backup.'', 16, 1)'\r\n          END\r\n\r\n          EXECUTE @CurrentCommandOutput = dbo.CommandExecute @DatabaseContext = @CurrentDatabaseContext, @Command = @CurrentCommand, @CommandType = @CurrentCommandType, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute\r\n          SET @Error = @@ERROR\r\n          IF @Error <> 0 SET @CurrentCommandOutput = @Error\r\n          IF @CurrentCommandOutput <> 0 SET @ReturnCode = @CurrentCommandOutput\r\n\r\n          UPDATE @CurrentBackupSet\r\n          SET VerifyCompleted = 1,\r\n              VerifyOutput = @CurrentCommandOutput\r\n          WHERE ID = @CurrentBackupSetID\r\n\r\n          SET @CurrentBackupSetID = NULL\r\n          SET @CurrentIsMirror = NULL\r\n\r\n          SET @CurrentDatabaseContext = NULL\r\n          SET @CurrentCommand = NULL\r\n          SET @CurrentCommandOutput = NULL\r\n          SET @CurrentCommandType = NULL\r\n        END\r\n      END\r\n\r\n      IF @CleanupMode = 'AFTER_BACKUP'\r\n      BEGIN\r\n        INSERT INTO @CurrentCleanupDates (CleanupDate, Mirror)\r\n        SELECT DATEADD(hh,-(@CleanupTime),SYSDATETIME()), 0\r\n\r\n        IF NOT EXISTS(SELECT * FROM @CurrentCleanupDates WHERE (Mirror = 0 OR Mirror IS NULL) AND CleanupDate IS NULL)\r\n        BEGIN\r\n          UPDATE @CurrentDirectories\r\n          SET CleanupDate = (SELECT MIN(CleanupDate)\r\n                             FROM @CurrentCleanupDates\r\n                             WHERE (Mirror = 0 OR Mirror IS NULL)),\r\n              CleanupMode = 'AFTER_BACKUP'\r\n          WHERE Mirror = 0\r\n        END\r\n      END\r\n\r\n      IF @MirrorCleanupMode = 'AFTER_BACKUP'\r\n      BEGIN\r\n        INSERT INTO @CurrentCleanupDates (CleanupDate, Mirror)\r\n        SELECT DATEADD(hh,-(@MirrorCleanupTime),SYSDATETIME()), 1\r\n\r\n        IF NOT EXISTS(SELECT * FROM @CurrentCleanupDates WHERE (Mirror = 1 OR Mirror IS NULL) AND CleanupDate IS NULL)\r\n        BEGIN\r\n          UPDATE @CurrentDirectories\r\n          SET CleanupDate = (SELECT MIN(CleanupDate)\r\n                             FROM @CurrentCleanupDates\r\n                             WHERE (Mirror = 1 OR Mirror IS NULL)),\r\n              CleanupMode = 'AFTER_BACKUP'\r\n          WHERE Mirror = 1\r\n        END\r\n      END\r\n\r\n      -- Delete old backup files, after backup\r\n      IF ((@CurrentBackupOutput = 0 AND @Verify = 'N')\r\n      OR (@CurrentBackupOutput = 0 AND @Verify = 'Y' AND NOT EXISTS (SELECT * FROM @CurrentBackupSet WHERE VerifyOutput <> 0 OR VerifyOutput IS NULL)))\r\n      AND (@BackupSoftware <> 'DATA_DOMAIN_BOOST' OR @BackupSoftware IS NULL)\r\n      AND @CurrentBackupType = @BackupType\r\n      BEGIN\r\n        WHILE (1 = 1)\r\n        BEGIN\r\n          SELECT TOP 1 @CurrentDirectoryID = ID,\r\n                       @CurrentDirectoryPath = DirectoryPath,\r\n                       @CurrentCleanupDate = CleanupDate\r\n          FROM @CurrentDirectories\r\n          WHERE CleanupDate IS NOT NULL\r\n          AND CleanupMode = 'AFTER_BACKUP'\r\n          AND CleanupCompleted = 0\r\n          ORDER BY ID ASC\r\n\r\n          IF @@ROWCOUNT = 0\r\n          BEGIN\r\n            BREAK\r\n          END\r\n\r\n          IF @BackupSoftware IS NULL\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'xp_delete_file'\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_delete_file 0, N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''', ''' + @CurrentFileExtension + ''', ''' + CONVERT(nvarchar(19),@CurrentCleanupDate,126) + ''' IF @ReturnCode <> 0 RAISERROR(''Error deleting files.'', 16, 1)'\r\n          END\r\n\r\n          IF @BackupSoftware = 'LITESPEED'\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'xp_slssqlmaint'\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_slssqlmaint N''-MAINTDEL -DELFOLDER \"' + REPLACE(@CurrentDirectoryPath,'''','''''') + '\" -DELEXTENSION \"' + @CurrentFileExtension + '\" -DELUNIT \"' + CAST(DATEDIFF(mi,@CurrentCleanupDate,SYSDATETIME()) + 1 AS nvarchar) + '\" -DELUNITTYPE \"minutes\" -DELUSEAGE'' IF @ReturnCode <> 0 RAISERROR(''Error deleting LiteSpeed backup files.'', 16, 1)'\r\n          END\r\n\r\n          IF @BackupSoftware = 'SQLBACKUP'\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'sqbutility'\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.sqbutility 1032, N''' + REPLACE(@CurrentDatabaseName,'''','''''') + ''', N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + ''', ''' + CASE WHEN @CurrentBackupType = 'FULL' THEN 'D' WHEN @CurrentBackupType = 'DIFF' THEN 'I' WHEN @CurrentBackupType = 'LOG' THEN 'L' END + ''', ''' + CAST(DATEDIFF(hh,@CurrentCleanupDate,SYSDATETIME()) + 1 AS nvarchar) + 'h'', ' + ISNULL('''' + REPLACE(@EncryptionKey,'''','''''') + '''','NULL') + ' IF @ReturnCode <> 0 RAISERROR(''Error deleting SQLBackup backup files.'', 16, 1)'\r\n          END\r\n\r\n          IF @BackupSoftware = 'SQLSAFE'\r\n          BEGIN\r\n            SET @CurrentDatabaseContext = 'master'\r\n\r\n            SET @CurrentCommandType = 'xp_ss_delete'\r\n\r\n            SET @CurrentCommand = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = dbo.xp_ss_delete @filename = N''' + REPLACE(@CurrentDirectoryPath,'''','''''') + '\\*.' + @CurrentFileExtension + ''', @age = ''' + CAST(DATEDIFF(mi,@CurrentCleanupDate,SYSDATETIME()) + 1 AS nvarchar) + 'Minutes'' IF @ReturnCode <> 0 RAISERROR(''Error deleting SQLsafe backup files.'', 16, 1)'\r\n          END\r\n\r\n          EXECUTE @CurrentCommandOutput = dbo.CommandExecute @DatabaseContext = @CurrentDatabaseContext, @Command = @CurrentCommand, @CommandType = @CurrentCommandType, @Mode = 1, @DatabaseName = @CurrentDatabaseName, @LogToTable = @LogToTable, @Execute = @Execute\r\n          SET @Error = @@ERROR\r\n          IF @Error <> 0 SET @CurrentCommandOutput = @Error\r\n          IF @CurrentCommandOutput <> 0 SET @ReturnCode = @CurrentCommandOutput\r\n\r\n          UPDATE @CurrentDirectories\r\n          SET CleanupCompleted = 1,\r\n              CleanupOutput = @CurrentCommandOutput\r\n          WHERE ID = @CurrentDirectoryID\r\n\r\n          SET @CurrentDirectoryID = NULL\r\n          SET @CurrentDirectoryPath = NULL\r\n          SET @CurrentCleanupDate = NULL\r\n\r\n          SET @CurrentDatabaseContext = NULL\r\n          SET @CurrentCommand = NULL\r\n          SET @CurrentCommandOutput = NULL\r\n          SET @CurrentCommandType = NULL\r\n        END\r\n      END\r\n    END\r\n\r\n    IF @CurrentDatabaseState = 'SUSPECT'\r\n    BEGIN\r\n      SET @ErrorMessage = 'The database ' + QUOTENAME(@CurrentDatabaseName) + ' is in a SUSPECT state.'\r\n      RAISERROR('%s',16,1,@ErrorMessage) WITH NOWAIT\r\n      SET @Error = @@ERROR\r\n      RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n    END\r\n\r\n    -- Update that the database is completed\r\n    IF @DatabasesInParallel = 'Y'\r\n    BEGIN\r\n      UPDATE dbo.QueueDatabase\r\n      SET DatabaseEndTime = SYSDATETIME()\r\n      WHERE QueueID = @QueueID\r\n      AND DatabaseName = @CurrentDatabaseName\r\n    END\r\n    ELSE\r\n    BEGIN\r\n      UPDATE @tmpDatabases\r\n      SET Completed = 1\r\n      WHERE Selected = 1\r\n      AND Completed = 0\r\n      AND ID = @CurrentDBID\r\n    END\r\n\r\n    -- Clear variables\r\n    SET @CurrentDBID = NULL\r\n    SET @CurrentDatabaseName = NULL\r\n\r\n    SET @CurrentDatabase_sp_executesql = NULL\r\n\r\n    SET @CurrentUserAccess = NULL\r\n    SET @CurrentIsReadOnly = NULL\r\n    SET @CurrentDatabaseState = NULL\r\n    SET @CurrentInStandby = NULL\r\n    SET @CurrentRecoveryModel = NULL\r\n    SET @CurrentIsEncrypted = NULL\r\n    SET @CurrentDatabaseSize = NULL\r\n\r\n    SET @CurrentBackupType = NULL\r\n    SET @CurrentMaxTransferSize = NULL\r\n    SET @CurrentNumberOfFiles = NULL\r\n    SET @CurrentFileExtension = NULL\r\n    SET @CurrentFileNumber = NULL\r\n    SET @CurrentDifferentialBaseLSN = NULL\r\n    SET @CurrentDifferentialBaseIsSnapshot = NULL\r\n    SET @CurrentLogLSN = NULL\r\n    SET @CurrentLatestBackup = NULL\r\n    SET @CurrentDatabaseNameFS = NULL\r\n    SET @CurrentDirectoryStructure = NULL\r\n    SET @CurrentDatabaseFileName = NULL\r\n    SET @CurrentMaxFilePathLength = NULL\r\n    SET @CurrentDate = NULL\r\n    SET @CurrentCleanupDate = NULL\r\n    SET @CurrentIsDatabaseAccessible = NULL\r\n    SET @CurrentReplicaID = NULL\r\n    SET @CurrentAvailabilityGroupID = NULL\r\n    SET @CurrentAvailabilityGroup = NULL\r\n    SET @CurrentAvailabilityGroupRole = NULL\r\n    SET @CurrentAvailabilityGroupBackupPreference = NULL\r\n    SET @CurrentIsPreferredBackupReplica = NULL\r\n    SET @CurrentDatabaseMirroringRole = NULL\r\n    SET @CurrentLogShippingRole = NULL\r\n    SET @CurrentLastLogBackup = NULL\r\n    SET @CurrentLogSizeSinceLastLogBackup = NULL\r\n    SET @CurrentAllocatedExtentPageCount = NULL\r\n    SET @CurrentModifiedExtentPageCount = NULL\r\n\r\n    SET @CurrentDatabaseContext = NULL\r\n    SET @CurrentCommand = NULL\r\n    SET @CurrentCommandOutput = NULL\r\n    SET @CurrentCommandType = NULL\r\n\r\n    SET @CurrentBackupOutput = NULL\r\n\r\n    DELETE FROM @CurrentDirectories\r\n    DELETE FROM @CurrentURLs\r\n    DELETE FROM @CurrentFiles\r\n    DELETE FROM @CurrentCleanupDates\r\n    DELETE FROM @CurrentBackupSet\r\n\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n  --// Log completing information                                                                 //--\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\n  Logging:\r\n  SET @EndMessage = 'Date and time: ' + CONVERT(nvarchar,SYSDATETIME(),120)\r\n  RAISERROR('%s',10,1,@EndMessage) WITH NOWAIT\r\n\r\n  RAISERROR(@EmptyLine,10,1) WITH NOWAIT\r\n\r\n  IF @ReturnCode <> 0\r\n  BEGIN\r\n    RETURN @ReturnCode\r\n  END\r\n\r\n  ----------------------------------------------------------------------------------------------------\r\n\r\nEND\r\nGO\r\n\r\n\r\n"
}