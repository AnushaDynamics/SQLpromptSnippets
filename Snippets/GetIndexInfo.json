{
  "id": "1732f47b-5d92-4164-9888-c99486c72ea9",
  "prefix": "GetIndexInfo",
  "description": "Find All Indexes and their Configurations",
  "body": "/* =============================================================================================================================================================\r\n-- Server\t\t: LOCAL SERVER\r\n-- Database\t\t: USER DATABASE\r\n-- Script\t\t: GetIndexesInfo\r\n-- Description\t: Find All Indexes and their Configurations\r\n-- Usage\t\t: Execute in Any User Database. @SCHname and @OBJname are Optional\r\n-- History\t\t:\r\n-- Refer Links\t:\r\n-- https://www.littlekendra.com/2016/05/05/how-to-script-out-indexes-from-sql-server/\r\n-- https://www.dbamantra.com/wp-content/uploads/2016/03/index_script_out_script.sql_.txt\r\n============================================================================================================================================================= */\r\nDECLARE @SCHname VARCHAR(128) = $SCHname$; --Optional\r\nDECLARE @OBJname VARCHAR(128) = $OBJname$; --Optional\r\n\r\n--\r\nSELECT CONVERT(VARCHAR(128), OBJECT_SCHEMA_NAME(I.object_id))COLLATE DATABASE_DEFAULT AS \"SchemaName\",\r\n\t\tCONVERT(VARCHAR(128), OBJECT_NAME(I.object_id))COLLATE DATABASE_DEFAULT AS \"ObjectName\",\r\n\t\tCONVERT(VARCHAR(60), O.type_desc)COLLATE DATABASE_DEFAULT AS \"ObjectType\", --Indexes Can be Created on Tables, Views and Functions also.\r\n\t\tCOALESCE(CONVERT(VARCHAR(128), I.name)COLLATE DATABASE_DEFAULT, '') AS \"IndexName\",\r\n\t\tI.index_id AS \"IndexID\",\r\n\t\tCONVERT(VARCHAR(60), I.type_desc)COLLATE DATABASE_DEFAULT AS \"IndexType\", --If a Table Contains NonClustered Indexes and Doesnot Contain Clustered Index => It is Still a Heap Table Only.\r\n\t\tDS.name AS \"FileGroup\", --FileGroup in which Index is Created => It is Possible to Store Table Data in One File Group and Index Data in Another File Group.\r\n\t\tISNULL(STUFF((\r\n\t   \t\t\t\tSELECT ', ' + QUOTENAME(COL_NAME(I.object_id, IC.column_id)) + CASE WHEN IC.is_descending_key = 1 THEN ' DESC' ELSE ' ASC' END\r\n\t   \t\t\t\tFROM sys.index_columns AS IC WITH (NOLOCK)\r\n\t   \t\t\t\tWHERE I.object_id = IC.object_id AND I.index_id = IC.index_id AND IC.is_included_column = 0\r\n\t   \t\t\t\tORDER BY IC.index_column_id ASC\r\n\t   \t\t\t\tFOR XML PATH('')), 1, 1, ''), ''\r\n\t\t\t\t) AS \"KeyColumnsList\", --Columns Involved Directly in Key Column List of Index (Columns Can be Sorted with ASC or DESC).\r\n\t\tISNULL(STUFF((\r\n\t   \t\t\t\tSELECT ', ' + QUOTENAME(COL_NAME(I.object_id, IC.column_id))\r\n\t   \t\t\t\tFROM sys.index_columns AS IC WITH (NOLOCK)\r\n\t   \t\t\t\tWHERE I.object_id = IC.object_id AND I.index_id = IC.index_id AND IC.is_included_column = 1\r\n\t   \t\t\t\tORDER BY IC.index_column_id ASC\r\n\t   \t\t\t\tFOR XML PATH('')), 1, 1, ''), ''\r\n\t\t\t\t) AS \"IncludedColumnsList\", --Columns Involved in Included Column List of Index (Columns Cannot be Sorted with ASC or DESC).\r\n\t\tI.is_primary_key AS \"isPK\", --Is this Index Created by PrimaryKey? => PrimaryKey Indexes can be NonClustered Also.\r\n\t\tI.is_unique_constraint AS \"isUC\", --Is this Index Created by Unique Constraint? => Unique Index is Automatically Created when Unique Constraint is created.\r\n\t\tI.is_unique AS \"isU\", --Is this Index Unique? => Clustered or NonClustered Index may or maynot be unique => PK or UQ index should always be unique.\r\n\t\tI.is_disabled AS \"isDisabled\",\r\n\t\tCASE WHEN P.data_compression = 1 THEN 'Row' WHEN P.data_compression = 2 THEN 'Page' ELSE 'None' END AS \"Compression\",\r\n\t\tCASE WHEN I.allow_page_locks = 1 THEN 'On' ELSE 'Off' END AS \"PageLocks\",\r\n\t\tCASE WHEN I.allow_row_locks = 1 THEN 'On' ELSE 'Off' END AS \"RowLocks\",\r\n\t\tCASE WHEN I.fill_factor = 0 THEN 100 ELSE I.fill_factor END AS \"FillFactor\",\r\n\t\tCASE WHEN I.is_padded = 1 THEN 'On' ELSE 'Off' END AS \"isPadded\",\r\n\t\tCASE WHEN I.ignore_dup_key = 1 THEN 'On' ELSE 'Off' END AS \"IgnoreDupKey\",\r\n\t\tCASE WHEN S.no_recompute = 1 THEN 'On' ELSE 'Off' END AS \"Stats_NoRecompute\"\r\nFROM sys.indexes AS I WITH (NOLOCK)\r\nINNER JOIN sys.objects AS O WITH (NOLOCK) ON O.object_id = I.object_id\r\nINNER JOIN sys.data_spaces AS DS WITH (NOLOCK) ON DS.data_space_id = I.data_space_id\r\nINNER JOIN sys.partitions AS P ON P.object_id = I.object_id AND P.index_id = I.index_id \r\nLEFT OUTER JOIN sys.stats AS S WITH (NOLOCK) ON S.object_id = I.object_id AND S.stats_id = I.index_id\r\nWHERE OBJECT_SCHEMA_NAME(I.object_id) <> 'sys'-- AND I.index_id <> 0\r\n\tAND (OBJECT_SCHEMA_NAME(I.object_id) = @SCHname OR @SCHname IS NULL)\r\n\tAND (OBJECT_NAME(I.object_id) = @OBJname OR @OBJname IS NULL);",
  "placeholders": [
    {
      "name": "SCHname",
      "defaultValue": "NULL"
    },
    {
      "name": "OBJname",
      "defaultValue": "NULL"
    }
  ]
}