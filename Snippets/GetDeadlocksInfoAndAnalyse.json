{
  "id": "54c77cb0-e1e8-41e4-a6b9-c04eecfe0be2",
  "prefix": "GetDeadlocksInfoAndAnalyse",
  "description": "Analyze Deadlocks From XML file(s), Trace",
  "body": "/* =========================================================================================================================================\r\n-- Server\t\t: LOCAL SERVER\r\n-- Database\t\t: TempDB (Preferred)\r\n-- Script\t\t: GetDeadlocksInfoAndAnalyse\r\n-- Description\t: Analyze Deadlocks From XML file(s), Trace\r\n-- Usage\t\t: Define DeadLock XML File at 'C:\\SQL\\Deadlocks\\DeadLock001.xml'.\r\n--\t\t\t\t\tWe Can Append Multiple XML Files using UNION ALL(NOT UNION).\r\n-- Link\t\t\t: https://blog.waynesheffield.com/wayne/code-library/deadlocks/shred-deadlock-graph/\r\n-- History\t\t:\r\n========================================================================================================================================= */\r\nDECLARE @DeadLockXMLs TABLE\r\n(\r\n\tDeadlockID INT IDENTITY PRIMARY KEY CLUSTERED,\r\n\tDeadlockGraph XML NULL\r\n);\r\n--\r\nINSERT INTO @DeadLockXMLs (DeadlockGraph)\r\nSELECT CONVERT(XML, BulkColumn, 2) FROM OPENROWSET(BULK '$DeadLockFilePath$\\$DeadLockFileName$.xml', SINGLE_BLOB) AS rowsetresults\r\n--UNION ALL \r\n--SELECT CONVERT(XML, BulkColumn, 2) FROM OPENROWSET(BULK 'C:\\SQL\\Deadlocks\\DeadLock002.xml', SINGLE_BLOB) AS rowsetresults;\r\n--\r\n/* ===== ** DO NOT CHANGE CODE BELOW FROM HERE ** ======================================================================================= */\r\n;\r\nWITH _DeadLocks\r\nAS (\r\n\t   SELECT DeadlockID,\r\n\t\t\t  DeadlockGraph\r\n\t   FROM @DeadLockXMLs\r\n   ),\r\n_Victims\r\nAS (\r\n\t   SELECT Victims.List.value('@id', 'varchar(50)') AS \"ID\"\r\n\t   FROM _DeadLocks AS CTE\r\n\t   CROSS APPLY CTE.DeadlockGraph.nodes('//deadlock/victim-list/victimProcess') AS Victims(LIST)\r\n   ),\r\n_Locks\r\nAS (\t-- Merge All of The Lock Information Together\r\n\t   SELECT CTE.DeadlockID,\r\n\t\t\t  MainLock.Process.value('@id', 'varchar(100)') AS \"LockID\",\r\n\t\t\t  OwnerList.Owner.value('@id', 'varchar(200)') AS \"LockProcessId\",\r\n\t\t\t  REPLACE(MainLock.Process.value('local-name(.)', 'varchar(100)'), 'lock', '') AS \"LockEvent\",\r\n\t\t\t  MainLock.Process.value('@objectname', 'sysname') AS \"ObjectName\",\r\n\t\t\t  OwnerList.Owner.value('@mode', 'varchar(10)') AS \"LockMode\",\r\n\t\t\t  MainLock.Process.value('@dbid', 'INTEGER') AS \"Database_id\",\r\n\t\t\t  MainLock.Process.value('@associatedObjectId', 'BIGINT') AS \"AssociatedObjectId\",\r\n\t\t\t  MainLock.Process.value('@WaitType', 'varchar(100)') AS \"WaitType\",\r\n\t\t\t  WaiterList.Owner.value('@id', 'varchar(200)') AS \"WaitProcessId\",\r\n\t\t\t  WaiterList.Owner.value('@mode', 'varchar(10)') AS \"WaitMode\"\r\n\t   FROM _DeadLocks AS CTE\r\n\t   CROSS APPLY CTE.DeadlockGraph.nodes('//deadlock/resource-list') AS Lock(list)\r\n\t   CROSS APPLY Lock.list.nodes('*') AS MainLock(Process)\r\n\t   OUTER APPLY MainLock.Process.nodes('owner-list/owner') AS OwnerList(Owner)\r\n\t   CROSS APPLY MainLock.Process.nodes('waiter-list/waiter') AS WaiterList(Owner)\r\n   ),\r\n_Process\r\nAS (\t-- Get the Data from the Process Node\r\n\t   SELECT CTE.DeadlockID,\r\n\t\t\t  CONVERT(BIT, CASE WHEN Deadlock.Process.value('@id', 'varchar(50)') = ISNULL(Deadlock.Process.value('../../@victim', 'varchar(50)'), V.ID) THEN 1 ELSE 0 END) AS \"Victim\",\r\n\t\t\t  Deadlock.Process.value('@lockMode', 'varchar(10)') AS \"LockMode\",\t\t\t\t\t\t-- how is this different from in the resource-list section?\r\n\t\t\t  Process.ID AS \"ProcessID\",\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Deadlock.Process.value('@id', 'varchar(50)'),\r\n\t\t\t  Deadlock.Process.value('@kpid', 'int') AS \"KPID\",\t\t\t\t\t\t\t\t\t\t-- kernel-process id / thread ID number\r\n\t\t\t  Deadlock.Process.value('@spid', 'int') AS \"SPID\",\t\t\t\t\t\t\t\t\t\t-- system process id (connection to sql)\r\n\t\t\t  Deadlock.Process.value('@sbid', 'int') AS \"SBID\",\t\t\t\t\t\t\t\t\t\t-- system batch id / request_id (a query that a SPID is running)\r\n\t\t\t  Deadlock.Process.value('@ecid', 'int') AS \"ECID\",\t\t\t\t\t\t\t\t\t\t-- execution context ID (a worker thread running part of a query)\r\n\t\t\t  Deadlock.Process.value('@isolationlevel', 'varchar(200)') AS \"IsolationLevel\",\r\n\t\t\t  Deadlock.Process.value('@waitresource', 'varchar(200)') AS \"WaitResource\",\r\n\t\t\t  Deadlock.Process.value('@logused', 'int') AS \"LogUsed\",\r\n\t\t\t  Deadlock.Process.value('@clientapp', 'varchar(100)') AS \"ClientApp\",\r\n\t\t\t  Deadlock.Process.value('@hostname', 'varchar(20)') AS \"HostName\",\r\n\t\t\t  Deadlock.Process.value('@loginname', 'varchar(20)') AS \"LoginName\",\r\n\t\t\t  Deadlock.Process.value('@lasttranstarted', 'datetime') AS \"TransactionTime\",\r\n\t\t\t  Deadlock.Process.value('@lastbatchstarted', 'datetime') AS \"BatchStarted\",\r\n\t\t\t  Deadlock.Process.value('@lastbatchcompleted', 'datetime') AS \"BatchCompleted\",\r\n\t\t\t  Input.Buffer.query('.') AS \"InputBuffer\",\r\n\t\t\t  CTE.DeadlockGraph,\r\n\t\t\t  ES.ExecutionStack,\r\n\t\t\t  ExecStack.Stack.value('@sqlhandle', 'varchar(64)') AS \"SQLHandle\",\r\n\t\t\t  NULLIF(ExecStack.Stack.value('.', 'varchar(max)'), '') AS \"QueryStatement\",\t\t\t--[QueryStatement] = Execution.Frame.value('.', 'varchar(max)'),\r\n\t\t\t  SUM(1) OVER (PARTITION BY CTE.DeadlockID) AS \"ProcessQty\",\r\n\t\t\t  Deadlock.Process.value('@trancount', 'int') AS \"TranCount\"\r\n\t   FROM _DeadLocks AS CTE\r\n\t   CROSS APPLY CTE.DeadlockGraph.nodes('//deadlock/process-list/process') AS Deadlock(Process)\r\n\t   CROSS APPLY (SELECT Deadlock.Process.value('@id', 'varchar(50)')) AS Process(ID)\r\n\t   LEFT JOIN _Victims AS V ON Process.ID = V.ID\r\n\t   CROSS APPLY Deadlock.Process.nodes('inputbuf') AS Input(Buffer)\r\n\t   CROSS APPLY Deadlock.Process.nodes('executionStack') AS Execution(Frame)\r\n\t   -- Get the Data from the Execution Stack Node as XML\r\n\t   CROSS APPLY (\r\n\t\t\t\t\t   SELECT (\r\n\t\t\t\t\t\t\t\t  SELECT ROW_NUMBER() OVER (PARTITION BY CTE.DeadlockID,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Deadlock.Process.value('@id', 'varchar(50)'),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Execution.Stack.value('@procname', 'sysname'),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Execution.Stack.value('@code', 'varchar(MAX)')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tORDER BY (SELECT 1)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   ) AS \"ProcNumber\",\r\n\t\t\t\t\t\t\t\t\t\t Execution.Stack.value('@procname', 'sysname') AS \"ProcName\",\r\n\t\t\t\t\t\t\t\t\t\t Execution.Stack.value('@line', 'int') AS \"Line\",\r\n\t\t\t\t\t\t\t\t\t\t Execution.Stack.value('@sqlhandle', 'varchar(64)') AS \"SQLHandle\",\r\n\t\t\t\t\t\t\t\t\t\t LTRIM(RTRIM(Execution.Stack.value('.', 'varchar(MAX)'))) AS \"Code\"\r\n\t\t\t\t\t\t\t\t  FROM Execution.Frame.nodes('frame') AS Execution(Stack)\r\n\t\t\t\t\t\t\t\t  ORDER BY ProcNumber\r\n\t\t\t\t\t\t\t\t  FOR XML PATH('frame'), ROOT('executionStack'), TYPE\r\n\t\t\t\t\t\t\t  ) AS \"ExecutionStack\"\r\n\t\t\t\t   ) AS ES\r\n\t   CROSS APPLY Execution.Frame.nodes('frame') AS ExecStack(Stack)\r\n   )\r\n-- Get the Columns in the Desired Order\r\nSELECT P.DeadlockID,\r\n\t   P.Victim,\r\n\t   P.ProcessQty,\r\n\t   DENSE_RANK() OVER (PARTITION BY P.DeadlockID ORDER BY P.ProcessID) AS \"ProcessNum\",\r\n\t   P.LockMode,\r\n\t   NULLIF(L.ObjectName, '') AS \"LockedObject\",\r\n\t   L.Database_id,\r\n\t   L.AssociatedObjectId,\r\n\t   P.ProcessID AS \"LockProcess\",\r\n\t   P.KPID,\r\n\t   P.SPID,\r\n\t   P.SBID,\r\n\t   P.ECID,\r\n\t   P.TranCount,\r\n\t   L.LockEvent,\r\n\t   L.LockMode AS \"LockedMode\",\r\n\t   L.WaitProcessId,\r\n\t   L.WaitMode,\r\n\t   P.WaitResource,\r\n\t   L.WaitType,\r\n\t   P.IsolationLevel,\r\n\t   P.LogUsed,\r\n\t   P.ClientApp,\r\n\t   P.HostName,\r\n\t   P.LoginName,\r\n\t   P.TransactionTime,\r\n\t   P.BatchStarted,\r\n\t   P.BatchCompleted,\r\n\t   P.QueryStatement,\r\n\t   P.SQLHandle,\r\n\t   P.InputBuffer,\r\n\t   P.DeadlockGraph,\r\n\t   P.ExecutionStack\r\nFROM _Process AS P\r\nLEFT JOIN _Locks AS L ON P.DeadlockID = L.DeadlockID AND P.ProcessID = L.LockProcessId\r\nORDER BY P.DeadlockID, P.Victim DESC, P.ProcessID;",
  "placeholders": [
    {
      "name": "DeadLockFilePath",
      "defaultValue": "C:\\SQL\\Deadlocks"
    },
    {
      "name": "DeadLockFileName",
      "defaultValue": "DeadLock001"
    }
  ]
}