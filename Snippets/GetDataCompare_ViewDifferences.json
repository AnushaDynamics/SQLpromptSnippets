{
  "id": "0d170a22-7c24-4f6c-88cd-9f26982a6fbb",
  "prefix": "GetDataCompare_ViewDifferences",
  "description": "Get Table Row Count Differences Between Source and Target Databases",
  "body": "/* =============================================================================================================================================================\r\n-- Server\t\t: TARGET_SERVER (Most Preffered). We can Execute this from 3rd Server also which has LinkedSVR for both Source and Target.\r\n-- Database\t\t: master\r\n-- Script\t\t: GetDataCompare_ViewDifferences\r\n-- Description\t: Get Table Row Count Differences Between Source and Target Databases\r\n-- Usage\t\t: Execute in [master] to Get Row Count Differences\r\n--\t\t\t\t\tApplicable For Most of the Table Combinations. (Refer Snippet \"DifferentTableTypes\")\r\n-- **Note\t\t: Mark @DoSchemaRefresh as Disable(0) to Save Time from 2nd Execution When There are NO Schema Modifications But Data Modifications.\r\n============================================================================================================================================================= */\r\nUSE master;\r\nGO\r\n--\r\nDECLARE @SourceLinkedSVR VARCHAR(128) = '$SourceLinkedServer$';\t--*Mandatory If @SourceDatabase is in Another Server\r\nDECLARE @TargetLinkedSVR VARCHAR(128) = '$TargetLinkedServer$';\t--*Mandatory If @TargetDatabase is in Another Server\r\nDECLARE @SourceDatabase VARCHAR(128) = '$SourceDatabase$';\t\t--Source Database Name\r\nDECLARE @TargetDatabase VARCHAR(128) = '$TargetDatabase$';\t\t--Target Database Name\r\nDECLARE @SchemaName VARCHAR(128) = '$SchemaName$';\t\t\t\t--Optional If Schema is \"dbo\"\r\nDECLARE @TableName VARCHAR(128) = '$TableName$';\t\t\t\t--Optional\r\n--\r\nDECLARE --To Get All Dependent Tables in Dependency LVL w.r.to @SchemaName AND @TableName\r\n\t@IncludeDependencies BIT = 0, -- 0 = Excluded (Default) | 1 = Included --Enable this To Avoid \"The MERGE statement conflicted with the REFERENCE constraint\"\r\n\t@ShowDependency BIT = 0; -- 0 = Hide (Default) | 1 = Show --Will Display Results Only If @IncludeDependencies = 1\r\n--\r\nDECLARE @DoSchemaRefresh BIT = 0; -- 0 = DoNot Refresh (Default) | 1 = Do Refresh --Enable If we Need to Consider New Schema Modifications If Any\r\n--\r\nDECLARE @Debug BIT = 0; -- 0 = Excluded (Default) | 1 = Included DeBug Statements --Use Only For Single Table --Will Be Auto Disabled IF More Tables are Involved\r\n/* ===== ** DO NOT CHANGE CODE BELOW FROM HERE ** =========================================================================================================== */\r\nSET NOCOUNT ON;\r\nDECLARE @SQLcmd NVARCHAR(MAX), @SQLquery NVARCHAR(MAX), @ErrMsg NVARCHAR(MAX), @ReturnINT INT, @ReturnTXT VARCHAR(256);\r\n--\r\n/* ===== ** PRELIMINARY CHECKS AND PREREQUISITES ** ========================================================================================================= */\r\n--$BeginRegion: Preliminary Checks To Check If the Options Selected are Valid\r\nSELECT @ErrMsg = NULL, @ReturnINT = NULL, @ReturnTXT = NULL; --Reset Values\r\nIF @SourceLinkedSVR = @@SERVERNAME OR LTRIM(RTRIM(@SourceLinkedSVR)) = '' SET @SourceLinkedSVR = NULL; --Setting @SourceLinkedSVR = NULL to Ease the Merge Statements Generation Process\r\nIF @TargetLinkedSVR = @@SERVERNAME OR LTRIM(RTRIM(@TargetLinkedSVR)) = '' SET @TargetLinkedSVR = NULL; --Setting @TargetLinkedSVR = NULL to Ease the Merge Statements Generation Process\r\nIF LTRIM(RTRIM(@SchemaName)) = '' SET @SchemaName = NULL; --Setting @SchemaName = NULL If Not Provided\r\nIF LTRIM(RTRIM(@TableName)) = '' SET @TableName = NULL; --Setting @TableName = NULL If Not Provided\r\n--\r\nIF @IncludeDependencies = 1 AND (@SchemaName IS NULL OR @TableName IS NULL)\r\n\tSET @ErrMsg = ISNULL(@ErrMsg, '') + '• To Get Particular Table Dependency Details, Provide Both (@SchemaName AND @TableName) OR Disable \"@IncludeDependencies\"..!' + CHAR(10);\r\nIF @IncludeDependencies = 0 AND @ShowDependency = 1\r\n\tSET @ErrMsg = ISNULL(@ErrMsg, '') + '• Cannot Show Dependency Details when @IncludeDependencies = 0.! Enable \"@IncludeDependencies\" OR Disable \"@ShowDependency\"..!' + CHAR(10);\r\n--\r\n----$BeginRegion: @SourceLinkedSVR and @SourceDatabase Check\r\nIF @SourceLinkedSVR IS NOT NULL\r\nBEGIN\r\n\tSET @SQLcmd --\r\n\t\t= N'IF EXISTS (SELECT 1 FROM master.sys.servers WHERE name = ''' + @SourceLinkedSVR + ''' AND is_linked = 1)' + CHAR(10) --\r\n\t\t+ N'\tIF EXISTS (SELECT 1 FROM master.sys.servers WHERE name = ''' + @SourceLinkedSVR + ''' AND is_linked = 1 AND is_data_access_enabled = 1)' + CHAR(10) --\r\n\t\t+ N'\t\tIF EXISTS (SELECT 1 FROM ' + ISNULL(QUOTENAME(@SourceLinkedSVR) + '.', '') + 'master.sys.databases WHERE name = ''' + @SourceDatabase + ''')' + CHAR(10) --\r\n\t\t+ N'\t\t\tSET @ReturnOUT1 = 0;' + CHAR(10) --\r\n\t\t+ N'\t\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''• Source Linked Server \"' + @SourceLinkedSVR + '\" Exists But Source Database \"' + @SourceDatabase + '\" Does Not Exists..! Pls Check \"@SourceDatabase\"...!''; END;' + CHAR(10) --\r\n\t\t+ N'\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''• Source Linked Server \"' + @SourceLinkedSVR + '\" Exists But Data Access Is Not Enabled..! Pls Enable \"DataAccess\", \"RPC\", \"RPC Out\" in LinkedServer Settings...!''; END;' + CHAR(10) --\r\n\t\t+ N'ELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''• Source Linked Server \"' + @SourceLinkedSVR + '\" Does Not Exists..! Pls ReCheck \"@SourceLinkedSVR\"...!''; END;';\r\n\tIF @Debug = 1 PRINT @SQLcmd + CHAR(10);\r\n\tEXECUTE sys.sp_executesql @CMD = @SQLcmd, @PARAM = N'@ReturnOUT1 INT OUTPUT, @ReturnOUT2 VARCHAR(256) OUTPUT', @ReturnOUT1 = @ReturnINT OUTPUT, @ReturnOUT2 = @ReturnTXT OUTPUT;\r\n\tIF @ReturnINT = 1 SET @ErrMsg = ISNULL(@ErrMsg, '') + @ReturnTXT + CHAR(10);\r\nEND;\r\n----$EndRegion: @SourceLinkedSVR and @SourceDatabase Check\r\n--\r\n----$BeginRegion: @TargetLinkedSVR and @TargetDatabase Check\r\nIF @TargetLinkedSVR IS NOT NULL\r\nBEGIN\r\n\tSET @SQLcmd --\r\n\t\t= N'IF EXISTS (SELECT 1 FROM master.sys.servers WHERE name = ''' + @TargetLinkedSVR + ''' AND is_linked = 1)' + CHAR(10) --\r\n\t\t+ N'\tIF EXISTS (SELECT 1 FROM master.sys.servers WHERE name = ''' + @TargetLinkedSVR + ''' AND is_linked = 1 AND is_data_access_enabled = 1)' + CHAR(10) --\r\n\t\t+ N'\t\tIF EXISTS (SELECT 1 FROM ' + ISNULL(QUOTENAME(@TargetLinkedSVR) + '.', '') + 'master.sys.databases WHERE name = ''' + @TargetDatabase + ''')' + CHAR(10) --\r\n\t\t+ N'\t\t\tSET @ReturnOUT1 = 0;' + CHAR(10) --\r\n\t\t+ N'\t\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''• Target Linked Server \"' + @TargetLinkedSVR + '\" Exists But Target Database \"' + @TargetDatabase + '\" Does Not Exists..! Pls Check \"@TargetDatabase\"...!''; END;' + CHAR(10) --\r\n\t\t+ N'\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''• Target Linked Server \"' + @TargetLinkedSVR + '\" Exists But Data Access Is Not Enabled..! Pls Enable \"DataAccess\", \"RPC\", \"RPC Out\" in LinkedServer Settings...!''; END;' + CHAR(10) --\r\n\t\t+ N'ELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''• Target Linked Server \"' + @TargetLinkedSVR + '\" Does Not Exists..! Pls ReCheck \"@TargetLinkedSVR\"...!''; END;';\r\n\tIF @Debug = 1 PRINT @SQLcmd + CHAR(10);\r\n\tEXECUTE sys.sp_executesql @CMD = @SQLcmd, @PARAM = N'@ReturnOUT1 INT OUTPUT, @ReturnOUT2 VARCHAR(256) OUTPUT', @ReturnOUT1 = @ReturnINT OUTPUT, @ReturnOUT2 = @ReturnTXT OUTPUT;\r\n\tIF @ReturnINT = 1 SET @ErrMsg = ISNULL(@ErrMsg, '') + @ReturnTXT + CHAR(10);\r\nEND;\r\n----$EndRegion: @TargetLinkedSVR and @TargetDatabase Check\r\n--\r\n--$BeginRegion: Local Server @SourceDatabase and @TargetDatabase Check\r\nIF @SourceLinkedSVR IS NULL AND NOT EXISTS(SELECT * FROM master.sys.databases WHERE name = @SourceDatabase)\r\n\tSET @ErrMsg = ISNULL(@ErrMsg, '') + '• Source Database \"' + @SourceDatabase + '\" Does Not Exists in LocalServer..! Pls Check \"@SourceDatabase\" OR \"@SourceLinkedSVR\" is missing...!' + CHAR(10);\r\nIF @TargetLinkedSVR IS NULL AND NOT EXISTS(SELECT * FROM master.sys.databases WHERE name = @TargetDatabase)\r\n\tSET @ErrMsg = ISNULL(@ErrMsg, '') + '• Target Database \"' + @TargetDatabase + '\" Does Not Exists in LocalServer..! Pls Check \"@TargetDatabase\" OR \"@TargetLinkedSVR\" is missing...!' + CHAR(10);\r\n--$EndRegion: Local Server @SourceDatabase and @TargetDatabase Check\r\n--\r\nIF @ErrMsg IS NOT NULL\r\nBEGIN\r\n\tRAISERROR(@ErrMsg, 11, 0) WITH NOWAIT;\r\n\tRETURN;\r\nEND;\r\n--$EndRegion: Preliminary Checks To Check If the Options Selected are Valid\r\n--\r\n--$BeginRegion: PreRequisites for Checking Data\r\nIF OBJECT_ID('tempdb..#COMPARISONTABLE', 'U') IS NOT NULL\r\n\tDROP TABLE #COMPARISONTABLE;\r\n--\r\nCREATE TABLE #COMPARISONTABLE\r\n(\r\n\tSchemaName VARCHAR(128) NULL, TableName VARCHAR(128) NULL, LVL INT NULL,\r\n\tSourceRowCount INT NULL, TargetRowCount INT NULL, RowsDEL INT NULL, RowsINS INT NULL, RowsUPD INT NULL,\r\n\tValidationQueryV1 NVARCHAR(MAX) NULL,\t--Most Preferred to Check RowsINS or RowsDEL\r\n\tValidationQueryV2 NVARCHAR(MAX) NULL,\t--Most Preferred to Check RowsUPD\r\n\tRemarks NVARCHAR(MAX) NULL DEFAULT ('') --Errors will be Recorded If Any\r\n);\r\n--\r\nDECLARE @TableColumns TABLE\r\n(\r\n\tColID INT NULL, --ORDINAL_POSITION\r\n\tColumnName VARCHAR(128) NULL,\r\n\tColumnDataType VARCHAR(64) NULL,\r\n\tIsPrimaryKeyCol BIT NULL,\r\n\tIsIdentityCol BIT NULL,\r\n\tIsComputedCol BIT NULL\r\n);\r\n--\r\nDECLARE @TotalCols INT, @TotalPKcols INT, @ExclusivePKcols INT, @ExclusiveIDcols INT, @IDasPKcols INT, @CALCcols INT;\r\n--\r\nDECLARE @MatchColumns AS TABLE\r\n(\r\n\tColID INT NULL,\r\n\tColumnName VARCHAR(128) NULL\r\n);\r\n--\r\nDECLARE @ColumnsListNotation NVARCHAR(MAX), @SelColListV1S NVARCHAR(MAX), @SelColListV1T NVARCHAR(MAX), @SelColListV2 NVARCHAR(MAX);\r\nDECLARE @ON_MatchedColList NVARCHAR(MAX), @WhereColList AS NVARCHAR(MAX), @WHERE_UnMatchedColList NVARCHAR(MAX);\r\n--$EndRegion: PreRequisites for Checking Data\r\n--\r\n--\r\n/* ===== ** GET TABLE DEPENDENCY DETAILS ** ================================================================================================================== */\r\n--$BeginRegion: Get List of Tables from @SourceDatabase UNION @TargetDatabase\r\nDECLARE @SourceDependencyDetails TABLE (SchemaName NVARCHAR(128) NULL, TableName NVARCHAR(128) NOT NULL, LVL INT NOT NULL, DependencyPath NVARCHAR(MAX) NOT NULL);\r\nDECLARE @TargetDependencyDetails TABLE (SchemaName NVARCHAR(128) NULL, TableName NVARCHAR(128) NOT NULL, LVL INT NOT NULL, DependencyPath NVARCHAR(MAX) NOT NULL);\r\n--\r\nIF OBJECT_ID('tempdb..#TablesList', 'U') IS NOT NULL\r\n\tDROP TABLE #TablesList;\r\nCREATE TABLE #TablesList (SCHname VARCHAR(128) NULL, TBLname VARCHAR(128) NULL, LVL INT NULL, FLG BIT NULL DEFAULT (0));\r\n--\r\n----$BeginRegion: Query To Get Table Dependency Details\r\nSET @SQLquery = NULL; --Reset Value\r\nSET @SQLquery = N'N'';WITH _Dependencies --Get Objects with FK Dependencies\r\nAS (\r\n\t\tSELECT C.CONSTRAINT_NAME, FK.TABLE_SCHEMA AS \"OBJECTschema\", FK.TABLE_NAME AS \"OBJECTname\",\r\n\t\t\t   PK.TABLE_SCHEMA AS \"DEPENDSschema\", PK.TABLE_NAME AS \"DEPENDSname\"\r\n\t\tFROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS C\r\n\t\tINNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS FK ON C.CONSTRAINT_NAME=FK.CONSTRAINT_NAME\r\n\t\tINNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS PK ON C.UNIQUE_CONSTRAINT_NAME=PK.CONSTRAINT_NAME\r\n\t\tWHERE NOT EXISTS\r\n\t\t\t(\r\n\t\t\t\tSELECT FK1.name AS ForeignKeyName,\r\n\t\t\t\t\t   OBJECT_SCHEMA_NAME(FK1.parent_object_id) + ''''.'''' + OBJECT_NAME(FK1.parent_object_id) AS MainTableName,\r\n\t\t\t\t\t   OBJECT_SCHEMA_NAME(FK1.referenced_object_id) + ''''.'''' + OBJECT_NAME(FK1.referenced_object_id) AS ReferTableName\r\n\t\t\t\tFROM sys.foreign_keys AS FK1\r\n\t\t\t\tINNER JOIN sys.foreign_keys AS FK2 ON FK1.parent_object_id = FK2.referenced_object_id AND FK2.parent_object_id=FK1.referenced_object_id\r\n\t\t\t\tWHERE FK1.name = C.CONSTRAINT_NAME OR FK2.name = C.CONSTRAINT_NAME\r\n\t\t\t)\r\n   ),\r\n_NoDependencies --The First Level Objects are with No Dependencies\r\nAS (\r\n\t\tSELECT T.TABLE_SCHEMA AS \"OBJECTschema\", T.TABLE_NAME AS \"OBJECTname\"\r\n\t\tFROM INFORMATION_SCHEMA.TABLES AS T\r\n\t\tWHERE T.TABLE_TYPE = ''''BASE TABLE'''' --Considering Tables Only But Not Views\r\n\t\t\tAND NOT EXISTS (SELECT 1 FROM _Dependencies AS D WHERE D.OBJECTschema = T.TABLE_SCHEMA AND D.OBJECTname = T.TABLE_NAME)\r\n   ),\r\n_Recursive --Recursive CTE to Get Dependencies\r\nAS (\r\n\t\tSELECT ND.OBJECTschema AS \"SchemaName\", ND.OBJECTname AS \"TableName\", 0 AS \"LVL\", --Level 0 Indicates Tables with No Dependencies\r\n\t\t\t   CAST(''''['''' + ND.OBJECTschema + ''''].['''' + ND.OBJECTname + ''''] (0)'''' AS VARCHAR(MAX)) AS \"DependsON\"\r\n\t\tFROM _NoDependencies AS ND\r\n\t\tUNION ALL\r\n\t\tSELECT D.OBJECTschema AS \"SchemaName\", D.OBJECTname AS \"TableName\", R.LVL + 1 AS \"LVL\",\r\n\t\t\t   CAST((CASE WHEN LVL > 0 THEN R.DependsON + '''' => '''' ELSE '''''''' END) + (''''['''' + D.DEPENDSschema + ''''].['''' + D.DEPENDSname + ''''] ('''' + CAST(R.LVL AS VARCHAR(2)) + '''')'''') AS VARCHAR(MAX)) --Visually Reflects Dependency\r\n\t\tFROM _Dependencies AS D\r\n\t\tINNER JOIN _Recursive AS R ON D.DEPENDSschema = R.SchemaName AND D.DEPENDSname = R.TableName\r\n   )\r\nSELECT DISTINCT TOP(100) PERCENT R.SchemaName, R.TableName, R.LVL,\r\n\t   CASE WHEN R.LVL > 0 THEN R.DependsON + '''' => '''' + ''''['''' + R.SchemaName + ''''].['''' + R.TableName + ''''] ('''' + CAST(R.LVL AS VARCHAR(2)) + '''')'''' ELSE R.DependsON END AS \"DependencyPath\"\r\nFROM _Recursive AS R\r\nORDER BY R.LVL ASC, R.SchemaName ASC, R.TableName ASC\r\nOPTION (MAXRECURSION 0);''';\r\n----$EndRegion: Query To Get Table Dependency Details\r\n--\r\n----$BeginRegion: Get List of Tables from @SourceDatabase\r\nSET @SQLcmd = NULL; --Reset Value\r\nSET @SQLcmd = N'EXECUTE ' + QUOTENAME(ISNULL(@SourceLinkedSVR, @@SERVERNAME)) + '.' + QUOTENAME(@SourceDatabase) + N'.sys.sp_executesql @command = ' + @SQLquery + ';';\r\nIF @Debug = 1 PRINT '--Get List of Tables from @SourceDatabase:' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10);\r\n--\r\nIF @DoSchemaRefresh = 1 OR (@DoSchemaRefresh = 0 AND OBJECT_ID('tempdb..#SourceDependencyDetails', 'U') IS NULL)\r\nBEGIN --We Will Refresh with New Source Schema Changes When @DoSchemaRefresh = 1 (OR) When #SourceDependencyDetails DoesNot Exists\r\n\tIF OBJECT_ID('tempdb..#SourceDependencyDetails', 'U') IS NOT NULL\r\n\t\tDROP TABLE #SourceDependencyDetails;\r\n\tCREATE TABLE #SourceDependencyDetails (SchemaName NVARCHAR(128) NULL, TableName NVARCHAR(128) NOT NULL, LVL INT NOT NULL, DependencyPath NVARCHAR(MAX) NOT NULL);\r\n\t--\r\n\tINSERT INTO #SourceDependencyDetails (SchemaName, TableName, LVL, DependencyPath)\r\n\tEXECUTE sys.sp_executesql @command = @SQLcmd;\r\n\t--\r\n\tINSERT INTO @SourceDependencyDetails(SchemaName, TableName, LVL, DependencyPath) SELECT SchemaName, TableName, LVL, DependencyPath FROM #SourceDependencyDetails;\r\nEND;\r\nELSE --We Will Use Existing Source Schema When @DoSchemaRefresh = 0 (AND) When #SourceDependencyDetails Exists Only\r\n\tINSERT INTO @SourceDependencyDetails(SchemaName, TableName, LVL, DependencyPath) SELECT SchemaName, TableName, LVL, DependencyPath FROM #SourceDependencyDetails;\r\n--\r\nIF @Debug = 2 SELECT @SourceDatabase AS \"DatabaseName\", SchemaName, TableName, LVL, DependencyPath FROM @SourceDependencyDetails;\r\n----$EndRegion: Get List of Tables from @SourceDatabase\r\n--\r\n----$BeginRegion: Get List of Tables from @TargetDatabase\r\nSET @SQLcmd = NULL; --Reset Value\r\nSET @SQLcmd = N'EXECUTE ' + QUOTENAME(ISNULL(@TargetLinkedSVR, @@SERVERNAME)) + '.' + QUOTENAME(@TargetDatabase) + N'.sys.sp_executesql @command = ' + @SQLquery + ';';\r\nIF @Debug = 1 PRINT '--Get List of Tables from @TargetDatabase:' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10);\r\n--\r\nIF @DoSchemaRefresh = 1 OR (@DoSchemaRefresh = 0 AND OBJECT_ID('tempdb..#TargetDependencyDetails', 'U') IS NULL)\r\nBEGIN --We Will Refresh with New Target Schema Changes When @DoSchemaRefresh = 1 (OR) When #TargetDependencyDetails DoesNot Exists\r\n\tIF OBJECT_ID('tempdb..#TargetDependencyDetails', 'U') IS NOT NULL\r\n\t\tDROP TABLE #TargetDependencyDetails;\r\n\tCREATE TABLE #TargetDependencyDetails (SchemaName NVARCHAR(128) NULL, TableName NVARCHAR(128) NOT NULL, LVL INT NOT NULL, DependencyPath NVARCHAR(MAX) NOT NULL);\r\n\t--\r\n\tINSERT INTO #TargetDependencyDetails (SchemaName, TableName, LVL, DependencyPath)\r\n\tEXECUTE sys.sp_executesql @command = @SQLcmd;\r\n\t--\r\n\tINSERT INTO @TargetDependencyDetails(SchemaName, TableName, LVL, DependencyPath) SELECT SchemaName, TableName, LVL, DependencyPath FROM #TargetDependencyDetails;\r\nEND;\r\nELSE --We Will Use Existing Target Schema When @DoSchemaRefresh = 0 (AND) When #TargetDependencyDetails Exists Only\r\n\tINSERT INTO @TargetDependencyDetails(SchemaName, TableName, LVL, DependencyPath) SELECT SchemaName, TableName, LVL, DependencyPath FROM #TargetDependencyDetails;\r\n--\r\nIF @Debug = 2 SELECT @TargetDatabase AS \"DatabaseName\", SchemaName, TableName, LVL, DependencyPath FROM @TargetDependencyDetails;\r\n----$EndRegion: Get List of Tables from @TargetDatabase\r\n--\r\n----$BeginRegion: RAISERROR IF @SourceDatabase OR @TargetDatabase IS EMPTY\r\nIF NOT EXISTS (SELECT * FROM @SourceDependencyDetails) OR NOT EXISTS (SELECT * FROM @TargetDependencyDetails)\r\nBEGIN\r\n\tSET @ErrMsg = NULL; --Reset Value\r\n\tSET @ErrMsg --\r\n\t\t= 'The ' + CASE\r\n\t\t\t\t\t\tWHEN NOT EXISTS(SELECT * FROM @SourceDependencyDetails) AND NOT EXISTS(SELECT * FROM @TargetDependencyDetails)\r\n\t\t\t\t\t\t\tTHEN '@SourceDatabase= \"' + @SourceDatabase + '\" AND @TargetDatabase= \"' + @TargetDatabase + '\" are Empty...!'\r\n\t\t\t\t\t\tWHEN NOT EXISTS(SELECT * FROM @SourceDependencyDetails) THEN '@SourceDatabase= \"' + @SourceDatabase + '\" is Empty..!'\r\n\t\t\t\t\t\tWHEN NOT EXISTS(SELECT * FROM @TargetDependencyDetails) THEN '@TargetDatabase= \"' + @TargetDatabase + '\" is Empty..!'\r\n\t\t\t\t\t\tELSE '' END;\r\n\tRAISERROR(@ErrMsg, 11, 0) WITH NOWAIT;\r\n\tRETURN;\r\nEND;\r\n----$EndRegion: RAISERROR IF @SourceDatabase OR @TargetDatabase IS EMPTY\r\n--\r\nIF @IncludeDependencies = 1 AND (@SchemaName IS NOT NULL AND @TableName IS NOT NULL)\r\n----$BeginRegion: If @IncludeDependencies is Enabled => Traverses All Posibilites where @SCHname and @TBLname is Involved\r\nBEGIN\r\n\tDELETE FROM #TablesList WHERE 1 = 1; --Reset Table\r\n\tWHILE @SchemaName IS NOT NULL AND @TableName IS NOT NULL\r\n\tBEGIN\r\n\t\tINSERT INTO #TablesList(SCHname, TBLname, LVL, FLG)\r\n\t\tSELECT HD.SchemaName, HD.TableName, MAX(HD.LVL) AS \"LVL\", 0 AS FLG\r\n\t\tFROM (\r\n\t\t\t\tSELECT DISTINCT --HP.SchemaName, HP.TableName, HP.LVL, N.R.value('.', 'varchar(255)'), --\r\n\t\t\t\t\tSUBSTRING(N.R.value('.', 'varchar(255)'), 1, CHARINDEX('].[', N.R.value('.', 'varchar(255)'), 1)) AS \"SchemaName\", --\r\n\t\t\t\t\tSUBSTRING(N.R.value('.', 'varchar(255)'), CHARINDEX('].[', N.R.value('.', 'varchar(255)'), 1) + 2, 255) AS \"TableName\"\r\n\t\t\t\tFROM (\r\n\t\t\t\t\t\tSELECT SchemaName, TableName, LVL, DependencyPath\r\n\t\t\t\t\t\tFROM @SourceDependencyDetails\r\n\t\t\t\t\t\tWHERE REPLACE(REPLACE(DependencyPath, '[', ''), ']', '') LIKE '%' + ISNULL(@SchemaName, '') + '.' + ISNULL(@TableName + ' (', '') + '%'\r\n\t\t\t\t\t\tUNION\r\n\t\t\t\t\t\tSELECT SchemaName, TableName, LVL, DependencyPath\r\n\t\t\t\t\t\tFROM @TargetDependencyDetails\r\n\t\t\t\t\t\tWHERE REPLACE(REPLACE(DependencyPath, '[', ''), ']', '') LIKE '%' + ISNULL(@SchemaName, '') + '.' + ISNULL(@TableName + ' (', '') + '%'\r\n\t\t\t\t\t) AS HP\r\n\t\t\t\tCROSS APPLY (SELECT CAST('<r>' + REPLACE(REPLACE(DependencyPath, '&', '&amp;'), ' => ', '</r><r>') + '</r>' AS XML)) AS S(XMLCol)\r\n\t\t\t\tCROSS APPLY S.XMLCol.nodes('r') AS N(R)\r\n\t\t\t ) AS T\r\n\t\tINNER JOIN (SELECT SchemaName, TableName, LVL FROM @SourceDependencyDetails UNION SELECT SchemaName, TableName, LVL FROM @TargetDependencyDetails) AS HD \r\n\t\t\tON HD.SchemaName = REPLACE(REPLACE(T.SchemaName, '[', ''), ']', '') \r\n\t\t\t\tAND HD.TableName = REPLACE(REPLACE(SUBSTRING(T.TableName, 1, CHARINDEX('] (', T.TableName, 1)), '[', ''), ']', '')\r\n\t\tWHERE NOT EXISTS (SELECT 1 FROM #TablesList WHERE SCHname = HD.SchemaName AND TBLname = HD.TableName)\r\n\t\tGROUP BY HD.SchemaName, HD.TableName\r\n\t\tORDER BY MAX(HD.LVL) ASC, HD.SchemaName ASC, HD.TableName ASC;\r\n\t\t--\r\n\t\tUPDATE #TablesList SET FLG = 1 WHERE SCHname = @SchemaName AND TBLname = @TableName;\r\n\t\tSELECT @SchemaName = NULL, @TableName = NULL; --Reset Values\r\n\t\tSELECT TOP (1) @SchemaName = SCHname, @TableName = TBLname FROM #TablesList WHERE FLG = 0 ORDER BY FLG;\r\n\tEND;\r\n\t--\r\n\tIF @ShowDependency = 1\r\n\t----$BeginRegion: To Show Dependency Details\r\n\t\tSELECT '@ShowDependency' AS \"Table\", TL.SCHname, TL.TBLname, TL.LVL, HD.DependencyPath\r\n\t\tFROM #TablesList AS TL\r\n\t\tINNER JOIN (SELECT SchemaName, TableName, DependencyPath FROM @SourceDependencyDetails UNION SELECT SchemaName, TableName, DependencyPath FROM @TargetDependencyDetails) AS HD\r\n\t\t\tON TL.SCHname = HD.SchemaName AND TL.TBLname = HD.TableName\r\n\t\tORDER BY TL.LVL ASC, TL.SCHname ASC, TL.TBLname ASC;\r\n\t----$EndRegion: To Show Dependency Details\r\nEND;\r\n----$EndRegion: If @IncludeDependencies is Enabled => Traverses All Posibilites where @SCHname and @TBLname is Involved\r\nELSE --IF @IncludeDependencies = 0\r\n----$BeginRegion: If @IncludeDependencies is Disabled => We Get All the Tables along with LVL\r\nBEGIN\r\n\tDELETE FROM #TablesList WHERE 1 = 1; --Reset Table\r\n\tINSERT INTO #TablesList(SCHname, TBLname, LVL)\r\n\tSELECT TL.SchemaName, TL.TableName, MAX(TL.LVL)\r\n\tFROM (\r\n\t\t\tSELECT S.SchemaName, S.TableName, S.LVL\r\n\t\t\tFROM @SourceDependencyDetails AS S\r\n\t\t\tWHERE (S.SchemaName = @SchemaName OR @SchemaName IS NULL) AND (S.TableName = @TableName OR @TableName IS NULL)\r\n\t\t\tUNION\r\n\t\t\tSELECT T.SchemaName, T.TableName, T.LVL\r\n\t\t\tFROM @TargetDependencyDetails AS T\r\n\t\t\tWHERE (T.SchemaName = @SchemaName OR @SchemaName IS NULL) AND (T.TableName = @TableName OR @TableName IS NULL)\r\n\t\t ) AS TL\r\n\tGROUP BY TL.SchemaName, TL.TableName;\r\nEND;\r\n----$EndRegion: If @IncludeDependencies is Disabled => We Get All the Tables along with LVL\r\n--\r\n----$BeginRegion: RAISERROR IF @SchemaName OR @TableName DOESNOT EXISTS\r\nIF NOT EXISTS (SELECT * FROM #TablesList)\r\nBEGIN\r\n\tSET @ErrMsg = NULL; --Reset Value\r\n\tSET @ErrMsg --\r\n\t\t= 'The Table with '\r\n\t\t\t\t+ CASE\r\n\t\t\t\t\tWHEN @SchemaName IS NOT NULL AND @TableName IS NOT NULL THEN '@SchemaName= \"' + @SchemaName + '\" and @TableName= \"' + @TableName + '\"'\r\n\t\t\t\t\tWHEN @SchemaName IS NOT NULL AND @TableName IS NULL THEN '@SchemaName= \"' + @SchemaName + '\"'\r\n\t\t\t\t\tWHEN @SchemaName IS NULL AND @TableName IS NOT NULL THEN '@TableName= \"' + @TableName + '\"'\r\n\t\t\t\t\tELSE ''\r\n\t\t\t\tEND + ' DoesNot Exists..!';\r\n\tRAISERROR(@ErrMsg, 11, 0) WITH NOWAIT;\r\n\tRETURN;\r\nEND;\r\n----$EndRegion: RAISERROR IF @SchemaName OR @TableName DOESNOT EXISTS\r\nIF @Debug = 1 SELECT '#TablesList' AS \"Table\", SCHname, TBLname, LVL FROM #TablesList ORDER BY LVL ASC, SCHname ASC, TBLname ASC;\r\nIF (SELECT COUNT(*) FROM #TablesList) > 1 SET @Debug = 0; --@Debug will be Disabled if we have more Tables than One Table\r\n--$EndRegion: Get List of Tables from @SourceDatabase UNION @TargetDatabase\r\n--\r\n--\r\n/* ===== ** CURSOR TO FIND ROW DIFFERENCES FOR EACH TABLE ** ================================================================================================ */\r\n--$BeginRegion: Cursor for Each Table To Find Data Differences\r\nDECLARE @SCHname VARCHAR(128), @TBLname VARCHAR(128), @LVL INT, @RowCount INT;\r\nDECLARE TableCursor CURSOR LOCAL FAST_FORWARD FOR SELECT SCHname, TBLname, LVL FROM #TablesList ORDER BY LVL ASC, SCHname ASC, TBLname ASC;\r\nOPEN TableCursor;\r\nFETCH NEXT FROM TableCursor INTO @SCHname, @TBLname, @LVL;\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n\tBEGIN TRY\r\n\t\tSET @SQLcmd = NULL; SET @ErrMsg = NULL; --Reset Values\r\n\t\tIF @Debug = 1 PRINT '/*** Debug Print Comments For @Schema: \"' + @SCHname + '\" and @Table: \"' + @TBLname + '\" ***/' + CHAR(10);\r\n\t\t--\r\n\t\tINSERT INTO #COMPARISONTABLE (SchemaName, TableName, LVL) VALUES (@SCHname, @TBLname, @LVL);\r\n\t\t--\r\n\t\t--$BeginRegion: Getting TableColumns In Detail w.r.to @SCHname and @TBLname\r\n\t\tDELETE @TableColumns WHERE 1 = 1; --Reset Table\r\n\t\t--\r\n\t\t----$BeginRegion: Get TableColumns w.r.to @SCHname and @TBLname\r\n\t\tSET @SQLquery = NULL; --Reset Value\r\n\t\tSET @SQLquery --\r\n\t\t\t= N'N''SELECT DISTINCT COL.column_id, COL.name, ISC.DATA_TYPE, ISNULL(PKC.Is_PK, 0) AS is_primary, COL.is_identity, COL.is_computed ' + CHAR(10) --\r\n\t\t\t+\t N'FROM sys.columns AS COL ' + CHAR(10) --\r\n\t\t\t+\t N'INNER JOIN sys.tables AS TBL ON TBL.object_id = COL.object_id ' + CHAR(10) --\r\n\t\t\t+\t N'INNER JOIN sys.schemas AS SCH ON SCH.schema_id = TBL.schema_id ' + CHAR(10) --\r\n\t\t\t+\t N'INNER JOIN INFORMATION_SCHEMA.COLUMNS AS ISC ON ISC.TABLE_SCHEMA = SCH.name AND ISC.TABLE_NAME = TBL.name AND ISC.COLUMN_NAME = COL.name ' + CHAR(10) --\r\n\t\t\t+\t N'LEFT JOIN ( ' + CHAR(10) --\r\n\t\t\t+\t N'\t\t\t\tSELECT IC.object_id, IC.column_id, 1 AS \"Is_PK\" ' + CHAR(10) --\r\n\t\t\t+\t N'\t\t\t\tFROM sys.index_columns AS IC ' + CHAR(10) --\r\n\t\t\t+\t N'\t\t\t\tINNER JOIN sys.key_constraints AS KC ON IC.object_id = KC.parent_object_id AND IC.index_id = KC.unique_index_id AND KC.type = ''''PK'''' ' + CHAR(10) --\r\n\t\t\t+\t N'\t\t  ) AS PKC ON PKC.column_id = COL.column_id AND PKC.object_id = COL.object_id ' + CHAR(10) --\r\n\t\t\t+\t N'WHERE SCH.name = ''''' + @SCHname + ''''' AND TBL.name = ''''' + @TBLname + ''''' ' + CHAR(10) --\r\n\t\t\t+\t N'ORDER BY COL.column_id ASC;''';\r\n\t\t--\r\n\t\tSET @SQLcmd = NULL; --Reset Value\r\n\t\tSET @SQLcmd = N'EXECUTE ' + QUOTENAME(ISNULL(@SourceLinkedSVR, @@SERVERNAME)) + '.' + QUOTENAME(@SourceDatabase) + N'.sys.sp_executesql @command = ' + @SQLquery + ';';\r\n\t\tIF @Debug = 1 PRINT '--Getting Table Columns In Detail w.r.to @SCHname and @TBLname:' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10);\r\n\t\tINSERT INTO @TableColumns(ColID, ColumnName, ColumnDataType, IsPrimaryKeyCol, IsIdentityCol, IsComputedCol)\r\n\t\tEXECUTE sys.sp_executesql @command = @SQLcmd;\r\n\t\t--\r\n\t\tSELECT @TotalCols = 0, @TotalPKcols = 0, @ExclusivePKcols = 0, @ExclusiveIDcols = 0, @IDasPKcols = 0, @CALCcols = 0; --Reset Values\r\n\t\tSELECT @TotalCols = COUNT(*) FROM @TableColumns;\r\n\t\tSELECT @TotalPKcols = COUNT(*) FROM @TableColumns WHERE IsPrimaryKeyCol = 1;\r\n\t\tSELECT @ExclusivePKcols = COUNT(*) FROM @TableColumns WHERE IsPrimaryKeyCol = 1 AND IsIdentityCol= 0;\r\n\t\tSELECT @ExclusiveIDcols = COUNT(*) FROM @TableColumns WHERE IsPrimaryKeyCol = 0 AND IsIdentityCol = 1;\r\n\t\tSELECT @IDasPKcols = COUNT(*) FROM @TableColumns WHERE IsPrimaryKeyCol = 1 AND IsIdentityCol = 1;\r\n\t\tSELECT @CALCcols = COUNT(*) FROM @TableColumns WHERE IsComputedCol = 1;\r\n\t\t----$EndRegion: Get TableColumns w.r.to @SCHname and @TBLname\r\n\t\t--\r\n\t\t----$BeginRegion: Updating #COMPARISONTABLE for Exceptional Case Remarks\r\n\t\tUPDATE #COMPARISONTABLE\r\n\t\tSET Remarks = Remarks --\r\n\t\t\t+ CASE --\r\n\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 0 AND @CALCcols = 0 --\r\n\t\t\t\t\tTHEN '/** Table Contains All Columns as PrimaryKey Columns Only *|* UPDATE Check Not Possible **/' --\r\n\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 0 AND @CALCcols <> 0 --\r\n\t\t\t\t\tTHEN '/** Table Contains All Columns as PrimaryKey Columns and Computed Columns Only *|* UPDATE Check Not Possible **/' --\r\n\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 1 AND @ExclusiveIDcols = 0 AND @IDasPKcols = 1 AND @CALCcols = 0 --\r\n\t\t\t\t\tTHEN '/** Table Contains All Columns as PrimaryKey Columns Only in which One of the PrimaryKey Column is an IdentityKey Column *|* UPDATE Check Not Possible **/' --\r\n\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 1 AND @ExclusiveIDcols = 0 AND @IDasPKcols = 1 AND @CALCcols <> 0 --\r\n\t\t\t\t\tTHEN '/** Table Contains All Columns as PrimaryKey Columns and Computed Columns Only in which One of the PrimaryKey Column is an IdentityKey Column *|* UPDATE Check Not Possible **/' --\r\n\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 1 AND @ExclusiveIDcols = 1 AND @IDasPKcols = 0 AND @CALCcols = 0 --\r\n\t\t\t\t\tTHEN '/** Table Contains All Columns as Both Exclusive PrimaryKey Columns and Exclusive IdentityKey Column Only *|* UPDATE Check Not Possible **/' --\r\n\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 1 AND @ExclusiveIDcols = 1 AND @IDasPKcols = 0 AND @CALCcols <> 0 --\r\n\t\t\t\t\tTHEN '/** Table Contains All Columns as Both Exclusive PrimaryKey Columns and Exclusive IdentityKey Column and Computed Columns Only *|* UPDATE Check Not Possible **/' --\r\n\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols = 0 AND @IDasPKcols = 0 AND @ExclusiveIDcols = 0) --\r\n\t\t\t\t\tTHEN '/** Heap Table - DoesNot Contain Any KEY Columns **/' --\r\n\t\t\t\tELSE '' END\r\n\t\tWHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t----$EndRegion: Updating #COMPARISONTABLE for Exceptional Case Remarks\r\n\t\t--\r\n\t\tIF @Debug = 1\r\n\t\tBEGIN\r\n\t\t\tSELECT @SCHname AS \"@SCHname\", @TBLname AS \"@TBLname\", TC.ColID, TC.ColumnName, TC.ColumnDataType, TC.IsPrimaryKeyCol, TC.IsIdentityCol, TC.IsComputedCol\r\n\t\t\tFROM @TableColumns AS TC;\r\n\t\t\t--\r\n\t\t\t----$BeginRegion: Remarks for Exceptional Tables\r\n\t\t\tSELECT @SCHname AS \"@SCHname\", @TBLname AS \"@TBLname\", @TotalCols AS \"@TotalCols\",\r\n\t\t\t\t   @TotalPKcols AS \"@TotalPKcols\", @ExclusivePKcols AS \"@ExclusivePKcols\", @ExclusiveIDcols AS \"@ExclusiveIDcols\", @IDasPKcols AS \"@IDasPKcols\", @CALCcols AS \"@CALCcols\",\r\n\t\t\t\tCASE --\r\n\t\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 0 AND @CALCcols = 0 --\r\n\t\t\t\t\t\tTHEN '/** Table Contains All Columns as PrimaryKey Columns Only **/' --\r\n\t\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 0 AND @CALCcols <> 0 --\r\n\t\t\t\t\t\tTHEN '/** Table Contains All Columns as PrimaryKey Columns and Computed Columns Only **/' --\r\n\t\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 1 AND @ExclusiveIDcols = 0 AND @IDasPKcols = 1 AND @CALCcols = 0 --\r\n\t\t\t\t\t\tTHEN '/** Table Contains All Columns as PrimaryKey Columns Only in which One of the PrimaryKey Column is an IdentityKey Column **/' --\r\n\t\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 1 AND @ExclusiveIDcols = 0 AND @IDasPKcols = 1 AND @CALCcols <> 0 --\r\n\t\t\t\t\t\tTHEN '/** Table Contains All Columns as PrimaryKey Columns and Computed Columns Only in which One of the PrimaryKey Column is an IdentityKey Column **/' --\r\n\t\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 1 AND @ExclusiveIDcols = 1 AND @IDasPKcols = 0 AND @CALCcols = 0 --\r\n\t\t\t\t\t\tTHEN '/** Table Contains All Columns as Both Exclusive PrimaryKey Columns and Exclusive IdentityKey Column Only **/' --\r\n\t\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols + @ExclusiveIDcols + @IDasPKcols + @CALCcols) = @TotalCols AND (@ExclusiveIDcols + @IDasPKcols) = 1 AND @ExclusiveIDcols = 1 AND @IDasPKcols = 0 AND @CALCcols <> 0 --\r\n\t\t\t\t\t\tTHEN '/** Table Contains All Columns as Both Exclusive PrimaryKey Columns and Exclusive IdentityKey Column and Computed Columns Only **/' --\r\n\t\t\t\t\tWHEN @TotalCols <> 0 AND (@ExclusivePKcols = 0 AND @IDasPKcols = 0 AND @ExclusiveIDcols = 0) --\r\n\t\t\t\t\t\tTHEN '/** Heap Table - DoesNot Contain Any KEY Columns **/' --\r\n\t\t\t\t\tELSE '' END AS Remarks;\r\n\t\t----$EndRegion: Remarks for Exceptional Tables\r\n\t\tEND;\r\n\t\t--$EndRegion: Getting TableColumns In Detail w.r.to @SCHname and @TBLname\r\n\t\t--\r\n\t\t--$BeginRegion: Identifying KeyColumns and Coalescing Columns for Clauses w.r.to @SCHname and @TBLname\r\n\t\tDELETE FROM @MatchColumns WHERE 1=1; --Reset Table\r\n\t\tIF EXISTS (SELECT * FROM @TableColumns WHERE IsPrimaryKeyCol = 1 OR IsIdentityCol = 1)\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO @MatchColumns (ColID, ColumnName)\r\n\t\t\tSELECT ColID, ColumnName FROM @TableColumns WHERE IsPrimaryKeyCol = 1 OR IsIdentityCol = 1;\r\n\t\tEND;\r\n\t\t--\r\n\t\t----$BeginRegion: Coalesce @ColumnsListNotation For OPENQUERY based on @TableColumns\r\n\t\tSET @ColumnsListNotation = NULL; --Reset Value\r\n\t\tSELECT @ColumnsListNotation = COALESCE(@ColumnsListNotation +\r\n\t\t\tCASE --\r\n\t\t\t\tWHEN ColumnDataType IN ( 'xml', 'text', 'ntext', 'uniqueidentifier', 'geography', 'hierarchyid' ) --\r\n\t\t\t\t\tTHEN ', CONVERT(NVARCHAR(MAX), [' + ColumnName + '])COLLATE DATABASE_DEFAULT AS \"' + ColumnName + '\"' --\r\n\t\t\t\tELSE ', [' + ColumnName + ']' END,\r\n\t\t\tCASE --\r\n\t\t\t\tWHEN ColumnDataType IN ( 'xml', 'text', 'ntext', 'uniqueidentifier', 'geography', 'hierarchyid' ) --\r\n\t\t\t\t\tTHEN 'CONVERT(NVARCHAR(MAX), [' + ColumnName + '])COLLATE DATABASE_DEFAULT AS \"' + ColumnName + '\"' --\r\n\t\t\t\tELSE '[' + ColumnName + ']' END)\r\n\t\tFROM @TableColumns\r\n\t\tWHERE IsComputedCol <> 1 --Exclude Computed Columns\r\n\t\tORDER BY ColID ASC;\r\n\t\t--\r\n\t\tIF @Debug = 1 PRINT '--@ColumnsListNotation: ' + ISNULL(@ColumnsListNotation, 'NULL') + CHAR(10);\r\n\t\t----$EndRegion: Coalesce @ColumnsListNotation For OPENQUERY based on @TableColumns\r\n\t\t--\r\n\t\t----$BeginRegion: Coalesce @ON_MatchedColList based on @MatchColumns\r\n\t\tSET @ON_MatchedColList = NULL; --Reset Value\r\n\t\tIF EXISTS (SELECT * FROM @MatchColumns)\r\n\t\t\tBEGIN\r\n\t\t\t\tSELECT @ON_MatchedColList = COALESCE(@ON_MatchedColList + ' AND T.[' + ColumnName + '] = S.[' + ColumnName + ']', 'T.[' + ColumnName + '] = S.[' + ColumnName + ']')\r\n\t\t\t\tFROM @MatchColumns;\r\n\t\t\tEND;\r\n\t\tELSE\r\n\t\t\tSET @ON_MatchedColList = 'T.<TargetColumnName> = S.<SourceColumnName>';\r\n\t\t--\r\n\t\tIF @Debug = 1 PRINT '--@ON_MatchedColList: ' + ISNULL(@ON_MatchedColList, 'NULL') + CHAR(10);\r\n\t\t----$EndRegion: Coalesce @ON_MatchedColList based on @MatchColumns\r\n\t\t--\r\n\t\t----$BeginRegion: Coalesce @WHERE_UnMatchedColList based on @TableColumns and @MatchColumns\r\n\t\tSET @WHERE_UnMatchedColList = NULL; --Reset Value\r\n\t\tSELECT @WHERE_UnMatchedColList = COALESCE(@WHERE_UnMatchedColList +\r\n\t\t\tCASE --\r\n\t\t\t\tWHEN ColumnDataType IN ('xml', 'text', 'ntext', 'uniqueidentifier', 'geography', 'hierarchyid') --\r\n\t\t\t\t\tTHEN ' OR ISNULL(CONVERT(NVARCHAR(MAX), T.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''') != ISNULL(CONVERT(NVARCHAR(MAX), S.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''')' --\r\n\t\t\t\tWHEN ColumnDataType IN ('varbinary', 'decimal') --\r\n\t\t\t\t\tTHEN ' OR ISNULL(T.[' + ColumnName + '], 0) != ISNULL(S.[' + ColumnName + '], 0)' --\r\n\t\t\t\tWHEN ColumnDataType IN ('image') --\r\n\t\t\t\t\tTHEN ' OR ISNULL(CONVERT(VARCHAR(MAX), CONVERT(VARBINARY(MAX), T.[' + ColumnName + '])), '''') != ISNULL(CONVERT(VARCHAR(MAX), CONVERT(VARBINARY(MAX), S.[' + ColumnName + '])), '''')' --\r\n\t\t\t\tELSE ' OR ISNULL(T.[' + ColumnName + '], '''') != ISNULL(S.[' + ColumnName + '], '''')' END,\r\n\t\t\tCASE --\r\n\t\t\t\tWHEN ColumnDataType IN ('xml', 'text', 'ntext', 'uniqueidentifier', 'geography', 'hierarchyid') --\r\n\t\t\t\t\tTHEN 'ISNULL(CONVERT(NVARCHAR(MAX), T.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''') != ISNULL(CONVERT(NVARCHAR(MAX), S.[' + ColumnName + '])COLLATE DATABASE_DEFAULT, '''')' --\r\n\t\t\t\tWHEN ColumnDataType IN ('varbinary', 'decimal') --\r\n\t\t\t\t\tTHEN 'ISNULL(T.[' + ColumnName + '], 0) != ISNULL(S.[' + ColumnName + '], 0)' --\r\n\t\t\t\tWHEN ColumnDataType IN ('image') --\r\n\t\t\t\t\tTHEN 'ISNULL(CONVERT(VARCHAR(MAX), CONVERT(VARBINARY(MAX), T.[' + ColumnName + '])), '''') != ISNULL(CONVERT(VARCHAR(MAX), CONVERT(VARBINARY(MAX), S.[' + ColumnName + '])), '''')' --\r\n\t\t\t\tELSE 'ISNULL(T.[' + ColumnName + '], '''') != ISNULL(S.[' + ColumnName + '], '''')' END)\r\n\t\tFROM @TableColumns\r\n\t\tWHERE ColumnName NOT IN ( SELECT ColumnName FROM @MatchColumns ) --Exclude PrimaryKey Columns and IdentityKey Column\r\n\t\t\tAND IsComputedCol <> 1 --Exclude Computed Columns\r\n\t\tORDER BY ColID ASC;\r\n\t\t--\r\n\t\tIF @Debug = 1 PRINT '--@WHERE_UnMatchedColList: ' + ISNULL(@WHERE_UnMatchedColList, 'NULL') + CHAR(10);\r\n\t\t----$EndRegion: Coalesce @WHERE_UnMatchedColList based on @TableColumns and @MatchColumns\r\n\t\t--\r\n\t\t----$BeginRegion: Coalesce @WhereColList based on @MatchColumns\r\n\t\tSET @WhereColList = NULL; --Reset Value\r\n\t\tSELECT @WhereColList = COALESCE(@WhereColList + ' AND [' + ColumnName + '] IS NULL', '[' + ColumnName + '] IS NULL') FROM @MatchColumns;\r\n\t\t--\r\n\t\tIF @Debug = 1 PRINT '--@WhereColList: ' + ISNULL(@WhereColList, 'NULL') + CHAR(10);\r\n\t\t----$EndRegion: Coalesce @WhereColList based on @MatchColumns\r\n\t\t--\r\n\t\t--$EndRegion: Identifying KeyColumns and Coalescing Columns for Clauses w.r.to @SCHname and @TBLname\r\n\t\t--\r\n\t\t--$BeginRegion: Getting Actual Manipulated Rows Count w.r.to @SCHname and @TBLname\r\n\t\t----$BeginRegion: Actual RowCount FROM @SourceDatabaseTable\r\n\t\tSET @SQLcmd = NULL; SET @RowCount = NULL; --Reset Values\r\n\t\tIF ISNULL(@SourceLinkedSVR, @@SERVERNAME) = @@SERVERNAME\r\n\t\t\tSET @SQLcmd = N'SELECT @RowCountOUT = COUNT(*) FROM [' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '].[' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + '];';\r\n\t\tELSE --IF ISNULL(@SourceLinkedSVR, @@SERVERNAME) <> @@SERVERNAME\r\n\t\t\tSET @SQLcmd = N'SELECT @RowCountOUT = CNT FROM OPENQUERY([' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '], ''SELECT COUNT(*) AS CNT FROM [' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']'')';\r\n\t\tIF @Debug = 1 PRINT '--Actual RowCount FROM @SourceDatabaseTable:' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10);\r\n\t\tBEGIN TRY\r\n\t\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\t\tUPDATE #COMPARISONTABLE SET SourceRowCount = @RowCount WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\tSET @ErrMsg = NULL; SET @ErrMsg = ERROR_MESSAGE(); --Reset Values\r\n\t\t\tUPDATE #COMPARISONTABLE SET Remarks = @ErrMsg WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\tIF @Debug = 1 PRINT '--* ' + @ErrMsg + CHAR(10);\r\n\t\tEND CATCH;\r\n\t\t----$EndRegion: Actual RowCount FROM @SourceDatabaseTable\r\n\t\t--\r\n\t\t----$BeginRegion: Actual RowCount FROM @TargetDatabaseTable\r\n\t\tSET @SQLcmd = NULL; SET @RowCount = NULL; --Reset Values\r\n\t\tIF ISNULL(@TargetLinkedSVR, @@SERVERNAME) = @@SERVERNAME\r\n\t\t\tSET @SQLcmd = N'SELECT @RowCountOUT = COUNT(*) FROM [' + ISNULL(@TargetLinkedSVR, @@SERVERNAME) + '].[' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + '];';\r\n\t\tELSE--IF ISNULL(@SourceLinkedSVR, @@SERVERNAME) <> @@SERVERNAME\r\n\t\t\tSET @SQLcmd = N'SELECT @RowCountOUT = CNT FROM OPENQUERY([' + ISNULL(@TargetLinkedSVR, @@SERVERNAME) + '], ''SELECT COUNT(*) AS CNT FROM [' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']'')';\r\n\t\tIF @Debug = 1 PRINT '--Actual RowCount FROM @TargetDatabaseTable:' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10);\r\n\t\tBEGIN TRY\r\n\t\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\t\tUPDATE #COMPARISONTABLE SET TargetRowCount = @RowCount WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\tSET @ErrMsg = NULL; SET @ErrMsg = ERROR_MESSAGE();\r\n\t\t\tUPDATE #COMPARISONTABLE SET Remarks = @ErrMsg WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\tIF @Debug = 1 PRINT '--* ' + @ErrMsg + CHAR(10);\r\n\t\tEND CATCH;\r\n\t\t----$EndRegion: Actual RowCount FROM @TargetDatabaseTable\r\n\t\t--\r\n\t\t----$BeginRegion: Actual Rows DELETED FROM @TargetDatabaseTable w.r.to @SourceDatabaseTable\r\n\t\tSET @SQLcmd = NULL; SET @RowCount = NULL; --Reset Values\r\n\t\tSET @SQLcmd --\r\n\t\t\t= N'SELECT @RowCountOUT = COUNT(*)' + CHAR(10) --\r\n\t\t\t+ N'FROM ' --\r\n\t\t\t\t+ CASE WHEN ISNULL(@SourceLinkedSVR, @@SERVERNAME) = @@SERVERNAME\r\n\t\t\t\t\t\tTHEN N'[' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '].[' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']'\r\n\t\t\t\t\t   ELSE N'(SELECT * FROM OPENQUERY([' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '], ''SELECT ' + @ColumnsListNotation + ' FROM [' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']''))'\r\n\t\t\t\t\tEND + ' AS S' + CHAR(10) --\r\n\t\t\t+ N'FULL OUTER JOIN ' --\r\n\t\t\t\t+ CASE WHEN ISNULL(@TargetLinkedSVR, @@SERVERNAME) = @@SERVERNAME \r\n\t\t\t\t\t\tTHEN N'[' + @@SERVERNAME + '].[' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']'\r\n\t\t\t\t\t   ELSE N'(SELECT * FROM OPENQUERY([' + ISNULL(@TargetLinkedSVR, @@SERVERNAME) + '], ''SELECT ' + @ColumnsListNotation + ' FROM [' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']''))'\r\n\t\t\t\t\tEND + ' AS T' + CHAR(10) --\r\n\t\t\t+ N'\tON ' + @ON_MatchedColList + CHAR(10) --\r\n\t\t\t+ N'WHERE ' + REPLACE(@WhereColList, '[', 'T.[') + ';';\r\n\t\tIF @Debug = 1 PRINT '--Actual Rows DELETED FROM @TargetDatabaseTable w.r.to @SourceDatabaseTable:' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10);\r\n\t\tBEGIN TRY\r\n\t\t\tIF NOT EXISTS (SELECT * FROM #COMPARISONTABLE WHERE SchemaName = @SCHname AND TableName = @TBLname AND Remarks LIKE 'Invalid object name%' )\r\n\t\t\tBEGIN\r\n\t\t\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\t\t\tUPDATE #COMPARISONTABLE SET RowsDEL = @RowCount WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\tEND;\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\tSET @ErrMsg = NULL; SET @ErrMsg = ERROR_MESSAGE(); --Reset Values\r\n\t\t\tUPDATE #COMPARISONTABLE SET Remarks = @ErrMsg WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\tIF @Debug = 1 PRINT '--* ' + @ErrMsg + CHAR(10);\r\n\t\tEND CATCH;\r\n\t\t----$EndRegion: Actual Rows DELETED FROM @TargetDatabaseTable w.r.to @SourceDatabaseTable\r\n\t\t--\r\n\t\t----$BeginRegion: Actual Rows INSERTED INTO @TargetDatabaseTable w.r.to @SourceDatabaseTable\r\n\t\tSET @SQLcmd = NULL; SET @RowCount = NULL; --Reset Values\r\n\t\tSET @SQLcmd --\r\n\t\t\t= N'SELECT @RowCountOUT = COUNT(*)' + CHAR(10) --\r\n\t\t\t+ N'FROM ' --\r\n\t\t\t\t+ CASE WHEN ISNULL(@SourceLinkedSVR, @@SERVERNAME) = @@SERVERNAME --\r\n\t\t\t\t\t\tTHEN N'[' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '].[' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']' --\r\n\t\t\t\t\t   ELSE N'(SELECT * FROM OPENQUERY([' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '], ''SELECT ' + @ColumnsListNotation + ' FROM [' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']''))' --\r\n\t\t\t\t\tEND + ' AS S' + CHAR(10) --\r\n\t\t\t+ N'FULL OUTER JOIN ' --\r\n\t\t\t\t+ CASE WHEN ISNULL(@TargetLinkedSVR, @@SERVERNAME) = @@SERVERNAME --\r\n\t\t\t\t\t\tTHEN N'[' + @@SERVERNAME + '].[' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']' --\r\n\t\t\t\t\t   ELSE N'(SELECT * FROM OPENQUERY([' + ISNULL(@TargetLinkedSVR, @@SERVERNAME) + '], ''SELECT ' + @ColumnsListNotation + ' FROM [' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']''))' --\r\n\t\t\t\t\tEND + ' AS T' + CHAR(10) --\r\n\t\t\t+ N'\tON ' + @ON_MatchedColList + CHAR(10) --\r\n\t\t\t+ N'WHERE ' + REPLACE(@WhereColList, '[', 'S.[') + ';';\r\n\t\tIF @Debug = 1 PRINT '--Actual Rows INSERTED INTO @TargetDatabaseTable w.r.to @SourceDatabaseTable:' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10);\r\n\t\tBEGIN TRY\r\n\t\t\tIF NOT EXISTS (SELECT * FROM #COMPARISONTABLE WHERE SchemaName = @SCHname AND TableName = @TBLname AND Remarks LIKE 'Invalid object name%' )\r\n\t\t\tBEGIN\r\n\t\t\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\t\t\tUPDATE #COMPARISONTABLE SET RowsINS = @RowCount WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\tEND;\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\tSET @ErrMsg = NULL; SET @ErrMsg = ERROR_MESSAGE(); --Reset Values\r\n\t\t\tUPDATE #COMPARISONTABLE SET Remarks = @ErrMsg WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\tIF @Debug = 1 PRINT '--* ' + @ErrMsg + CHAR(10);\r\n\t\tEND CATCH;\r\n\t\t----$EndRegion: Actual Rows INSERTED INTO @TargetDatabaseTable w.r.to @SourceDatabaseTable\r\n\t\t--\r\n\t\t----$BeginRegion: Actual Rows UPDATED(MODIFIED) IN @TargetDatabaseTable w.r.to @SourceDatabaseTable\r\n\t\tSET @SQLcmd = NULL; SET @RowCount = NULL; --Reset Values\r\n\t\tSET @SQLcmd \r\n\t\t\t= N'SELECT @RowCountOUT = COUNT(*)' + CHAR(10) --\r\n\t\t\t+ N'FROM ' --\r\n\t\t\t\t+ CASE WHEN ISNULL(@SourceLinkedSVR, @@SERVERNAME) = @@SERVERNAME --\r\n\t\t\t\t\t\tTHEN N'[' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '].[' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']' --\r\n\t\t\t\t\t   ELSE N'(SELECT * FROM OPENQUERY([' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '], ''SELECT ' + @ColumnsListNotation + ' FROM [' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']''))' --\r\n\t\t\t\t\tEND + ' AS S' + CHAR(10) --\r\n\t\t\t+ N'INNER JOIN ' --\r\n\t\t\t\t+ CASE WHEN ISNULL(@TargetLinkedSVR, @@SERVERNAME) = @@SERVERNAME --\r\n\t\t\t\t\t\tTHEN N'[' + @@SERVERNAME + '].[' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']' --\r\n\t\t\t\t\t   ELSE N'(SELECT * FROM OPENQUERY([' + ISNULL(@TargetLinkedSVR, @@SERVERNAME) + '], ''SELECT ' + @ColumnsListNotation + ' FROM [' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']''))' --\r\n\t\t\t\t\tEND + ' AS T' + CHAR(10) --\r\n\t\t\t+ N'\tON ' + @ON_MatchedColList + ' ' + CHAR(10) --\r\n\t\t\t+ N'WHERE ' + @WHERE_UnMatchedColList + ';';\r\n\t\tIF @Debug = 1 PRINT '--Actual Rows UPDATED(MODIFIED) IN @TargetDatabaseTable w.r.to @SourceDatabaseTable:' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10);\r\n\t\tBEGIN TRY\r\n\t\t\tIF NOT EXISTS (SELECT * FROM #COMPARISONTABLE WHERE SchemaName = @SCHname AND TableName = @TBLname AND Remarks LIKE 'Invalid object name%')\r\n\t\t\tBEGIN\r\n\t\t\t\tEXECUTE sys.sp_executesql @Command = @SQLcmd, @Param = N'@RowCountOUT INT OUTPUT', @RowCountOUT = @RowCount OUTPUT;\r\n\t\t\t\tUPDATE #COMPARISONTABLE SET RowsUPD = @RowCount WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\tEND;\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\tSET @ErrMsg = NULL; SET @ErrMsg = ERROR_MESSAGE(); --Reset Values\r\n\t\t\tIF (@ExclusivePKcols = 0 AND @IDasPKcols = 0 AND @ExclusiveIDcols = 0) --Exclusing Heap Tables\r\n\t\t\t\tSET @ErrMsg = '/** Heap Table - DoesNot Contain Any KEY Columns **/';\r\n\t\t\tUPDATE #COMPARISONTABLE SET Remarks = @ErrMsg WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t\tIF @Debug = 1 PRINT '--* ' + @ErrMsg + CHAR(10);\r\n\t\t\tIF (@ExclusivePKcols = 0 AND @IDasPKcols = 0 AND @ExclusiveIDcols = 0) SET @ErrMsg = NULL; --Reset @ErrMsg to Generate Statements for Heap Tables\r\n\t\tEND CATCH;\r\n\t\t----$EndRegion: Actual Rows UPDATED(MODIFIED) IN @TargetDatabaseTable w.r.to @SourceDatabaseTable\r\n\t\t--$EndRegion: Getting Actual Manipulated Rows Count w.r.to @SCHname and @TBLname\r\n\t\t--\r\n\t\t--$BeginRegion: Generating ValidationQueries V1 and V2 w.r.to @SCHname and @TBLname\r\n\t\tIF NOT EXISTS (SELECT * FROM #COMPARISONTABLE WHERE SchemaName = @SCHname AND TableName = @TBLname AND Remarks LIKE 'Invalid object name%' )\r\n\t\tBEGIN\r\n\t\t----$BeginRegion: Generating ValidationQuery V1 w.r.to @SCH and @TBL\r\n\t\tSET @SQLcmd = NULL; SET @SelColListV1S = NULL; SET @SelColListV1T = NULL; --Reset Values\r\n\t\tSELECT\t@SelColListV1S = COALESCE(@SelColListV1S + ', S.[' + ColumnName + ']', 'S.[' + ColumnName + ']'),\r\n\t\t\t\t@SelColListV1T = COALESCE(@SelColListV1T + ', T.[' + ColumnName + ']', 'T.[' + ColumnName + ']')\r\n\t\tFROM @TableColumns\r\n\t\tORDER BY ColID ASC;\r\n\t\tIF @Debug = 1 PRINT '--@SelColListV1S: ' + @SelColListV1S + CHAR(10) + '--@SelColListV1T: ' + @SelColListV1T + CHAR(10);\r\n\t\t--\r\n\t\tSET @SQLcmd --\r\n\t\t\t= N'SELECT ''' + @SCHname + '.' + @TBLname + ''' AS \"TableName\", ' + @SelColListV1S + ', ' + '''|'' AS \"O\", ' + @SelColListV1T + CHAR(10) --\r\n\t\t\t+ N'FROM ' --\r\n\t\t\t\t+ CASE WHEN ISNULL(@SourceLinkedSVR, @@SERVERNAME) = @@SERVERNAME --\r\n\t\t\t\t\t\tTHEN N'[' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '].[' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']' --\r\n\t\t\t\t\t   ELSE N'(SELECT * FROM OPENQUERY([' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '], ''SELECT ' + @ColumnsListNotation + ' FROM [' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']''))' --\r\n\t\t\t\t\tEND + ' AS S' + CHAR(10) --\r\n\t\t\t+ N'FULL OUTER JOIN ' --\r\n\t\t\t\t+ CASE WHEN ISNULL(@TargetLinkedSVR, @@SERVERNAME) = @@SERVERNAME --\r\n\t\t\t\t\t\tTHEN N'[' + @@SERVERNAME + '].[' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']' --\r\n\t\t\t\t\t   ELSE N'(SELECT * FROM OPENQUERY([' + ISNULL(@TargetLinkedSVR, @@SERVERNAME) + '], ''SELECT ' + @ColumnsListNotation + ' FROM [' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']''))' --\r\n\t\t\t\t\tEND + ' AS T' + CHAR(10) --\r\n\t\t\t+ N'\tON ' + @ON_MatchedColList + CHAR(10) --\r\n\t\t\t+ CASE WHEN @WHERE_UnMatchedColList IS NOT NULL THEN N'WHERE /*1 = 1 OR*/ ' + @WHERE_UnMatchedColList ELSE '' END + ';';\r\n\t\tIF @Debug = 1 PRINT '--ValidationQuery V1 w.r.to @SCH and @TBL:' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10);\r\n\t\tUPDATE #COMPARISONTABLE SET ValidationQueryV1 = @SQLcmd WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t----$EndRegion: Generating ValidationQuery V1 w.r.to @SCH and @TBL\r\n\t\t--\r\n\t\t----$BeginRegion: Generating ValidationQuery V2 w.r.to @SCH and @TBL\r\n\t\tSET @SQLcmd = NULL; SET @SelColListV2 = NULL; --Reset Values\r\n\t\tSELECT @SelColListV2 = COALESCE(@SelColListV2 + ', S.[' + ColumnName + '], T.[' + ColumnName + ']', 'S.[' + ColumnName + '], T.[' + ColumnName + ']')\r\n\t\tFROM @TableColumns\r\n\t\tORDER BY ColID ASC;\r\n\t\tIF @Debug = 1 PRINT '--@SelColListV2: ' + @SelColListV2 + CHAR(10);\r\n\t\t--\r\n\t\tSET @SQLcmd --\r\n\t\t\t= N'SELECT ''' + @SCHname + '.' + @TBLname + ''' AS \"TableName\", ' + @SelColListV2 + CHAR(10) --\r\n\t\t\t+ N'FROM ' --\r\n\t\t\t\t+ CASE WHEN ISNULL(@SourceLinkedSVR, @@SERVERNAME) = @@SERVERNAME --\r\n\t\t\t\t\t\tTHEN N'[' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '].[' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']' --\r\n\t\t\t\t\t   ELSE N'(SELECT * FROM OPENQUERY([' + ISNULL(@SourceLinkedSVR, @@SERVERNAME) + '], ''SELECT ' + @ColumnsListNotation + ' FROM [' + @SourceDatabase + '].[' + @SCHname + '].[' + @TBLname + ']''))' --\r\n\t\t\t\t\tEND + ' AS S' + CHAR(10) --\r\n\t\t\t+ N'FULL OUTER JOIN ' --\r\n\t\t\t\t+ CASE WHEN ISNULL(@TargetLinkedSVR, @@SERVERNAME) = @@SERVERNAME --\r\n\t\t\t\t\t\tTHEN N'[' + @@SERVERNAME + '].[' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']' --\r\n\t\t\t\t\t   ELSE N'(SELECT * FROM OPENQUERY([' + ISNULL(@TargetLinkedSVR, @@SERVERNAME) + '], ''SELECT ' + @ColumnsListNotation + ' FROM [' + @TargetDatabase + '].[' + @SCHname + '].[' + @TBLname + ']''))' --\r\n\t\t\t\t\tEND + ' AS T' + CHAR(10) --\r\n\t\t\t+ N'\tON ' + @ON_MatchedColList + CHAR(10) --\r\n\t\t\t+ CASE WHEN @WHERE_UnMatchedColList IS NOT NULL THEN N'WHERE /*1 = 1 OR*/ ' + @WHERE_UnMatchedColList ELSE '' END + ';';\r\n\t\tIF @Debug = 1 PRINT '--ValidationQuery V2 w.r.to @SCH and @TBL:' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10);\r\n\t\tUPDATE #COMPARISONTABLE SET ValidationQueryV2 = @SQLcmd WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\t----$EndRegion: Generating ValidationQuery V2 w.r.to @SCH and @TBL\r\n\t\tEND;\r\n\t\t--$EndRegion: Generating ValidationQueries V1 and V2 w.r.to @SCHname and @TBLname\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSET @ErrMsg = NULL; SET @ErrMsg = ERROR_MESSAGE(); --Reset Values\r\n\t\tUPDATE #COMPARISONTABLE SET Remarks = @ErrMsg WHERE SchemaName = @SCHname AND TableName = @TBLname;\r\n\t\tIF @Debug = 1 PRINT '/** Error Occured: **/' + CHAR(10) + ISNULL(@SQLcmd, 'NULL') + CHAR(10) + '--* ' + @ErrMsg + CHAR(10);\r\n\tEND CATCH;\r\n\t--\r\n\tFETCH NEXT FROM TableCursor INTO @SCHname, @TBLname, @LVL;\r\nEND;\r\nCLOSE TableCursor;\r\nDEALLOCATE TableCursor;\r\n--$EndRegion: Cursor for Each Table To Find Data Differences\r\n--\r\n--\r\n/* ===== ** COMPARISION RESULT SET ** ======================================================================================================================= */\r\nSELECT SchemaName, TableName, LVL, SourceRowCount, TargetRowCount, RowsDEL, RowsINS, RowsUPD,\r\n\t   ValidationQueryV1 AS \"ValidationQuery (Preferred For RowsINS or RowsDEL)\", ValidationQueryV2 AS \"ValidationQuery (Preferred For RowsUPD)\",\r\n\t   ISNULL(Remarks, '') AS Remarks\r\nFROM #COMPARISONTABLE\r\nWHERE RowsINS <> 0 OR RowsDEL <> 0 OR RowsUPD <> 0 OR SourceRowCount IS NULL OR TargetRowCount IS NULL\r\nORDER BY LVL ASC, SchemaName ASC, TableName ASC;",
  "placeholders": [
    {
      "name": "SourceLinkedServer",
      "defaultValue": null
    },
    {
      "name": "TargetLinkedServer",
      "defaultValue": null
    },
    {
      "name": "SourceDatabase",
      "defaultValue": null
    },
    {
      "name": "TargetDatabase",
      "defaultValue": null
    },
    {
      "name": "SchemaName",
      "defaultValue": " "
    },
    {
      "name": "TableName",
      "defaultValue": " "
    }
  ]
}