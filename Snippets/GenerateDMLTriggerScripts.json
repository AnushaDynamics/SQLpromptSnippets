{
  "id": "db7e5e56-b0f6-462e-aaf6-919e9a7cbfdf",
  "prefix": "GenerateDMLTriggerScripts",
  "description": "Generate Scripts to Create Triggers for Delete, Insert and Update for a Table",
  "body": "/* =========================================================================================================================================\r\n-- Server\t\t: LOCAL SERVER\r\n-- Database\t\t: master\r\n-- Script\t\t: Generate DML Trigger for Any Table Mentioned Dynamically - v2\r\n-- Description\t: Generate Scripts to Create Triggers for Delete, Insert and Update for a Table\r\n-- Usage\t\t: Use the Database where you wanted to Create DML Triggers on the Table\r\n\t\t\t\t  * Need to Have DBAudit DB to store the Data Modifications as per DML Triggers.\r\n\t\t\t\t  * This Script Generates the DML Trigger Statements for the Table specified.\r\n\t\t\t\t  ** Provide info for USE Database, and @DatabaseName, @SchemaName, @TableName.\r\n\t\t\t\t  * Copy the Generated Code and execute against same DB.\r\n========================================================================================================================================= */\r\nUSE master;\r\nGO\r\nDECLARE --\r\n\t@DatabaseName VARCHAR(256) = '$DatabaseName$',\r\n\t@SchemaName VARCHAR(128) = '$SchemaName$',\r\n\t@TableName VARCHAR(256) = '$TableName$',\r\n\t--To Include/Exclude Scripts for AuditTable, DeleteTrigger, InsertTrigger, UpdateTrigger.\r\n\t@CreateAuditTable BIT = 1,\t--AuditTable Script will be Generated. (We can Disable if We already have Audit Tables Created)\r\n\t@GenerateDeleteTrigger BIT = 1, -- 1 = Included (Default) | 0 = Excluded\r\n\t@GenerateInsertTrigger BIT = 1, -- 1 = Included (Default) | 0 = Excluded\r\n\t@GenerateUpdateTrigger BIT = 1, -- 1 = Included (Default) | 0 = Excluded\r\n\t@Debug BIT = 1\t-- 1 = Print Debug | 0 = Excluded (Default)\r\n--AS\r\n/* ===== ** DO NOT CHANGE CODE BELOW FROM HERE ** =========================================================================================================== */\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tDECLARE @SQLstring AS NVARCHAR(MAX);\r\n\t--\r\n\t--$BeginRegion: Source Object Check\r\n\tDECLARE @ReturnINT INT, @ReturnTXT VARCHAR(256);\r\n\tSET @SQLstring --\r\n\t\t= N'IF EXISTS (SELECT 1 FROM master.sys.databases WHERE name = '''+@DatabaseName+N''')'+CHAR(10) --\r\n\t\t+ N'\tIF EXISTS (SELECT 1 FROM ['+@DatabaseName+N'].sys.schemas WHERE name = '''+@SchemaName+N''')'+CHAR(10) --\r\n\t\t+ N'\t\tIF EXISTS (SELECT 1 FROM ['+@DatabaseName+N'].sys.tables AS TBL INNER JOIN ['+@DatabaseName+N'].sys.schemas AS SCH ON SCH.schema_id = TBL.schema_id WHERE SCH.name = '''+@SchemaName+N''' AND TBL.name = '''+@TableName+N''')'+CHAR(10) --\r\n\t\t+ N'\t\t\tSET @ReturnOUT1 = 0;'+CHAR(10) --\r\n\t\t+ N'\t\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Database \"'+@DatabaseName+N'\" And Schema \"'+@SchemaName+N'\" Exists But Table \"'+@TableName+N'\" Does Not Exists..!''; END;'+CHAR(10) --\r\n\t\t+ N'\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Database \"'+@DatabaseName+N'\" Exists But Schema \"'+@SchemaName+N'\" Does Not Exists..!''; END;'+CHAR(10) --\r\n\t\t+ N'ELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Database \"'+@DatabaseName+N'\" Does Not Exists..!''; END;';\r\n\t--PRINT @SQLstring;\r\n\tEXECUTE sys.sp_executesql @CMD = @SQLstring, @PARAM = N'@ReturnOUT1 INT OUTPUT, @ReturnOUT2 VARCHAR(256) OUTPUT', @ReturnOUT1 = @ReturnINT OUTPUT, @ReturnOUT2 = @ReturnTXT OUTPUT;\r\n\tIF @ReturnINT = 1\r\n\tBEGIN\r\n\t\tSELECT @ReturnTXT AS \"ErrorMessage..!\";\r\n\t\tRAISERROR(@ReturnTXT, 16, 1) WITH NOWAIT;\r\n\t\tRETURN;\r\n\tEND;\r\n\t--$EndRegion: Source Object Check\r\n\t--\r\n\t--$BeginRegion: Generate Create Database DBAudit If Not Exists\r\n\tSET @SQLstring --\r\n\t\t= N'--$BeginRegion: Create Database \"DBAudit\" If Not Exists'+CHAR(10) --\r\n\t\t+ N'USE master;'+CHAR(10) --\r\n\t\t+ N'GO'+CHAR(10) --\r\n\t\t+ N'IF NOT EXISTS (SELECT * FROM master.sys.databases WHERE name = ''DBAudit'')'+CHAR(10) --\r\n\t\t+ N'\tEXEC master.sys.sp_executesql N''CREATE DATABASE [DBAudit];'';'+CHAR(10) --\r\n\t\t+ N'GO'+CHAR(10) --\r\n\t\t+ N'--$EndRegion: Create Database \"DBAudit\" If Not Exists';\r\n\tPRINT @SQLstring;\r\n\tPRINT N'--'+CHAR(10);\r\n\t--$EndRegion: Generate Create Database DBAudit If Not Exists\r\n\t--\r\n\t--$BeginRegion: Generate Create Schema in DBAudit Database If Not Exists\r\n\tSET @SQLstring --\r\n\t\t= N'--$BeginRegion: Create Schema \"'+@SchemaName+N'\" in DBAudit Database If Not Exists'+CHAR(10) --\r\n\t\t+ N'USE DBAudit;'+CHAR(10) --\r\n\t\t+ N'GO'+CHAR(10) --\r\n\t\t+ N'IF NOT EXISTS (SELECT * FROM DBAudit.sys.schemas WHERE name = N'''+@SchemaName+N''')'+CHAR(10) --\r\n\t\t+ N'\tEXEC DBAudit.sys.sp_executesql N''CREATE SCHEMA ['+@SchemaName+N'];'';'+CHAR(10) --\r\n\t\t+ N'GO'+CHAR(10) --\r\n\t\t+ N'--$EndRegion: Create Schema \"'+@SchemaName+N'\" in DBAudit Database If Not Exists';\r\n\tPRINT @SQLstring;\r\n\tPRINT N'--'+CHAR(10);\r\n\t--$EndRegion: Generate Create Schema in DBAudit Database If Not Exists\r\n\t--\r\n\t--\r\n\t--$BeginRegion: Creating Audit Table in DBAudit Database\r\n\t----$BeginRegion: Getting Table Column Names\r\n\tDECLARE @TableColumns TABLE\r\n\t(\r\n\t\tColID INT NULL, --ORDINAL_POSITION\r\n\t\tColumnName VARCHAR(256) NULL,\r\n\t\tColumnDataType VARCHAR(64) NULL,\r\n\t\tIsPrimaryKeyCol BIT NULL,\r\n\t\tIsComputedCol BIT NULL,\r\n\t\tIsIdentityCol BIT NULL\r\n\t);\r\n\t--\r\n\tSET @SQLstring --\r\n\t\t= N'SELECT DISTINCT COL.column_id, COL.name, ISC.DATA_TYPE+ISNULL(''(''+CAST(ISC.CHARACTER_MAXIMUM_LENGTH AS VARCHAR(32))+N'')'', ''''), ISNULL(PKC.Is_PK, 0), COL.is_computed, COL.is_identity'+CHAR(10) --\r\n\t\t+ N'FROM ['+@DatabaseName+N'].sys.columns AS COL'+CHAR(10) --\r\n\t\t+ N'INNER JOIN ['+@DatabaseName+N'].sys.tables AS TBL ON TBL.object_id = COL.object_id'+CHAR(10) --\r\n\t\t+ N'INNER JOIN ['+@DatabaseName+N'].sys.schemas AS SCH ON SCH.schema_id = TBL.schema_id'+CHAR(10) --\r\n\t\t+ N'INNER JOIN ['+@DatabaseName+N'].INFORMATION_SCHEMA.COLUMNS AS ISC ON ISC.TABLE_SCHEMA = SCH.name AND ISC.TABLE_NAME = TBL.name AND ISC.COLUMN_NAME = COL.name'+CHAR(10) --\r\n\t\t+ N'LEFT JOIN ('+CHAR(10) --\r\n\t\t+ N'\t\t\tSELECT IC.object_id, IC.column_id, 1 AS \"Is_PK\"'+CHAR(10) --\r\n\t\t+ N'\t\t\tFROM ['+@DatabaseName+N'].sys.index_columns AS IC'+CHAR(10) --\r\n\t\t+ N'\t\t\tINNER JOIN ['+@DatabaseName+N'].sys.key_constraints AS KC ON IC.object_id = KC.parent_object_id AND IC.index_id = KC.unique_index_id AND KC.type = ''PK'''+CHAR(10) --\r\n\t\t+ N'\t\t  ) AS PKC ON PKC.column_id = COL.column_id AND PKC.object_id = COL.object_id'+CHAR(10) --\r\n\t\t+ N'WHERE SCH.name = '''+@SchemaName+N''' AND TBL.name = '''+@TableName+N''''+CHAR(10) --\r\n\t\t+ N'ORDER BY COL.column_id ASC;';\r\n\t--PRINT @SQLstring;\r\n\t--\r\n\tINSERT INTO @TableColumns\r\n\t(\r\n\t\tColID,\r\n\t\tColumnName,\r\n\t\tColumnDataType,\r\n\t\tIsPrimaryKeyCol,\r\n\t\tIsComputedCol,\r\n\t\tIsIdentityCol\r\n\t)\r\n\tEXEC sys.sp_executesql @statement = @SQLstring;\r\n\tIF @Debug = 1\r\n\tBEGIN\r\n\t\tSELECT @DatabaseName AS \"DatabaseName\", @SchemaName AS \"SchemaName\", @TableName AS \"TableName\",\r\n\t\t\t\tTC.ColID, TC.ColumnName, TC.ColumnDataType, TC.IsPrimaryKeyCol, TC.IsComputedCol, TC.IsIdentityCol\r\n\t\tFROM @TableColumns AS TC;\r\n\tEND;\r\n\t----$EndRegion: Getting Table Column Names\r\n\t--\r\n\t----$BeginRegion: Setting Audit Table Name\r\n\tDECLARE @AuditTableName NVARCHAR(256);\r\n\tSET @AuditTableName = '[DBAudit].['+@SchemaName+N'].[' \r\n\t\t\t\t\t\t+\tCASE\r\n\t\t\t\t\t\t\t\tWHEN (@DatabaseName LIKE '%AdventureWorks%') THEN 'AW'\r\n\t\t\t\t\t\t\t\tWHEN (@DatabaseName LIKE '%AdventureWorks2017%') THEN 'AW17'\r\n\t\t\t\t\t\t\t\tWHEN (@DatabaseName LIKE '%AdventureWorks2019%') THEN 'Aw19'\r\n\t\t\t\t\t\t\t\tWHEN (@DatabaseName LIKE '%WorldWideImporters%') THEN 'WWI'\r\n\t\t\t\t\t\t\t\tWHEN (@DatabaseName LIKE '%Northwind%') THEN 'NW'\r\n\t\t\t\t\t\t\t\tELSE @DatabaseName\r\n\t\t\t\t\t\t\tEND+N'_'+@TableName+N'_Audit]';\r\n\t--PRINT @AuditTableName;\r\n\t----$EndRegion: Setting Audit Table Name\r\n\t--\r\n\tIF @CreateAuditTable = 1\r\n\tBEGIN\r\n\t\t----$BeginRegion: Generate Create Audit Table in DBAudit Database\r\n\t\tPRINT N'--$BeginRegion: Create Audit Table \"'+@AuditTableName+N'\" in \"DBAudit\" Database';\r\n\t\tPRINT N'USE DBAudit;';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'IF OBJECT_ID('''+@AuditTableName+N''', ''U'') IS NOT NULL';\r\n\t\tPRINT N'\tDROP TABLE '+@AuditTableName+N';';\r\n\t\tPRINT N'CREATE TABLE '+@AuditTableName;\r\n\t\tPRINT N'(';\r\n\t\tPRINT N'\tAuditTime DATETIME DEFAULT GETDATE(), HostName VARCHAR(128), AppName VARCHAR(256), LoginUser VARCHAR(128), Spid INT, DML VARCHAR(2),';\r\n\t\tSET @SQLstring = N'\t'+STUFF((SELECT ', '+QUOTENAME(ColumnName)+N' '+ColumnDataType FROM @TableColumns ORDER BY ColID ASC FOR XML PATH('')), 1, 2, '');\r\n\t\tPRINT @SQLstring;\r\n\t\tPRINT N');';\r\n\t\tPRINT 'GO';\r\n\t\tPRINT N'--$EndRegion: Create Audit Table \"'+@AuditTableName+N'\" in \"DBAudit\" Database';\r\n\t\tPRINT '--'+CHAR(10);\r\n\t\t----$EndRegion: Generate Create Audit Table in DBAudit Database\t    \r\n\tEND;\r\n\t--$EndRegion: Creating Audit Table in DBAudit Database\r\n\t--\r\n\t--\r\n\tIF @GenerateDeleteTrigger = 1\r\n\tBEGIN\r\n\t\t--$BeginRegion: Generate Delete Trigger Script\r\n\t\tPRINT N'--$BeginRegion: Create Delete Trigger Script';\r\n\t\tPRINT N'USE ['+@DatabaseName+N'];';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'IF OBJECT_ID(''['+@SchemaName+N'].['+@TableName+N'_DelX]'', ''TR'') IS NOT NULL';\r\n\t\tPRINT N'\tDROP TRIGGER ['+@SchemaName+N'].['+@TableName+N'_DelX];';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'CREATE TRIGGER ['+@SchemaName+N'].['+@TableName+N'_DelX]';\r\n\t\tPRINT N'ON ['+@DatabaseName+N'].['+@SchemaName+N'].['+@TableName+N']';\r\n\t\tPRINT N'FOR DELETE';\r\n\t\tPRINT N'AS';\r\n\t\tPRINT N'BEGIN';\r\n\t\tSET @SQLstring = N'\tINSERT INTO '+@AuditTableName+N'(AuditTime, HostName, AppName, LoginUser, Spid, DML, '+STUFF((SELECT ', '+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColID ASC FOR XML PATH('')), 1, 2, '')+N')';\r\n\t\tPRINT @SQLstring;\r\n\t\tSET @SQLstring = N'\tSELECT GETDATE(), HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, ''D'', '+STUFF((SELECT ', D.'+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColID ASC FOR XML PATH('')), 1, 2, '');\r\n\t\tPRINT @SQLstring;\r\n\t\tPRINT N'\tFROM Deleted AS D;';\r\n\t\tPRINT N'END;';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'--$EndRegion: CReate Delete Trigger Script';\r\n\t\tPRINT '--'+CHAR(10);\r\n\t\t--$EndRegion: Generate Delete Trigger Script\t    \r\n\tEND;\r\n\t--\r\n\t--\r\n\tIF @GenerateInsertTrigger = 1\r\n\tBEGIN\r\n\t\t--$BeginRegion: Generate Insert Trigger Script\r\n\t\tPRINT N'--$BeginRegion: Create Insert Trigger Script';\r\n\t\tPRINT N'USE ['+@DatabaseName+N'];';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'IF OBJECT_ID(''['+@SchemaName+N'].['+@TableName+N'_InsX]'', ''TR'') IS NOT NULL';\r\n\t\tPRINT N'\tDROP TRIGGER ['+@SchemaName+N'].['+@TableName+N'_InsX];';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'CREATE TRIGGER ['+@SchemaName+N'].['+@TableName+N'_InsX]';\r\n\t\tPRINT N'ON ['+@DatabaseName+N'].['+@SchemaName+N'].['+@TableName+N']';\r\n\t\tPRINT N'FOR INSERT';\r\n\t\tPRINT N'AS';\r\n\t\tPRINT N'BEGIN';\r\n\t\tSET @SQLstring = N'\tINSERT INTO '+@AuditTableName+N'(AuditTime, HostName, AppName, LoginUser, Spid, DML, '+STUFF((SELECT ', '+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColID ASC FOR XML PATH('')), 1, 2, '')+N')';\r\n\t\tPRINT @SQLstring;\r\n\t\tSET @SQLstring = N'\tSELECT GETDATE(), HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, ''I'', '+STUFF((SELECT ', I.'+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColID ASC FOR XML PATH('')), 1, 2, '');\r\n\t\tPRINT @SQLstring;\r\n\t\tPRINT N'\tFROM Inserted AS I;';\r\n\t\tPRINT N'END;';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'--$EndRegion: Create Insert Trigger Script';\r\n\t\tPRINT '--'+CHAR(10);\r\n\t\t--$EndRegion: Generate Insert Trigger Script\r\n\tEND;\r\n\t--\r\n\t--\r\n\tIF @GenerateUpdateTrigger = 1\r\n\tBEGIN\r\n\t\t--$BeginRegion: Generate Update Trigger Script\r\n\t\tPRINT N'--$BeginRegion: Create Update Trigger Script';\r\n\t\tPRINT N'USE ['+@DatabaseName+N'];';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'IF OBJECT_ID(''['+@SchemaName+N'].['+@TableName+N'_UpdX]'', ''TR'') IS NOT NULL';\r\n\t\tPRINT N'\tDROP TRIGGER ['+@SchemaName+N'].['+@TableName+N'_UpdX];';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'CREATE TRIGGER ['+@SchemaName+N'].['+@TableName+N'_UpdX]';\r\n\t\tPRINT N'ON ['+@DatabaseName+N'].['+@SchemaName+N'].['+@TableName+N']';\r\n\t\tPRINT N'FOR UPDATE';\r\n\t\tPRINT N'AS';\r\n\t\tPRINT N'BEGIN';\r\n\t\tSET @SQLstring = N'\tINSERT INTO '+@AuditTableName+N'(AuditTime, HostName, AppName, LoginUser, Spid, DML, '+STUFF((SELECT ', '+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColID ASC FOR XML PATH('')), 1, 2, '')+N')';\r\n\t\tPRINT @SQLstring;\r\n\t\tSET @SQLstring = N'\tSELECT GETDATE(), HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, ''UD'', '+STUFF((SELECT ', D.'+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColID ASC FOR XML PATH('')), 1, 2, '');\r\n\t\tPRINT @SQLstring;\r\n\t\tPRINT N'\tFROM Deleted AS D;';\r\n\t\tPRINT N'\t--';\r\n\t\tSET @SQLstring = N'\tINSERT INTO '+@AuditTableName+N'(AuditTime, HostName, AppName, LoginUser, Spid, DML, '+STUFF((SELECT ', '+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColID ASC FOR XML PATH('')), 1, 2, '')+N')';\r\n\t\tPRINT @SQLstring;\r\n\t\tSET @SQLstring = N'\tSELECT GETDATE(), HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, ''UI'', '+STUFF((SELECT ', I.'+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColID ASC FOR XML PATH('')), 1, 2, '');\r\n\t\tPRINT @SQLstring;\r\n\t\tPRINT N'\tFROM Inserted AS I;';\r\n\t\tPRINT N'END;';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'--$EndRegion: Create Update Trigger Script';\r\n\t\tPRINT '--'+CHAR(10);\r\n\t\t--$EndRegion: Generate Update Trigger Script\r\n\tEND;\r\nEND;",
  "placeholders": [
    {
      "name": "DatabaseName",
      "defaultValue": "AdventureWorks2019"
    },
    {
      "name": "SchemaName",
      "defaultValue": "Production"
    },
    {
      "name": "TableName",
      "defaultValue": "Product"
    }
  ]
}