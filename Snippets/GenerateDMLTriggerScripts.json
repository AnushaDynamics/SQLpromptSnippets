{
  "id": "db7e5e56-b0f6-462e-aaf6-919e9a7cbfdf",
  "prefix": "GenerateDMLTriggerScripts",
  "description": "Generate Scripts to Create Triggers for Delete, Insert and Update for a Table",
  "body": "/* =============================================================================================================================================================\r\n-- Server\t\t: LOCAL SERVER\r\n-- Database\t\t: USER Database\r\n-- Script\t\t: Generate DML Trigger for Any Table Mentioned Dynamically - v6\r\n-- Description\t: Generate Scripts to Create Triggers for Delete, Insert and Update for Table(s)\r\n-- Usage\t\t: Exec in the Database where you wanted to Create DML Trigger Statements. Provide Values for @DatabaseName, @SchemaNames, @TableNames.\r\n\t\t\t\t  * Need to Have DBaudit DB to store the Data Modifications as per DML Triggers.\r\n\t\t\t\t  * This Script Generates the DML Trigger Statements (and its pre-requisites as well) for the Table specified.\r\n\t\t\t\t  * Copy the Generated Code and Execute Against Same User Database.\r\n\t\t\t\t  Refer: Snippet \"GetXMLdataFromDataAuditTbl\" to Analyse Data Stored in DataAuditTbl (XMLchange).\r\n============================================================================================================================================================= */\r\nDECLARE --\r\n\t@DatabaseName VARCHAR(256) = '$Database_Name$',\r\n\t@SchemaNames VARCHAR(128) = '$Schema_Names$',--CommaSeparated Values Allowed\r\n\t@TableNames VARCHAR(256) = '$Table_Names$',--CommaSeparated Values Allowed\r\n\t@RequireExclusiveAuditDB BIT = 1, -- 1 = ExclusiveAudit DB will be Created | 0 = Default \"DBaudit\" Database will be Created.\r\n\t@DBprefix VARCHAR(32) = '$Prefix$', --DataAuditTbl will Contain DatabaseName as @DBprefix. If Not Mentioned, it will pick the @DatabaseName\r\n\t--To Include/Exclude Scripts for DataAuditTbl, DeleteTrigger, InsertTrigger, UpdateTrigger.\r\n\t@CreateDataAuditTbl BIT = 1, --DataAuditTbl Script will be Generated. (We can Disable if We already have Audit Tables Created)\r\n\t@IncludeGenaralAudit BIT = 1, -- General Audit Table will be Created and Respective Trigger Statements inside Trigger: 1 = Included (Default) | 0 = Excluded\r\n\t@GenerateDeleteTrigger BIT = 1, -- 1 = Included (Default) | 0 = Excluded\r\n\t@GenerateInsertTrigger BIT = 1, -- 1 = Included (Default) | 0 = Excluded\r\n\t@GenerateUpdateTrigger BIT = 1, -- 1 = Included (Default) | 0 = Excluded\r\n\t@Debug BIT = 1;\t-- 1 = Shows TableColumns InDetail | 0 = Excluded (Default)\r\n--AS\r\n/* ===== ** DO NOT CHANGE CODE BELOW FROM HERE ** =========================================================================================================== */\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tIF REPLACE(@SchemaNames, ' ', '') = '' SET @SchemaNames = NULL;\r\n\tIF REPLACE(@TableNames, ' ', '') = '' SET @TableNames = NULL;\r\n\t--$BeginRegion: Variables Declaration\r\n\tDECLARE @SQLstring AS NVARCHAR(MAX);\r\n\tDECLARE @DataAuditTblName NVARCHAR(256);\r\n\t--\r\n\tDECLARE @TableColumns TABLE\r\n\t(\r\n\t\tColId INT NULL, --ORDINAL_POSITION\r\n\t\tColumnName VARCHAR(256) NULL,\r\n\t\tColumnDataType VARCHAR(64) NULL,\r\n\t\tIsPrimaryKeyCol BIT NULL,\r\n\t\tIsComputedCol BIT NULL,\r\n\t\tIsIdentityCol BIT NULL\r\n\t);\r\n\t--$EndRegion: Variables Declaration\r\n\t--\r\n\t--$BeginRegion: Generate Create Audit Database If Not Exists\r\n\tPRINT N'--$BeginRegion: Create Database \"' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'\" If Not Exists'; --\r\n\tPRINT N'USE master;'; --\r\n\tPRINT N'GO'; --\r\n\tPRINT N'IF NOT EXISTS (SELECT * FROM master.sys.databases WHERE name = ''' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +''')'; --\r\n\tPRINT N'\tEXEC master.sys.sp_executesql N''CREATE DATABASE [' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'];'';'; --\r\n\tPRINT N'GO'; --\r\n\tPRINT N'--$EndRegion: Create Database \"' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'\" If Not Exists';\r\n\tPRINT N'--'+CHAR(10);\r\n\t--$EndRegion: Generate Create Audit Database If Not Exists\r\n\t--\r\n\t--$BeginRegion: Generate Create Generalised DataAuditTbl in Audit Database\r\n\tIF @IncludeGenaralAudit = 1\r\n\tBEGIN\r\n\t\tPRINT N'--$BeginRegion: Create Generalised DataAuditTbl in \"' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'\" Database';\r\n\t\tPRINT N'IF OBJECT_ID(''' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'.dbo.DataAuditTbl'', ''U'') IS NULL';\r\n\t\tPRINT N'\tCREATE TABLE ' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'.dbo.DataAuditTbl';\r\n\t\tPRINT N'\t(';\r\n\t\tPRINT N'\t\tXid INT IDENTITY(1,1), AuditTimeX DATETIME DEFAULT GETDATE(), HostNameX VARCHAR(128), AppNameX VARCHAR(256), LoginUserX VARCHAR(128), SPIDX INT,';\r\n\t\tPRINT N'\t\tDBname VARCHAR(256), SCHname VARCHAR(256), TBLname VARCHAR(256), DML VARCHAR(2), RowsX INT, DMLchange XML';\r\n\t\tPRINT N'\t);';\r\n\t\tPRINT N'GO';\r\n\t\tPRINT N'--$EndRegion: Create Generalised DataAuditTbl in \"' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'\" Database';\r\n\t\tPRINT N'--'+CHAR(10);\r\n\tEND;\r\n\t--$EndRegion: Generate Create Generalised DataAuditTbl in Audit Database\r\n\t--\r\n\t--\r\n\t--$BeginRegion: _TableCursor For Generating DML Triggers for Each Table\r\n\tDECLARE @DBname VARCHAR(256), @SCHname AS VARCHAR(256), @TBLname AS VARCHAR(256);\r\n\tDECLARE _TableCursor CURSOR FOR\r\n\t(\r\n\t\tSELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME\r\n\t\tFROM INFORMATION_SCHEMA.TABLES\r\n\t\tWHERE TABLE_TYPE = 'BASE TABLE'\r\n\t\t\tAND (TABLE_SCHEMA IN (SELECT LTRIM(RTRIM(value)) FROM STRING_SPLIT(@SchemaNames,',')) OR @SchemaNames IS NULL)\r\n\t\t\tAND (TABLE_NAME IN (SELECT LTRIM(RTRIM(value)) FROM STRING_SPLIT(@TableNames,',')) OR @TableNames IS NULL)\r\n\t);\r\n\t--\r\n\tOPEN _TableCursor;\r\n\tFETCH NEXT FROM _TableCursor INTO @DBname, @SCHname, @TBLname;\r\n\tWHILE @@FETCH_STATUS = 0\r\n\tBEGIN\r\n\t\tPRINT N'/* $BeginScript: == DML Triggers Script For Table: [' + @DBname + '].[' + @SCHname + '].[' + @TBLname + '] == */';\r\n\t\t--\r\n\t\t--$BeginRegion: Getting Table Column Details\r\n\t\tDELETE FROM @TableColumns WHERE 1=1;\r\n\t\tINSERT INTO @TableColumns\r\n\t\t(\r\n\t\t\tColId,\r\n\t\t\tColumnName,\r\n\t\t\tColumnDataType,\r\n\t\t\tIsPrimaryKeyCol,\r\n\t\t\tIsComputedCol,\r\n\t\t\tIsIdentityCol\r\n\t\t)\r\n\t\tSELECT DISTINCT\r\n\t\t\tCOL.column_id AS \"ColId\",\r\n\t\t\tCOL.name AS \"ColumnName\",\r\n\t\t\tCASE WHEN ISC.DATA_TYPE IN ('text','xml','image','sql_variant','hierarchyid','geography','geometry') \r\n\t\t\t\t\tTHEN ISC.DATA_TYPE \r\n\t\t\t\tELSE ISC.DATA_TYPE+ISNULL('('+REPLACE(CAST(ISC.CHARACTER_MAXIMUM_LENGTH AS VARCHAR(32)),'-1','max')+N')','') \r\n\t\t\t\tEND AS \"ColumnDataType\",\r\n\t\t\tISNULL(PKC.Is_PK, 0) AS \"IsPrimaryKeyCol?\",\r\n\t\t\tCOL.is_computed AS \"IsComputedCol?\",\r\n\t\t\tCOL.is_identity AS \"IsIdentityCol?\"\r\n\t\tFROM sys.columns AS COL\r\n\t\tINNER JOIN sys.tables AS TBL ON TBL.object_id = COL.object_id\r\n\t\tINNER JOIN sys.schemas AS SCH ON SCH.schema_id = TBL.schema_id\r\n\t\tINNER JOIN INFORMATION_SCHEMA.COLUMNS AS ISC ON ISC.TABLE_SCHEMA = SCH.name AND ISC.TABLE_NAME = TBL.name AND ISC.COLUMN_NAME = COL.name\r\n\t\tLEFT JOIN (\r\n\t\t\t\t\tSELECT IC.object_id, IC.column_id, 1 AS \"Is_PK\"\r\n\t\t\t\t\tFROM sys.index_columns AS IC\r\n\t\t\t\t\tINNER JOIN sys.key_constraints AS KC ON IC.object_id = KC.parent_object_id AND IC.index_id = KC.unique_index_id AND KC.type = 'PK'\r\n\t\t\t\t  ) AS PKC ON PKC.column_id = COL.column_id AND PKC.object_id = COL.object_id\r\n\t\tWHERE SCH.name = @SCHname AND TBL.name = @TBLname\r\n\t\tORDER BY COL.column_id ASC;\r\n\t\t--\r\n\t\tIF @Debug = 1\r\n\t\tBEGIN\r\n\t\t\tSELECT @DBname AS \"DatabaseName\", @SCHname AS \"SchemaName\", @TBLname AS \"TableName\",\r\n\t\t\t\t\tTC.ColId, TC.ColumnName, TC.ColumnDataType, TC.IsPrimaryKeyCol, TC.IsComputedCol, TC.IsIdentityCol\r\n\t\t\tFROM @TableColumns AS TC;\r\n\t\tEND;\r\n\t\t--$EndRegion: Getting Table Column Details\r\n\t\t--\r\n\t\t--$BeginRegion: Setting Audit Table Name\r\n\t\tIF @RequireExclusiveAuditDB = 1\r\n\t\tBEGIN\r\n\t\t    --$BeginRegion: Generate Create Schema in Audit Database If Not Exists\r\n\t\t\tPRINT N'--$BeginRegion: Create Schema \"'+@SCHname+N'\" in \"'+@DatabaseName+'_Audit\" Database If Not Exists';\r\n\t\t\tPRINT N'USE ['+@DatabaseName+'_Audit];';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'IF NOT EXISTS (SELECT * FROM ['+@DatabaseName+'_Audit].sys.schemas WHERE name = N'''+@SCHname+N''')';\r\n\t\t\tPRINT N'\tEXEC ['+@DatabaseName+'_Audit].sys.sp_executesql N''CREATE SCHEMA ['+@SCHname+N'];'';';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'--$EndRegion: Create Schema \"'+@SCHname+N'\" in \"'+@DatabaseName+'_Audit\" Database If Not Exists';\r\n\t\t\tPRINT N'--'+CHAR(10);\r\n\t\t\t--$EndRegion: Generate Create Schema in Audit Database If Not Exists\r\n\t\t\tSET @DataAuditTblName = '['+@DatabaseName+'_Audit'+'].['+@SCHname+'].['+@TBLname+']';\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tIF REPLACE(@DBprefix, ' ', '') = '' OR @DBprefix IS NULL\r\n\t\t\t\tSET @DBprefix = @DBname;\r\n\t\t    SET @DataAuditTblName = '[DBaudit].[dbo].['+@DBprefix+'_'+@SCHname+'_'+@TBLname+'_Audit]';\r\n\t\tEND;\r\n\t\t--$EndRegion: Setting Audit Table Name\r\n\t\t--\r\n\t\t--\r\n\t\tIF @CreateDataAuditTbl = 1\r\n\t\tBEGIN\r\n\t\t\t--$BeginRegion: Generate Create Specific DataAuditTbl in Audit Database\r\n\t\t\tPRINT N'--$BeginRegion: Create Specific DataAuditTbl \"'+@DataAuditTblName+N'\"';\r\n\t\t\tPRINT N'USE [' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'];';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'IF OBJECT_ID('''+@DataAuditTblName+N''', ''U'') IS NOT NULL';\r\n\t\t\tPRINT N'\tDROP TABLE '+@DataAuditTblName+N';';\r\n\t\t\tPRINT N'CREATE TABLE '+@DataAuditTblName;\r\n\t\t\tPRINT N'(';\r\n\t\t\tPRINT N'\tXid INT IDENTITY(1,1), AuditTimeX DATETIME DEFAULT GETDATE(), HostNameX VARCHAR(128), AppNameX VARCHAR(256), LoginUserX VARCHAR(128), SPIDX INT, DML VARCHAR(2),';\r\n\t\t\tSET @SQLstring = N'\t'+STUFF((SELECT ', '+QUOTENAME(ColumnName)+N' '+ColumnDataType FROM @TableColumns ORDER BY ColId ASC FOR XML PATH('')), 1, 2, '');\r\n\t\t\tPRINT @SQLstring;\r\n\t\t\tPRINT N');';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'--$EndRegion: Create Specific DataAuditTbl \"'+@DataAuditTblName+N'\"';\r\n\t\t\tPRINT N'--'+CHAR(10);\r\n\t\t\t--$EndRegion: Generate Create Specific DataAuditTbl in Audit Database\r\n\t\tEND;\r\n\t\t--\r\n\t\t--\r\n\t\tIF @GenerateDeleteTrigger = 1\r\n\t\tBEGIN\r\n\t\t\t--$BeginRegion: Generate Delete Trigger Script\r\n\t\t\tPRINT N'--$BeginRegion: Create Delete Trigger Script';\r\n\t\t\tPRINT N'USE ['+@DBname+N'];';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'IF OBJECT_ID(''['+@SCHname+N'].['+@TBLname+N'_DelX]'', ''TR'') IS NOT NULL';\r\n\t\t\tPRINT N'\tDROP TRIGGER ['+@SCHname+N'].['+@TBLname+N'_DelX];';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'CREATE TRIGGER ['+@SCHname+N'].['+@TBLname+N'_DelX]';\r\n\t\t\tPRINT N'ON ['+@DBname+N'].['+@SCHname+N'].['+@TBLname+N']';\r\n\t\t\tPRINT N'FOR DELETE';\r\n\t\t\tPRINT N'AS';\r\n\t\t\tPRINT N'BEGIN';\r\n\t\t\tPRINT N'\tDECLARE @GETDATE DATETIME = GETDATE();';\r\n\t\t\tSET @SQLstring = N'\tINSERT INTO '+@DataAuditTblName+N'(AuditTimeX, HostNameX, AppNameX, LoginUserX, SPIDX, DML, '+STUFF((SELECT ', '+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColId ASC FOR XML PATH('')), 1, 2, '')+N')';\r\n\t\t\tPRINT @SQLstring;\r\n\t\t\tSET @SQLstring = N'\tSELECT @GETDATE, HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, ''D'', '+STUFF((SELECT ', D.'+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColId ASC FOR XML PATH('')), 1, 2, '');\r\n\t\t\tPRINT @SQLstring;\r\n\t\t\tPRINT N'\tFROM Deleted AS D;';\r\n\t\t\tIF @IncludeGenaralAudit = 1\r\n\t\t\tBEGIN\r\n\t\t\t\tPRINT N'\tINSERT INTO ' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'.dbo.DataAuditTbl(AuditTimeX, HostNameX, AppNameX, LoginUserX, SPIDX, DBName, SCHname, TBLname, DML, RowsX, DMLchange)';\r\n\t\t\t\tPRINT N'\tSELECT @GETDATE, HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, '''+@DBname+''', '''+@SCHname+''', '''+@TBLname+''', ''D'', @@ROWCOUNT, (SELECT * FROM DELETED AS D FOR XML RAW, BINARY BASE64, ROOT(''TableHeader''), ELEMENTS);';\r\n\t\t\tEND;\r\n\t\t\tPRINT N'END;';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'--$EndRegion: Create Delete Trigger Script';\r\n\t\t\tPRINT N'--'+CHAR(10);\r\n\t\t\t--$EndRegion: Generate Delete Trigger Script\t    \r\n\t\tEND;\r\n\t\t--\r\n\t\t--\r\n\t\tIF @GenerateInsertTrigger = 1\r\n\t\tBEGIN\r\n\t\t\t--$BeginRegion: Generate Insert Trigger Script\r\n\t\t\tPRINT N'--$BeginRegion: Create Insert Trigger Script';\r\n\t\t\tPRINT N'USE ['+@DBname+N'];';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'IF OBJECT_ID(''['+@SCHname+N'].['+@TBLname+N'_InsX]'', ''TR'') IS NOT NULL';\r\n\t\t\tPRINT N'\tDROP TRIGGER ['+@SCHname+N'].['+@TBLname+N'_InsX];';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'CREATE TRIGGER ['+@SCHname+N'].['+@TBLname+N'_InsX]';\r\n\t\t\tPRINT N'ON ['+@DBname+N'].['+@SCHname+N'].['+@TBLname+N']';\r\n\t\t\tPRINT N'FOR INSERT';\r\n\t\t\tPRINT N'AS';\r\n\t\t\tPRINT N'BEGIN';\r\n\t\t\tPRINT N'\tDECLARE @GETDATE DATETIME = GETDATE();';\r\n\t\t\tSET @SQLstring = N'\tINSERT INTO '+@DataAuditTblName+N'(AuditTimeX, HostNameX, AppNameX, LoginUserX, SPIDX, DML, '+STUFF((SELECT ', '+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColId ASC FOR XML PATH('')), 1, 2, '')+N')';\r\n\t\t\tPRINT @SQLstring;\r\n\t\t\tSET @SQLstring = N'\tSELECT @GETDATE, HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, ''I'', '+STUFF((SELECT ', I.'+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColId ASC FOR XML PATH('')), 1, 2, '');\r\n\t\t\tPRINT @SQLstring;\r\n\t\t\tPRINT N'\tFROM Inserted AS I;';\r\n\t\t\tIF @IncludeGenaralAudit = 1\r\n\t\t\tBEGIN\r\n\t\t\t\tPRINT N'\tINSERT INTO ' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'.dbo.DataAuditTbl(AuditTimeX, HostNameX, AppNameX, LoginUserX, SPIDX, DBName, SCHname, TBLname, DML, RowsX, DMLchange)';\r\n\t\t\t\tPRINT N'\tSELECT @GETDATE, HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, '''+@DBname+''', '''+@SCHname+''', '''+@TBLname+''', ''I'', @@ROWCOUNT, (SELECT * FROM INSERTED AS I FOR XML RAW, BINARY BASE64, ROOT(''TableHeader''), ELEMENTS);';\r\n\t\t\tEND;\r\n\t\t\tPRINT N'END;';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'--$EndRegion: Create Insert Trigger Script';\r\n\t\t\tPRINT N'--'+CHAR(10);\r\n\t\t\t--$EndRegion: Generate Insert Trigger Script\r\n\t\tEND;\r\n\t\t--\r\n\t\t--\r\n\t\tIF @GenerateUpdateTrigger = 1\r\n\t\tBEGIN\r\n\t\t\t--$BeginRegion: Generate Update Trigger Script\r\n\t\t\tPRINT N'--$BeginRegion: Create Update Trigger Script';\r\n\t\t\tPRINT N'USE ['+@DBname+N'];';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'IF OBJECT_ID(''['+@SCHname+N'].['+@TBLname+N'_UpdX]'', ''TR'') IS NOT NULL';\r\n\t\t\tPRINT N'\tDROP TRIGGER ['+@SCHname+N'].['+@TBLname+N'_UpdX];';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'CREATE TRIGGER ['+@SCHname+N'].['+@TBLname+N'_UpdX]';\r\n\t\t\tPRINT N'ON ['+@DBname+N'].['+@SCHname+N'].['+@TBLname+N']';\r\n\t\t\tPRINT N'FOR UPDATE';\r\n\t\t\tPRINT N'AS';\r\n\t\t\tPRINT N'BEGIN';\r\n\t\t\tPRINT N'\tDECLARE @GETDATE DATETIME = GETDATE();';\r\n\t\t\tSET @SQLstring = N'\tINSERT INTO '+@DataAuditTblName+N'(AuditTimeX, HostNameX, AppNameX, LoginUserX, SPIDX, DML, '+STUFF((SELECT ', '+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColId ASC FOR XML PATH('')), 1, 2, '')+N')';\r\n\t\t\tPRINT @SQLstring;\r\n\t\t\tSET @SQLstring = N'\tSELECT @GETDATE, HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, ''UD'', '+STUFF((SELECT ', D.'+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColId ASC FOR XML PATH('')), 1, 2, '');\r\n\t\t\tPRINT @SQLstring;\r\n\t\t\tPRINT N'\tFROM DELETED AS D;';\r\n\t\t\tIF @IncludeGenaralAudit = 1\r\n\t\t\tBEGIN\r\n\t\t\t\tPRINT N'\tINSERT INTO ' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'.dbo.DataAuditTbl(AuditTimeX, HostNameX, AppNameX, LoginUserX, SPIDX, DBName, SCHname, TBLname, DML, RowsX, DMLchange)';\r\n\t\t\t\tPRINT N'\tSELECT @GETDATE, HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, '''+@DBname+''', '''+@SCHname+''', '''+@TBLname+''', ''UD'', @@ROWCOUNT, (SELECT * FROM DELETED AS D FOR XML RAW, BINARY BASE64, ROOT(''TableHeader''), ELEMENTS);';\r\n\t\t\tEND;\r\n\t\t\tPRINT N'\t--';\r\n\t\t\tSET @SQLstring = N'\tINSERT INTO '+@DataAuditTblName+N'(AuditTimeX, HostNameX, AppNameX, LoginUserX, SPIDX, DML, '+STUFF((SELECT ', '+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColId ASC FOR XML PATH('')), 1, 2, '')+N')';\r\n\t\t\tPRINT @SQLstring;\r\n\t\t\tSET @SQLstring = N'\tSELECT @GETDATE, HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, ''UI'', '+STUFF((SELECT ', I.'+QUOTENAME(ColumnName) FROM @TableColumns ORDER BY ColId ASC FOR XML PATH('')), 1, 2, '');\r\n\t\t\tPRINT @SQLstring;\r\n\t\t\tPRINT N'\tFROM INSERTED AS I;';\r\n\t\t\tIF @IncludeGenaralAudit = 1\r\n\t\t\tBEGIN\r\n\t\t\t\tPRINT N'\tINSERT INTO ' + CASE WHEN @RequireExclusiveAuditDB = 1 THEN @DatabaseName + '_Audit' ELSE 'DBaudit' END +'.dbo.DataAuditTbl(AuditTimeX, HostNameX, AppNameX, LoginUserX, SPIDX, DBName, SCHname, TBLname, DML, RowsX, DMLchange)';\r\n\t\t\t\tPRINT N'\tSELECT @GETDATE, HOST_NAME(), APP_NAME(), SUSER_SNAME(), @@SPID, '''+@DBname+''', '''+@SCHname+''', '''+@TBLname+''', ''UI'', @@ROWCOUNT, (SELECT * FROM INSERTED AS I FOR XML RAW, BINARY BASE64, ROOT(''TableHeader''), ELEMENTS);';\t\t    \r\n\t\t\tEND;\r\n\t\t\tPRINT N'END;';\r\n\t\t\tPRINT N'GO';\r\n\t\t\tPRINT N'--$EndRegion: Create Update Trigger Script';\r\n\t\t\tPRINT N'--'+CHAR(10);\r\n\t\t\t--$EndRegion: Generate Update Trigger Script\r\n\t\tEND;\r\n\t\t--\r\n\t\tPRINT N'/* $EndScript: == DML Triggers Script For Table: [' + @DBname + '].[' + @SCHname + '].[' + @TBLname + '] == */';\r\n\t\tPRINT N'GO'+CHAR(10)+CHAR(10)+CHAR(10);\r\n\t\t--\r\n\t\tFETCH NEXT FROM _TableCursor INTO @DBname, @SCHname, @TBLname;\r\n\tEND;\r\n\t--\r\n\tCLOSE _TableCursor;\r\n\tDEALLOCATE _TableCursor;\r\n\t--$EndRegion: _TableCursor For Generating DML Triggers for Each Table\r\n\t--\r\nEND;",
  "placeholders": [
    {
      "name": "Database_Name",
      "defaultValue": "AdventureWorks2019"
    },
    {
      "name": "Schema_Names",
      "defaultValue": "Production,Sales"
    },
    {
      "name": "Table_Names",
      "defaultValue": "Product,SalesTerritory"
    },
    {
      "name": "Prefix",
      "defaultValue": null
    }
  ]
}
