{
  "id": "3afbc32a-c784-443a-8132-babc53b70f4f",
  "prefix": "GapsAndIslands_FindingOverlappedDateRangeEvents",
  "description": "Finding Overlapped DateRange Events (aka. Islands) and Merging with Different Approaches",
  "body": "/* =================================================================================================================================================================================\r\n-- Database\t\t: User Database\r\n-- Script\t\t: Finding Overlapped DateRange Events (aka. Islands) and Merging with Different Approaches (Gaps And Islands Concept)\r\n-- Description\t: Finding Overlapped DateRange Events (aka. Islands) and Merging of below Scenarios with Event1(E1) and Event2 (E2)\r\n-- Concept\t\t: Islands Concept in SQL Server\r\n----$BeginRegion: Test Events for Demonstrating \"Finding Overlapped DateRange Events\"\r\n\t----Input:: ID, StartTime, EndTime\r\n\t----1\tE1 = 00:00:00.000 to 00:30:00.000 ; E2 = 00:30:01.000 to 02:00:00.000 => 2nd Event Started Just After 1st Event Completed with 1 second Diff -- Finish to Start\r\n\t----2\tE1 = 03:00:00.000 to 05:00:00.000 ; E2 = 04:00:00.000 to 06:00:00.000 => 2nd Event Started While 1st Event is Still in Progress -- Start to Start with Lag -- OverLapped\r\n\t----3\tE1 = 07:00:00.000 to 09:00:00.000 ; E2 = 08:00:00.000 to 09:00:00.000 => 2nd Event Completed Along with 1st Event eventhough 2nd Event Started Later -- Finish to Finish\r\n\t----4\tE1 = 10:00:00.000 to 11:00:00.000 ; E2 = 10:00:00.000 to 12:00:00.000 => 2nd Event Started Along with 1st Event But 2nd Event Completed Later -- Start to Start\r\n\t----5\tE1 = 13:00:00.000 to 16:00:00.000 ; E2 = 14:00:00.000 to 15:00:00.000 => 2nd Event Started After 1st Event and Completed Before 1st Event -- Complete Overlapped Event\r\n\t----6\tE1 = 17:00:00.000 to 18:00:00.000 ; E2 = 19:00:00.000 to 20:00:00.000 => 2nd Event Started with Gap After 1st Event Completed -- Finish to Start with Lag -- No OverLap\r\n----$EndRegion: Test Events for Demonstrating \"Finding Overlapped DateRange Events\"\r\n-- Usage\t\t: Use the Sample Data and Choose an Approach to Get the Required Result Set\r\n\t--Added Section \"Delete Overlapped DateRange Events\" for Events CleanUp in which an Event's StartTime and EndTime Completely lies within Other Event's StartTime and EndTime\r\n\t--Approach #1: This Approach is helpful to Merge DateRange Events with a Custom Gap in Between the Events. (Ex: If Events have gap of 1 Sec | 10 Secs | 1 Hour | 1 Day... etc).\r\n\t--Approach #2: This Approach is Not Customisable as Approach #1 and \"DoesNot Merge the DateRange Events If Events have More Than 1 MilliSec Gap as well\".\r\n\t--Approach #3: This Approach is Similar to Approach #2 But Takes More Time To Get the Same Result Set. (Costly Execution Plan Compared to Approach #2).\r\n\t--Approach #4: This Approach is Combination of Approach #1 and Approach #2 But uses Window Functions (LEAD or LAG) which are Applicable from SQL >= v2012\r\n\t--Conclusion : Approach #1 (or) Approach #2 are best suited for any given DataRanges.\r\n\t--\t\t\t\tAdditionally, Approach #1 Merges DateRanges in the Same Table \"with Custom Global Gap Period\" and It Can Visualises the Output at Each Phase of Process.\r\n\t--**Note     : Add More Events (E3, E4, E5.... so on) in the TestEvents Table (##SampleData) for the Same ID and Check the ResultSet.\r\n\t--If The EventsTable DoesNot have \"ID\" column, Then Mark the Value of ID column to 1 for all the events. (Most StackOverFlow Approaches have this kind of Events without ID).\r\n-- History\t\t:\r\n-- Refer Links\t: https://stackoverflow.com/questions/2561130/merge-overlapping-date-intervals\r\n================================================================================================================================================================================= */\r\nUSE tempdb;\r\nGO\r\n--\r\n--$BeginRegion: ##SampleData Table with Sample Data\r\nIF OBJECT_ID('tempdb..##SampleData', 'U') IS NOT NULL\r\n\tDROP TABLE ##SampleData;\r\nCREATE TABLE ##SampleData (ID INT NULL, StartTime DATETIME NULL, EndTime DATETIME NULL);\r\nINSERT INTO ##SampleData(ID, StartTime, EndTime)\r\nVALUES-- ID, Event #1 (E1), Event #2 (E2)\r\n\t(1, N'2010-01-01 00:00:00.000', N'2010-01-01 00:30:00.000'), (1, N'2010-01-01 00:30:01.000', N'2010-01-01 02:00:00.000'),\r\n\t(2, N'2010-01-01 03:00:00.000', N'2010-01-01 05:00:00.000'), (2, N'2010-01-01 04:00:00.000', N'2010-01-01 06:00:00.000'),\r\n\t(3, N'2010-01-01 07:00:00.000', N'2010-01-01 09:00:00.000'), (3, N'2010-01-01 08:00:00.000', N'2010-01-01 09:00:00.000'),\r\n\t(4, N'2010-01-01 10:00:00.000', N'2010-01-01 11:00:00.000'), (4, N'2010-01-01 10:00:00.000', N'2010-01-01 12:00:00.000'),\r\n\t(5, N'2010-01-01 13:00:00.000', N'2010-01-01 16:00:00.000'), (5, N'2010-01-01 14:00:00.000', N'2010-01-01 15:00:00.000'),\r\n\t(6, N'2010-01-01 17:00:00.000', N'2010-01-01 18:00:00.000'), (6, N'2010-01-01 19:00:00.000', N'2010-01-01 20:00:00.000');\r\n--\r\nSELECT ID, StartTime, EndTime FROM ##SampleData ORDER BY ID ASC, StartTime ASC, EndTime ASC;\r\n--$EndRegion: ##SampleData Table with Sample Data\r\nGO\r\n--\r\n/* ===== ** Delete Overlapped DateRange Events (i.e., Events CleanUp) ** ==================================================================================== */\r\n--$BeginRegion: Method #1\r\nDELETE T1\r\nFROM ##SampleData AS T1\r\nINNER JOIN ##SampleData AS T2 ON T1.ID = T1.ID\r\nWHERE ( T1.StartTime = T2.StartTime AND T1.EndTime < T2.EndTime )\r\n\t  OR ( T1.StartTime > T2.StartTime AND T1.EndTime = T2.EndTime )\r\n\t  OR ( T1.StartTime > T2.StartTime AND T1.EndTime < T2.EndTime );\r\n--$EndRegion: Method #1\r\n--\r\n--$BeginRegion: Method #2\r\nDELETE T2\r\nFROM ##SampleData AS T1\r\nINNER JOIN ##SampleData AS T2 ON T2.ID = T1.ID\r\nWHERE ( T2.StartTime = T1.StartTime AND T2.EndTime < T1.EndTime )\r\n\t  OR ( T2.StartTime > T1.StartTime AND T2.EndTime = T1.EndTime )\r\n\t  OR ( T2.StartTime > T1.StartTime AND T2.EndTime < T1.EndTime );\r\n--$EndRegion: Method #2\r\n--\r\n--$BeginRegion: Method #3 using Window Functions\r\nDECLARE @i INT = 1, @RowCount INT = 0;\r\n--\r\nWHILE (1 = 1) --Infinite Loop Untill All the Complete OverLapped Ranges are Deleted\r\nBEGIN\r\n\tSET @RowCount = 0;\r\n\t--\r\n\t;WITH _CTE\r\n\tAS (\r\n\t\t   SELECT T.ID, T.StartTime, T.EndTime,\r\n\t\t\t\t  LAG(T.StartTime, 1) OVER (PARTITION BY T.ID ORDER BY T.StartTime ASC, T.EndTime DESC) AS \"PreviousStartTime\",\r\n\t\t\t\t  LAG(T.EndTime, 1) OVER (PARTITION BY T.ID ORDER BY T.StartTime ASC, T.EndTime DESC) AS \"PreviousEndTime\"\r\n\t\t   FROM ##SampleData AS T\r\n\t   )\r\n\tDELETE FROM _CTE\r\n\tWHERE _CTE.StartTime >= _CTE.PreviousStartTime AND _CTE.EndTime <= _CTE.PreviousEndTime;\r\n\t--\r\n\tSET @RowCount = @RowCount + @@ROWCOUNT;\r\n\t--\r\n\tIF @RowCount = 0 BREAK; --Exiting Loop\r\n\t--\r\n\tSET @i = @i + 1;\r\nEND;\r\n--$EndRegion: Method #3 using Window Functions\r\nGO\r\n--\r\n/* ===== ** Approach #1 ** ================================================================================================================================== */\r\n--$BeginRegion: Approach #1\r\n--\r\n--$BeginRegion: Phase #0 - Raw Data Input:: ID, StartTime, EndTime\r\n----1\tE1 = 00:00:00.000 to 00:30:00.000 ; E2 = 00:30:01.000 to 02:00:00.000\r\n----2\tE1 = 03:00:00.000 to 05:00:00.000 ; E2 = 04:00:00.000 to 06:00:00.000\r\n----3\tE1 = 07:00:00.000 to 09:00:00.000 ; E2 = 08:00:00.000 to 09:00:00.000\r\n----4\tE1 = 10:00:00.000 to 11:00:00.000 ; E2 = 10:00:00.000 to 12:00:00.000\r\n----5\tE1 = 13:00:00.000 to 16:00:00.000 ; E2 = 14:00:00.000 to 15:00:00.000\r\n----6\tE1 = 17:00:00.000 to 18:00:00.000 ; E2 = 19:00:00.000 to 20:00:00.000\r\n--$EndRegion: Phase #0 - Raw Data Input:: ID, StartTime, EndTime\r\n--\r\nDECLARE @i INT = 1, @RowCount INT = 0;\r\n--\r\nWHILE(1 = 1) --Infinite Loop Untill All the Ranges are Sorted and Merged Accordingly\r\nBEGIN\r\n\tSET @RowCount = 0;\r\n\t--\r\n\t--$BeginRegion: Phase #1 - Updating E1's EndTime with VeryNext Event E2's EndTime\r\n\tUPDATE T1\r\n\tSET T1.EndTime = T2.EndTime\r\n\tOUTPUT 'Loop #' + CAST(@i AS VARCHAR(4)) + ' - Phase #1' AS \"Phase\", Deleted.ID, Deleted.StartTime, Deleted.EndTime, '|' AS \"O\", Inserted.ID, Inserted.StartTime, Inserted.EndTime\r\n\tFROM ##SampleData AS T1\r\n\tINNER JOIN ##SampleData AS T2 ON T2.ID = T1.ID\r\n\tWHERE DATEADD(SECOND/*This can be Adjusted like MINUTE, HOUR, DAY..etc as Required*/, 1/*This can be Adjusted like 1, 10, 15..etc as Required*/, T1.EndTime) BETWEEN T2.StartTime AND T2.EndTime;\r\n\t--\r\n\tSET @RowCount = @RowCount + @@ROWCOUNT;\r\n\t--$EndRegion: Phase #1 - Updating E1's EndTime with VeryNext Event E2's EndTime\r\n\t--\r\n\t--$BeginRegion: Phase #1 ResultSet:: ID, StartTime, EndTime\r\n\t----1\tE1 = 00:00:00:000 to 02:00:00:000 ; E2 = 00:30:01:000 to 02:00:00:000\r\n\t----2\tE1 = 03:00:00:000 to 06:00:00:000 ; E2 = 04:00:00:000 to 06:00:00:000\r\n\t----3\tE1 = 07:00:00:000 to 09:00:00:000 ; E2 = 08:00:00:000 to 09:00:00:000\r\n\t----4\tE1 = 10:00:00:000 to 12:00:00:000 ; E2 = 10:00:00:000 to 12:00:00:000\r\n\t----5\tE1 = 13:00:00:000 to 16:00:00:000 ; E2 = 14:00:00:000 to 16:00:00:000\r\n\t----6\tE1 = 17:00:00:000 to 18:00:00:000 ; E2 = 19:00:00:000 to 20:00:00:000\r\n\t--$EndRegion: Phase #1 ResultSet:: ID, StartTime, EndTime\r\n\t--\r\n\t--$BeginRegion: Phase #2 - Deleting Overlapped Events If E1's EndTime = E2's EndTime and E2's StartTime > E1's StartTime\r\n\tDELETE T1\r\n\tOUTPUT 'Loop #' + CAST(@i AS VARCHAR(4)) + ' - Phase #2' AS \"Phase\", Deleted.ID, Deleted.StartTime, Deleted.EndTime\r\n\tFROM ##SampleData AS T1\r\n\tINNER JOIN ##SampleData AS T2 ON T2.ID = T1.ID\r\n\tWHERE T2.EndTime = T1.EndTime AND T2.StartTime < T1.StartTime;\r\n\t--\r\n\tSET @RowCount = @RowCount + @@ROWCOUNT;\r\n\t--$EndRegion: Phase #2 - Deleting Overlapped Events If E1's EndTime = E2's EndTime and E2's StartTime > E1's StartTime\r\n\t--\r\n\t--$BeginRegion: Phase #2 ResultSet:: ID, StartTime, EndTime\r\n\t----1\tE1 = 00:00:00:000 to 02:00:00:000 ;\r\n\t----2\tE1 = 03:00:00:000 to 06:00:00:000 ;\r\n\t----3\tE1 = 07:00:00:000 to 09:00:00:000 ;\r\n\t----4\tE1 = 10:00:00:000 to 12:00:00:000 ; E2 = 10:00:00:000 to 12:00:00:000\r\n\t----5\tE1 = 13:00:00:000 to 16:00:00:000 ;\r\n\t----6\tE1 = 17:00:00:000 to 18:00:00:000 ; E2 = 19:00:00:000 to 20:00:00:000\r\n\t--$EndRegion: Phase #2 ResultSet:: ID, StartTime, EndTime\r\n\t--\r\n\t--$BeginRegion: Phase #3 - Deleting Full Duplicate Records w.r.to ID, StartTime, EndTime\r\n\t;WITH _GetDups AS --\r\n\t\t(SELECT ID, StartTime, EndTime, ROW_NUMBER() OVER (PARTITION BY ID, StartTime, EndTime ORDER BY ID ASC, StartTime ASC, EndTime ASC) AS \"DupRN\" FROM ##SampleData)\r\n\tDELETE _GetDups\r\n\tOUTPUT 'Loop #' + CAST(@i AS VARCHAR(4)) + ' - Phase #3' AS \"Phase\", Deleted.ID, Deleted.StartTime, Deleted.EndTime, Deleted.DupRN\r\n\tFROM _GetDups\r\n\tWHERE _GetDups.DupRN > 1;\r\n\t--\r\n\tSET @RowCount = @RowCount + @@ROWCOUNT;\r\n\t--$EndRegion: Phase #3 - Deleting Full Duplicate Records w.r.to ID, StartTime, EndTime\r\n\t--\r\n\t--$BeginRegion: Phase #3 ResultSet:: ID, StartTime, EndTime\r\n\t----1\tE1 = 00:00:00:000 to 02:00:00:000 ;\r\n\t----2\tE1 = 03:00:00:000 to 06:00:00:000 ;\r\n\t----3\tE1 = 07:00:00:000 to 09:00:00:000 ;\r\n\t----4\tE1 = 10:00:00:000 to 12:00:00:000 ;\r\n\t----5\tE1 = 13:00:00:000 to 16:00:00:000 ;\r\n\t----6\tE1 = 17:00:00:000 to 18:00:00:000 ; E2 = 19:00:00:000 to 20:00:00:000\r\n\t--$EndRegion: Phase #3 ResultSet:: ID, StartTime, EndTime\r\n\t--\r\n\tIF @RowCount = 0\r\n\t\tBREAK; --Exiting Loop\r\n\t--\r\n\tSET @i = @i + 1;\r\nEND;\r\n--\r\nSELECT ID, StartTime AS \"IslandStartTime\", EndTime AS \"IslandEndTime\"\r\nFROM ##SampleData\r\nORDER BY ID ASC, StartTime ASC, EndTime ASC;\r\n--\r\n--$BeginRegion: ResultSet:: ID, StartTime, EndTime\r\n----1\tE1 = 00:00:00.000 to 02:00:00.000 ;\r\n----2\tE1 = 03:00:00:000 to 06:00:00:000 ;\r\n----3\tE1 = 07:00:00:000 to 09:00:00:000 ;\r\n----4\tE1 = 10:00:00:000 to 12:00:00:000 ;\r\n----5\tE1 = 13:00:00:000 to 16:00:00:000 ;\r\n----6\tE1 = 17:00:00:000 to 18:00:00:000 ; E2 = 19:00:00:000 to 20:00:00:000\r\n--$EndRegion: ResultSet:: ID, StartTime, EndTime\r\n--\r\n--$EndRegion: Approach #1\r\nGO\r\n--\r\n/* ===== ** Approach #2 ** ================================================================================================================================== */\r\n--$BeginRegion: Approach #2\r\n--\r\n--$BeginRegion: Raw Data Input:: ID, StartTime, EndTime\r\n----1\tE1 = 00:00:00.000 to 00:30:00.000 ; E2 = 00:30:01.000 to 02:00:00.000\r\n----2\tE1 = 03:00:00.000 to 05:00:00.000 ; E2 = 04:00:00.000 to 06:00:00.000\r\n----3\tE1 = 07:00:00.000 to 09:00:00.000 ; E2 = 08:00:00.000 to 09:00:00.000\r\n----4\tE1 = 10:00:00.000 to 11:00:00.000 ; E2 = 10:00:00.000 to 12:00:00.000\r\n----5\tE1 = 13:00:00.000 to 16:00:00.000 ; E2 = 14:00:00.000 to 15:00:00.000\r\n----6\tE1 = 17:00:00.000 to 18:00:00.000 ; E2 = 19:00:00.000 to 20:00:00.000\r\n--$EndRegion: Raw Data Input:: ID, StartTime, EndTime\r\n--\r\nSELECT T1.ID,\r\n\t   T1.StartTime AS \"IslandStartTime\",\r\n\t   MIN(T2.EndTime) AS \"IslandEndTime\"\r\nFROM ##SampleData AS T1\r\nINNER JOIN ##SampleData AS T2\r\n\tON T2.ID = T1.ID\r\n\t   AND T2.EndTime >= T1.StartTime\r\n\t   AND NOT EXISTS (\r\n\t\t\t\t\t\t  SELECT *\r\n\t\t\t\t\t\t  FROM ##SampleData AS T3\r\n\t\t\t\t\t\t  WHERE T3.ID = T2.ID\r\n\t\t\t\t\t\t\t\tAND T3.StartTime <= T2.EndTime\r\n\t\t\t\t\t\t\t\tAND T3.EndTime > T2.EndTime\r\n\t\t\t\t\t  )\r\nWHERE NOT EXISTS (\r\n\t\t\t\t\t SELECT *\r\n\t\t\t\t\t FROM ##SampleData AS T4\r\n\t\t\t\t\t WHERE T4.ID = T1.ID\r\n\t\t\t\t\t\t   AND T4.StartTime < T1.StartTime\r\n\t\t\t\t\t\t   AND T4.EndTime >= T1.StartTime\r\n\t\t\t\t )\r\nGROUP BY T1.ID, T1.StartTime\r\nORDER BY T1.ID ASC, IslandStartTime ASC, IslandEndTime ASC;\r\n--\r\n--$BeginRegion: ResultSet:: ID, StartTime, EndTime\r\n----1\tE1 = 00:00:00.000 to 00:30:00.000 ; E2 = 00:30:01.000 to 02:00:00.000\r\n----2\tE1 = 03:00:00:000 to 06:00:00:000 ;\r\n----3\tE1 = 07:00:00:000 to 09:00:00:000 ;\r\n----4\tE1 = 10:00:00:000 to 12:00:00:000 ;\r\n----5\tE1 = 13:00:00:000 to 16:00:00:000 ;\r\n----6\tE1 = 17:00:00:000 to 18:00:00:000 ; E2 = 19:00:00:000 to 20:00:00:000\r\n--$EndRegion: ResultSet:: ID, StartTime, EndTime\r\n--\r\n--$EndRegion: Approach #2\r\nGO\r\n--\r\n/* ===== ** Approach #3 ** ================================================================================================================================== */\r\n--$BeginRegion: Approach #3\r\n--\r\n--$BeginRegion: Raw Data Input:: ID, StartTime, EndTime\r\n----1\tE1 = 00:00:00.000 to 00:30:00.000 ; E2 = 00:30:01.000 to 02:00:00.000\r\n----2\tE1 = 03:00:00.000 to 05:00:00.000 ; E2 = 04:00:00.000 to 06:00:00.000\r\n----3\tE1 = 07:00:00.000 to 09:00:00.000 ; E2 = 08:00:00.000 to 09:00:00.000\r\n----4\tE1 = 10:00:00.000 to 11:00:00.000 ; E2 = 10:00:00.000 to 12:00:00.000\r\n----5\tE1 = 13:00:00.000 to 16:00:00.000 ; E2 = 14:00:00.000 to 15:00:00.000\r\n----6\tE1 = 17:00:00.000 to 18:00:00.000 ; E2 = 19:00:00.000 to 20:00:00.000\r\n--$EndRegion: Raw Data Input:: ID, StartTime, EndTime\r\n--\r\nSELECT DISTINCT ST.ID,\r\n\t\t\t\tST.StartTime AS \"IslandStartTime\",\r\n\t\t\t\tET.EndTime AS \"IslandEndTime\"\r\nFROM (\r\n\t\t SELECT T1.ID, T1.StartTime\r\n\t\t FROM ##SampleData AS T1\r\n\t\t LEFT OUTER JOIN ##SampleData AS T2\r\n\t\t\t ON T2.ID = T1.ID AND T2.StartTime < T1.StartTime AND T2.EndTime >= T1.StartTime\r\n\t\t WHERE T2.StartTime IS NULL\r\n\t ) AS ST\r\nINNER JOIN (\r\n\t\t\t   SELECT T3.ID, T3.EndTime\r\n\t\t\t   FROM ##SampleData AS T3\r\n\t\t\t   LEFT OUTER JOIN ##SampleData AS T4\r\n\t\t\t\t   ON T4.ID = T3.ID AND T4.EndTime > T3.EndTime AND T4.StartTime <= T3.EndTime\r\n\t\t\t   WHERE T4.StartTime IS NULL\r\n\t\t   ) AS ET\r\n\tON ET.ID = ST.ID AND ET.EndTime > ST.StartTime\r\nLEFT OUTER JOIN (\r\n\t\t\t\t\tSELECT T5.ID, T5.EndTime\r\n\t\t\t\t\tFROM ##SampleData AS T5\r\n\t\t\t\t\tLEFT OUTER JOIN ##SampleData AS T6\r\n\t\t\t\t\t\tON T6.ID = T5.ID AND T6.EndTime > T5.EndTime AND T6.StartTime <= T5.EndTime\r\n\t\t\t\t\tWHERE T6.StartTime IS NULL\r\n\t\t\t\t) AS ET2\r\n\tON ET2.ID = ET.ID AND ET2.EndTime > ST.StartTime AND ET2.EndTime < ET.EndTime\r\nWHERE ET2.EndTime IS NULL\r\nORDER BY ST.ID ASC, ST.StartTime ASC, ET.EndTime ASC;\r\n--\r\n--$BeginRegion: ResultSet:: ID, StartTime, EndTime\r\n----1\tE1 = 00:00:00.000 to 00:30:00.000 ; E2 = 00:30:01.000 to 02:00:00.000\r\n----2\tE1 = 03:00:00:000 to 06:00:00:000 ;\r\n----3\tE1 = 07:00:00:000 to 09:00:00:000 ;\r\n----4\tE1 = 10:00:00:000 to 12:00:00:000 ;\r\n----5\tE1 = 13:00:00:000 to 16:00:00:000 ;\r\n----6\tE1 = 17:00:00:000 to 18:00:00:000 ; E2 = 19:00:00:000 to 20:00:00:000\r\n--$EndRegion: ResultSet:: ID, StartTime, EndTime\r\n--\r\n--$EndRegion: Approach #3\r\nGO\r\n--\r\n/* ===== ** Approach #4 ** ================================================================================================================================== */\r\n--$BeginRegion: Approach #4\r\n--\r\n--$BeginRegion: Raw Data Input:: ID, StartTime, EndTime\r\n----1\tE1 = 00:00:00.000 to 00:30:00.000 ; E2 = 00:30:01.000 to 02:00:00.000\r\n----2\tE1 = 03:00:00.000 to 05:00:00.000 ; E2 = 04:00:00.000 to 06:00:00.000\r\n----3\tE1 = 07:00:00.000 to 09:00:00.000 ; E2 = 08:00:00.000 to 09:00:00.000\r\n----4\tE1 = 10:00:00.000 to 11:00:00.000 ; E2 = 10:00:00.000 to 12:00:00.000\r\n----5\tE1 = 13:00:00.000 to 16:00:00.000 ; E2 = 14:00:00.000 to 15:00:00.000\r\n----6\tE1 = 17:00:00.000 to 18:00:00.000 ; E2 = 19:00:00.000 to 20:00:00.000\r\n--$EndRegion: Raw Data Input:: ID, StartTime, EndTime\r\n--\r\nDECLARE @i INT = 1, @RowCount INT = 0;\r\n--\r\nWHILE (1 = 1) --Infinite Loop Untill All the Complete OverLapped Ranges are Deleted\r\nBEGIN\r\n\tSET @RowCount = 0;\r\n\t--\r\n\t;WITH _CTE\r\n\tAS (\r\n\t\t   SELECT T.ID, T.StartTime, T.EndTime,\r\n\t\t\t\t  LAG(T.StartTime, 1) OVER (PARTITION BY T.ID ORDER BY T.StartTime ASC, T.EndTime DESC) AS \"PreviousStartTime\",\r\n\t\t\t\t  LAG(T.EndTime, 1) OVER (PARTITION BY T.ID ORDER BY T.StartTime ASC, T.EndTime DESC) AS \"PreviousEndTime\"\r\n\t\t   FROM ##SampleData AS T\r\n\t   )\r\n\tDELETE FROM _CTE\r\n\tWHERE _CTE.StartTime >= _CTE.PreviousStartTime AND _CTE.EndTime <= _CTE.PreviousEndTime;\r\n\t--\r\n\tSET @RowCount = @RowCount + @@ROWCOUNT;\r\n\t--\r\n\tIF @RowCount = 0 --As All OverLapped Events are Deleted; >> Partial OverLapped Events are Being Processed\r\n\tBEGIN\r\n\t\t--$BeginRegion: Merge OverLapped Events Except Completely Overlapped Events\r\n\t\tSELECT IL.ID,\r\n\t\t\t   MIN(IL.StartTime) AS \"IslandStartTime\",\r\n\t\t\t   MAX(IL.EndTime) AS \"IslandEndTime\"\r\n\t\tFROM (\r\n\t\t\t\t SELECT GP.ID, GP.StartTime, GP.EndTime, GP.RN, GP.PreviousEndTime,\r\n\t\t\t\t\t\tSUM(CASE WHEN GP.PreviousEndTime >= GP.StartTime THEN 0 ELSE 1 END) OVER (PARTITION BY GP.ID ORDER BY GP.RN ASC) AS \"ILid\"\r\n\t\t\t\t FROM (\r\n\t\t\t\t\t\t  SELECT T.ID, T.StartTime, T.EndTime,\r\n\t\t\t\t\t\t\t\t ROW_NUMBER() OVER (PARTITION BY T.ID ORDER BY T.StartTime ASC, T.EndTime ASC) AS \"RN\",\r\n\t\t\t\t\t\t\t\t LAG(T.EndTime, 1) OVER (PARTITION BY T.ID ORDER BY T.StartTime ASC, T.EndTime ASC) AS \"PreviousEndTime\"\r\n\t\t\t\t\t\t  FROM ##SampleData AS T\r\n\t\t\t\t\t  ) AS GP --Groups\r\n\t\t\t ) AS IL --Islands\r\n\t\tGROUP BY IL.ID, IL.ILid\r\n\t\tORDER BY IL.ID ASC, IslandStartTime ASC, IslandEndTime ASC;\r\n\t\t--$EndRegion: Merge OverLapped Events Except Completely Overlapped Events\r\n\t\t--\r\n\t\tBREAK; --Exiting Loop\r\n\tEND;\r\n\t--\r\n\tSET @i = @i + 1;\r\nEND;\r\n--\r\n--$BeginRegion: ResultSet:: ID, StartTime, EndTime\r\n----1\tE1 = 00:00:00.000 to 00:30:00.000 ; E2 = 00:30:01.000 to 02:00:00.000\r\n----2\tE1 = 03:00:00:000 to 06:00:00:000 ;\r\n----3\tE1 = 07:00:00:000 to 09:00:00:000 ;\r\n----4\tE1 = 10:00:00:000 to 12:00:00:000 ;\r\n----5\tE1 = 13:00:00:000 to 16:00:00:000 ;\r\n----6\tE1 = 17:00:00:000 to 18:00:00:000 ; E2 = 19:00:00:000 to 20:00:00:000\r\n--$EndRegion: ResultSet:: ID, StartTime, EndTime\r\n--\r\n--$EndRegion: Approach #4"
}