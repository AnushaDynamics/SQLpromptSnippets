{
  "id": "b1510050-f758-4988-be4f-e423bbbf1a13",
  "prefix": "SampleDataGeneration",
  "description": "Generate Sample Data for Department, Project and Employee Tables",
  "body": "/* =====================================================================================================================\r\n-- Script:\tGenerate Sample Data for Department, Project and Employee Tables\r\n-- Description:\r\n--\t\t\t1st: Create Department Table with (Random) Department Names\r\n--\t\t\t2nd: Create Project Table with (Random) Project Data\r\n--\t\t\t3rd: Create Random Employee Data based on the Department Data and Project Data\r\n-- Versions: Supports All Versions above 2005.\r\n===================================================================================================================== */\r\nSET NOCOUNT ON;\r\n\r\n--$BeginRegion: Drop Tables If Exists\r\nIF OBJECT_ID('dbo.EmployeeTbl', 'U') IS NOT NULL\r\n\tDROP TABLE dbo.EmployeeTbl; --Level-2\r\n\r\nIF OBJECT_ID('dbo.DepartmentTbl', 'U') IS NOT NULL\r\n\tDROP TABLE dbo.DepartmentTbl; --Level-1\r\n\r\nIF OBJECT_ID('dbo.ProjectTbl', 'U') IS NOT NULL\r\n\tDROP TABLE dbo.ProjectTbl; --Level-1\r\n--$EndRegion: Drop Tables If Exists\r\n\r\n--\r\n--$BeginRegion: Creating Department Table and Populating Test Data\r\nIF OBJECT_ID('dbo.DepartmentTbl', 'U') IS NULL\r\n\tBEGIN\r\n\t\tCREATE TABLE dbo.DepartmentTbl\r\n\t\t(\r\n\t\t\tDeptID INT IDENTITY(1, 1) NOT NULL,\r\n\t\t\tDeptName VARCHAR(256) NOT NULL,\r\n\t\t\tCreatedOn DATETIME NOT NULL,\r\n\t\t\tLastModifiedOn DATETIME NOT NULL\r\n\t\t) ON [PRIMARY];\r\n\r\n\t\t-- Adding Primary Key Constraint on \"DeptID\"\r\n\t\tALTER TABLE dbo.DepartmentTbl\r\n\t\tADD CONSTRAINT PK_DeptID\r\n\t\t\tPRIMARY KEY CLUSTERED (DeptID);\r\n\tEND;\r\nELSE\r\n\tBEGIN\r\n\t\tDELETE FROM dbo.DepartmentTbl\r\n\t\tWHERE 1 = 1;\r\n\r\n\t\tDBCC CHECKIDENT('DepartmentTbl', RESEED, 0);\r\n\tEND;\r\n\r\n--\r\nINSERT INTO dbo.DepartmentTbl\r\n\t(\r\n\t\tDeptName,\r\n\t\tCreatedOn,\r\n\t\tLastModifiedOn\r\n\t)\r\nVALUES\r\n\t('INFRA Team', GETDATE(), GETDATE()),\r\n\t('OS Team', GETDATE(), GETDATE()),\r\n\t('DEV Team', GETDATE(), GETDATE()),\r\n\t('DB Team', GETDATE(), GETDATE()),\r\n\t('QA Team', GETDATE(), GETDATE()),\r\n\t('APP Team', GETDATE(), GETDATE()),\r\n\t('LIC Team', GETDATE(), GETDATE()),\r\n\t('CS Team', GETDATE(), GETDATE());\r\n\r\n--$EndRegion: Creating Department Table and Populating Test Data\r\n--\r\n--\r\n--$BeginRegion: Creating Project Table and Populating Test Data\r\nIF OBJECT_ID('dbo.ProjectTbl', 'U') IS NULL\r\n\tBEGIN\r\n\t\tCREATE TABLE dbo.ProjectTbl\r\n\t\t(\r\n\t\t\tProjID INT IDENTITY(1, 1) NOT NULL,\r\n\t\t\tProjName VARCHAR(256) NOT NULL,\r\n\t\t\tCreatedOn DATETIME NOT NULL,\r\n\t\t\tLastModifiedOn DATETIME NOT NULL\r\n\t\t) ON [PRIMARY];\r\n\r\n\t\t-- Adding Primary Key Constraint on \"ProjID\"\r\n\t\tALTER TABLE dbo.ProjectTbl\r\n\t\tADD CONSTRAINT PK_ProjID\r\n\t\t\tPRIMARY KEY CLUSTERED (ProjID);\r\n\tEND;\r\nELSE\r\n\tBEGIN\r\n\t\tDELETE FROM dbo.ProjectTbl\r\n\t\tWHERE 1 = 1;\r\n\r\n\t\tDBCC CHECKIDENT('ProjectTbl', RESEED, 0);\r\n\tEND;\r\n\r\n--\r\nINSERT INTO dbo.ProjectTbl\r\n\t(\r\n\t\tProjName,\r\n\t\tCreatedOn,\r\n\t\tLastModifiedOn\r\n\t)\r\nVALUES\r\n\t('P1 - Project A', GETDATE(), GETDATE()),\r\n\t('P2 - Project B', GETDATE(), GETDATE()),\r\n\t('P3 - Project C', GETDATE(), GETDATE()),\r\n\t('P4 - Project D', GETDATE(), GETDATE());\r\n\r\n--$EndRegion: Creating Project Table and Populating Test Data\r\n--\r\n--\r\n--$BeginRegion: Creating Employee Table\r\nIF OBJECT_ID('dbo.EmployeeTbl', 'U') IS NULL\r\n\tBEGIN\r\n\t\tCREATE TABLE dbo.EmployeeTbl\r\n\t\t(\r\n\t\t\tEmpID INT IDENTITY(1, 1) NOT NULL,\r\n\t\t\tEmpName VARCHAR(256) NOT NULL,\r\n\t\t\tEmpDOB DATE NOT NULL,\r\n\t\t\tEmpDOJ DATE NOT NULL,\r\n\t\t\tEmpSalary MONEY NOT NULL,\r\n\t\t\tDeptID INT NOT NULL,\r\n\t\t\tProjID INT NOT NULL,\r\n\t\t\tStatus BIT NULL DEFAULT (1),\r\n\t\t\tCreatedOn DATETIME NOT NULL,\r\n\t\t\tLastModifiedOn DATETIME NOT NULL\r\n\t\t);\r\n\r\n\t\t-- Adding Primary Key Constraint on \"EmpID\"\r\n\t\tALTER TABLE dbo.EmployeeTbl\r\n\t\tADD CONSTRAINT PK_EmpID\r\n\t\t\tPRIMARY KEY CLUSTERED (EmpID);\r\n\tEND;\r\nELSE\r\n\tBEGIN\r\n\t\tDELETE FROM dbo.EmployeeTbl\r\n\t\tWHERE 1 = 1;\r\n\r\n\t\tDBCC CHECKIDENT('EmployeeTbl', RESEED, 0);\r\n\tEND;\r\n\r\n--\r\nIF OBJECT_ID('[EmployeeTbl.DeptID=DepartmentTbl.DeptID]', 'F') IS NULL\r\n\tBEGIN\r\n\t\tALTER TABLE dbo.EmployeeTbl WITH CHECK\r\n\t\tADD CONSTRAINT [EmployeeTbl.DeptID=DepartmentTbl.DeptID]\r\n\t\t\tFOREIGN KEY (DeptID)\r\n\t\t\tREFERENCES dbo.DepartmentTbl (DeptID) ON UPDATE CASCADE ON DELETE CASCADE;\r\n\tEND;\r\n\r\nIF OBJECT_ID('[EmployeeTbl.ProjID=ProjectTbl.ProjID]', 'F') IS NULL\r\n\tBEGIN\r\n\t\tALTER TABLE dbo.EmployeeTbl WITH CHECK\r\n\t\tADD CONSTRAINT [EmployeeTbl.ProjID=ProjectTbl.ProjID]\r\n\t\t\tFOREIGN KEY (ProjID)\r\n\t\t\tREFERENCES dbo.ProjectTbl (ProjID) ON UPDATE CASCADE ON DELETE CASCADE;\r\n\tEND;\r\n\r\n--$EndRegion: Creating Employee Table\r\n--\r\n--\r\nDECLARE @MinDeptID INT, @MaxDeptID INT,\r\n\t\t@MinProjID INT, @MaxProjID INT;\r\n\r\nSELECT @MinDeptID = MIN(DeptID), @MaxDeptID = MAX(DeptID)\r\nFROM dbo.DepartmentTbl;\r\n\r\nSELECT @MinProjID = MIN(ProjID), @MaxProjID = MAX(ProjID)\r\nFROM dbo.ProjectTbl;\r\n\r\nSELECT @MinDeptID,@MaxDeptID,@MinProjID,@MaxProjID;\r\n--\r\n--$BeginRegion: Dynamically Defining DOB Range\r\nDECLARE @FromDOB DATE, @ToDOB DATE;\r\n/*\r\nSELECT @FromDOB = DATEADD(DAY, 1, EOMONTH(DATEADD(YEAR, -60, GETDATE()))),\r\n\t   @ToDOB = EOMONTH(DATEADD(YEAR, -30, GETDATE()));\r\n*/\r\nSELECT @FromDOB = CAST(DATEADD(MONTH, DATEDIFF(MONTH, 0, DATEADD(YEAR, -60, GETDATE())) + 1, 0) AS DATE),\r\n\t   @ToDOB = CAST(DATEADD(SECOND, -1, DATEADD(MONTH, DATEDIFF(MONTH, 0, DATEADD(YEAR, -30, GETDATE())) + 1, 0)) AS DATE);\r\n--$EndRegion: Dynamically Defining DOB Range\r\n\r\n--\r\n--$BeginRegion: Populating EmployeeTable with Random Data\r\nDECLARE --\r\n\t@RandNamesSet1 VARCHAR(1024) /*A to D*/ = 'Abbas,Adams,Alan,Alex,Alice,Amy,Andy,Annik,Bacon,Baker,Baris,Barry,Ben,Berg,Berge,Berry,Betsy,Bjorn,Bob,Brian,Brown,Bryan,Bueno,Candy,Cao,Carol,Caron,Chad,Chai,Chen,Chris,Ciccu,Cook,Dan,David,Diane,Diaz,Don,Doris,Duffy,Dusza,Dyck,Dylan',\r\n\t@RandNamesSet2 VARCHAR(1024) /*E to H*/ = 'Earls,Eaton,Ebru,Ed,Entin,Eric,Erin,Ersan,Evans,Fadi,Feng,Flood,Ford,Frank,Fred,Frum,Gabe,Gail,Gary,Gigi,Glimp,Gode,Grant,Greg,Guy,Hall,Hao,Hay,Hazem,Hee,Hesse,Higa,Hill,Hines,Hite,Homer',\r\n\t@RandNamesSet3 VARCHAR(1024) /*I to L*/ = 'Ingle,Ito,Ivo,Jack,Jae,James,Jan,Janet,Jason,Jay,Jean,Jeff,Jiang,Jill,Jim,Jimmy,Jo,John,Jose,Jose,Jun,Kahn,Kane,Karan,Karen,Katie,Keil,Ken,Kevin,Kim,King,Kirk,Kitti,Koch,Kogan,Krebs,Kuppa,LaMee,Lane,Laura,Lee,Li,Linda,Liu,Lloyd,Loh,Lolan,Lori,Lugo,Lynn',\r\n\t@RandNamesSet4 VARCHAR(1024) /*M to P*/ = 'Male,Marc,Mares,Mark,Mary,McKay,Merav,Mike,Min,Mindy,Mohan,Mu,Myer,Nancy,Nay,Netz,Nitin,Nuan,Ogisu,Ortiz,Osada,Pake,Pat,Patel,Paul,Paula,Peng,Penor,Pete,Peter,Pilar,Poe',\r\n\t@RandNamesSet5 VARCHAR(1024) /*Q to T*/ = 'Ralls,Randy,Rao,Ray,Reed,Rob,Ruth,Ryan,Sam,Scott,Sean,Shane,Shoop,Shu,Simon,Singh,Smith,Song,Sousa,Spoon,Stahl,Steve,Susan,Syed,Terri,Terry,Tete,Tiedt,Ting,Tom,Tomic,Tsvi',\r\n\t@RandNamesSet6 VARCHAR(1024) /*U to Z*/ = 'Uday,Uddin,Umer,Vamsi,Van,Vanha,Vidur,Vong,Wang,Wangdu,Wedge,Wendy,Wood,Word,Wu,Young,Yu,Zahir,Zheng,Zhum,Zuber';\r\nDECLARE @RandomNames VARCHAR(4096) = @RandNamesSet1 + ',' + @RandNamesSet2 + ',' + @RandNamesSet3 + ',' + @RandNamesSet4 + ',' + @RandNamesSet5 + ',' + @RandNamesSet6;\r\n\r\n--\r\nDECLARE @PersonNames TABLE (ID INT NULL, Value VARCHAR(64) NULL);\r\n;WITH _CTE_Names\r\nAS (\r\n\t   SELECT SUBSTRING((@RandomNames + ','), 1, CHARINDEX(',', (@RandomNames + ','), 1) - 1) AS \"val\",\r\n\t\t\t  SUBSTRING((@RandomNames + ','), CHARINDEX(',', (@RandomNames + ','), 1) + 1, LEN((@RandomNames + ','))) AS \"rem\"\r\n\t   UNION ALL\r\n\t   SELECT SUBSTRING(a.rem, 1, CHARINDEX(',', a.rem, 1) - 1) AS \"val\",\r\n\t\t\t  SUBSTRING(a.rem, CHARINDEX(',', a.rem, 1) + 1, LEN(a.rem))\r\n\t   FROM _CTE_Names AS a\r\n\t   WHERE LEN(a.rem) >= 1\r\n   )\r\nINSERT INTO @PersonNames (ID, Value)\r\nSELECT ROW_NUMBER() OVER (ORDER BY CTE.val ASC) AS \"ID\", CTE.val AS \"Value\"\r\nFROM _CTE_Names AS CTE\r\nOPTION (MAXRECURSION 0);\r\n\r\n--\r\nDECLARE @NC INT = (SELECT COUNT(1) FROM @PersonNames);\r\n\r\n--\r\nDECLARE @Row_i INT = 1, @Row_n INT = 500;\r\n\r\nWHILE @Row_i <= @Row_n\r\n\tBEGIN\r\n\t\t;\r\n\t\tWITH CTE_Names\r\n\t\tAS (\r\n\t\t\t\tSELECT ID, Value FROM @PersonNames\r\n\t\t   ),\r\n\t\t\t EmpBaseDetails\r\n\t\tAS (\r\n\t\t\t   SELECT ISNULL((\r\n\t\t\t\t\t\t\t\t SELECT FN.Value\r\n\t\t\t\t\t\t\t\t FROM CTE_Names AS FN\r\n\t\t\t\t\t\t\t\t WHERE FN.ID = (ROUND(@NC * RAND(), 0))\r\n\t\t\t\t\t\t\t ),\r\n\t\t\t\t\t  (\r\n\t\t\t\t\t\t  SELECT FN0.Value\r\n\t\t\t\t\t\t  FROM CTE_Names AS FN0\r\n\t\t\t\t\t\t  WHERE FN0.ID = (ROUND(@NC * RAND(), 0) + 1)\r\n\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t) + ' ' + ISNULL((\r\n\t\t\t\t\t\t\t\t\t\t\t\t SELECT LN.Value\r\n\t\t\t\t\t\t\t\t\t\t\t\t FROM CTE_Names AS LN\r\n\t\t\t\t\t\t\t\t\t\t\t\t WHERE LN.ID = (ROUND(@NC * RAND(), 0))\r\n\t\t\t\t\t\t\t\t\t\t\t ),\r\n\t\t\t\t\t\t\t\t\t  (\r\n\t\t\t\t\t\t\t\t\t\t  SELECT LN0.Value\r\n\t\t\t\t\t\t\t\t\t\t  FROM CTE_Names AS LN0\r\n\t\t\t\t\t\t\t\t\t\t  WHERE LN0.ID = (ROUND(@NC * RAND(), 0) + 1)\r\n\t\t\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t\t\t\t\t) AS \"EmpName\",\r\n\t\t\t\t\t  (DATEADD(DAY, RAND() * DATEDIFF(DAY, @FromDOB, @ToDOB), @FromDOB)) AS \"EmpDOB\",\r\n\t\t\t\t\t  CASE WHEN (ROUND(RAND() * 100, 0) * 1000) = 0 THEN (ROUND(RAND() * 110, 0) * 1000) ELSE (ROUND(RAND() * 90, 0) * 1000) END AS \"EmpSalary\",\r\n\t\t\t\t\t  (ROUND(((@MaxDeptID - @MinDeptID) * RAND() + @MinDeptID), 0)) AS \"DeptID\",\r\n\t\t\t\t\t  (ROUND(((@MaxProjID - @MinProjID) * RAND() + @MinProjID), 0)) AS \"ProjID\"\r\n\t\t   )\r\n\t\tINSERT INTO dbo.EmployeeTbl\r\n\t\t\t(\r\n\t\t\t\tEmpName,\r\n\t\t\t\tEmpDOB,\r\n\t\t\t\tEmpDOJ,\r\n\t\t\t\tEmpSalary,\r\n\t\t\t\tDeptID,\r\n\t\t\t\tProjID,\r\n\t\t\t\tCreatedOn,\r\n\t\t\t\tLastModifiedOn\r\n\t\t\t)\r\n\t\tSELECT Emp.EmpName,\r\n\t\t\t   Emp.EmpDOB,\r\n\t\t\t   DATEADD(DAY, (RAND() * 365 * 10), DATEADD(YEAR, 18, Emp.EmpDOB)) AS \"EmpDOJ\", --Adding DOJ After \"18\" Years of DOB and WithIn \"10\" Years\r\n\t\t\t   Emp.EmpSalary,\r\n\t\t\t   Emp.DeptID,\r\n\t\t\t   Emp.ProjID,\r\n\t\t\t   GETDATE() AS \"CreatedOn\",\r\n\t\t\t   GETDATE() AS \"LastModifiedOn\"\r\n\t\tFROM EmpBaseDetails AS Emp;\r\n\r\n\t\t--\r\n\t\tSET @Row_i = @Row_i + 1;\r\n\tEND;\r\n--$EndRegion: Populating EmployeeTable with Random Data\r\n\r\n--\r\n--$BeginRegion: Deleting Employee Names with FirstName = LastName OR Salary = 0\r\nDELETE FROM dbo.EmployeeTbl\r\nOUTPUT CASE\r\n\t\t\tWHEN RTRIM(LEFT(Deleted.EmpName, CHARINDEX(' ', Deleted.EmpName))) = LTRIM(RIGHT(Deleted.EmpName, CHARINDEX(' ', Deleted.EmpName))) AND Deleted.EmpSalary = 0\r\n\t\t\t\tTHEN 'FN = LN && Salary = 0'\r\n\t\t\tWHEN RTRIM(LEFT(Deleted.EmpName, CHARINDEX(' ', Deleted.EmpName))) = LTRIM(RIGHT(Deleted.EmpName, CHARINDEX(' ', Deleted.EmpName)))\r\n\t\t\t\tTHEN 'FN = LN'\r\n\t\t\tWHEN Deleted.EmpSalary = 0\r\n\t\t\t\tTHEN 'Salary = 0'\r\n\t   END AS \"Description\",\r\n\t   Deleted.EmpID, Deleted.EmpName, Deleted.EmpDOB, Deleted.EmpDOJ, Deleted.EmpSalary, Deleted.DeptID, Deleted.ProjID\r\nWHERE EmpID IN (\r\n\t\t\t\t   SELECT EmpID\r\n\t\t\t\t   FROM dbo.EmployeeTbl\r\n\t\t\t\t   WHERE RTRIM(LEFT(EmpName, CHARINDEX(' ', EmpName))) = LTRIM(RIGHT(EmpName, CHARINDEX(' ', EmpName)))\r\n\t\t\t   )\r\n\t  OR EmpSalary = 0;\r\n--$EndRegion: Deleting Employee Names with FirstName = LastName OR Salary = 0\r\n\r\n--\r\n--$BeginRegion: Deleting Duplicate Employees with Names Only\r\n;WITH CTE_DuplicateNames\r\nAS (\r\n\t   SELECT EmpID, EmpName, EmpDOB, EmpDOJ, DeptID, ProjID, ROW_NUMBER() OVER (PARTITION BY EmpName ORDER BY EmpID ASC) AS \"Dup_RowID\"\r\n\t   FROM dbo.EmployeeTbl\r\n   )\r\nDELETE CTE\r\nOUTPUT 'Dup_EmpNames' AS \"Description\",\r\n\t   Deleted.EmpID, Deleted.EmpName, Deleted.EmpDOB, Deleted.EmpDOJ, Deleted.DeptID, Deleted.ProjID, Deleted.Dup_RowID\r\nFROM CTE_DuplicateNames AS CTE\r\nWHERE CTE.Dup_RowID > 1;\r\n--$EndRegion: Deleting Duplicate Employees with Names Only\r\n\r\n--\r\n--$BeginRegion: Get Only Row Counts for Each Table\r\nSELECT OBJECT_SCHEMA_NAME(P.object_id) AS \"SchemaName\",\r\n\t   OBJECT_NAME(P.object_id) AS \"TableName\",\r\n\t   P.rows AS \"Rows\"\r\nFROM sys.partitions AS P\r\nWHERE 1 = 1\r\n\t  AND OBJECTPROPERTY(P.object_id, 'IsMsShipped') = 0 --Exclude MS Objects\r\n\t  AND OBJECT_SCHEMA_NAME(P.object_id) <> 'sys' --To Avoid \"sys\" schema\r\n\t  AND OBJECTPROPERTY(P.object_id, 'IsUserTable') = 1 --To Consider Only User Created Tables\r\nGROUP BY P.object_id, P.rows --Used as alternative to DISTINCT\r\n--HAVING P.rows > 0 --UnComment To Hide Empty Tables\r\nORDER BY P.rows DESC;\r\n--$EndRegion: Get Only Row Counts for Each Table\r\n--\r\nRETURN\r\n--\r\n--\r\nSET STATISTICS IO ON;\r\nSET STATISTICS TIME ON;\r\n\r\n--\r\n--Note for Performance Check:\r\n--IF \"ORDER BY DT.DeptName, PT.ProjName\" is excluded, \r\n\t--Then 1st Query is \"High Cost Execution Plan But Low Execution Time\" and 2nd Query is \"Low Cost Execution Plan But High Execution Time\"\r\n--IF \"ORDER BY DT.DeptName, PT.ProjName\" is included,\r\n\t--Then 1st Query is \"High Cost Execution Plan and High Execution Time\" and 2nd Query is \"Low Cost Execution Plan and Low Execution Time\"\r\n\r\n--\r\n--$BeginRegion: 1st Query\r\nSELECT DT.DeptName, PT.ProjName, COUNT(ET.EmpID) AS \"CNT\"\r\nFROM dbo.EmployeeTbl AS ET\r\nINNER JOIN dbo.DepartmentTbl AS DT ON DT.DeptID = ET.DeptID\r\nINNER JOIN dbo.ProjectTbl AS PT ON PT.ProjID = ET.ProjID\r\nGROUP BY DT.DeptName, PT.ProjName\r\nORDER BY DT.DeptName, PT.ProjName;\r\n--$EndRegion: 1st Query\r\n\r\n--\r\n--$BeginRegion: 2nd Query\r\nSELECT DT.DeptName, PT.ProjName, ET.CNT\r\nFROM (\r\n\t\t SELECT DeptID, ProjID, COUNT(EmpID) AS \"CNT\"\r\n\t\t FROM dbo.EmployeeTbl\r\n\t\t GROUP BY DeptID, ProjID\r\n\t ) AS ET\r\nINNER JOIN dbo.DepartmentTbl AS DT ON DT.DeptID = ET.DeptID\r\nINNER JOIN dbo.ProjectTbl AS PT ON PT.ProjID = ET.ProjID\r\nORDER BY DT.DeptName, PT.ProjName;\r\n--$EndRegion: 2nd Query\r\n\r\n--\r\nSET STATISTICS IO OFF;\r\nSET STATISTICS TIME OFF;\r\n\r\n--\r\n/* ===== ** Find Nth Highest ** =========================================================================================================== */\r\n/*Finding nth Highest Salaried Employee*/\r\nDECLARE @n INT=3; -- Ex: Find Employee of 2nd Highest Salary\r\nSELECT EmpID, EmpName, EmpSalary\r\nFROM dbo.EmployeeTbl\r\nWHERE EmpSalary=\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tSELECT TOP(1)A.EmpSalary\r\n\t\t\t\t\t\tFROM(SELECT DISTINCT TOP(@n)EmpSalary FROM dbo.EmployeeTbl ORDER BY EmpSalary DESC) AS A\r\n\t\t\t\t\t\tORDER BY EmpSalary ASC\r\n\t\t\t\t\t);\r\n\r\n--Optimised Way\r\nSELECT EmpID, EmpName, EmpSalary\r\nFROM dbo.EmployeeTbl\r\nWHERE EmpSalary=\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tSELECT DISTINCT EmpSalary \r\n\t\t\t\t\t\tFROM dbo.EmployeeTbl \r\n\t\t\t\t\t\tORDER BY EmpSalary DESC OFFSET(@n-1)ROWS FETCH NEXT 1 ROW ONLY\r\n\t\t\t\t\t);\r\n\r\n/*Finding Highest Salaried employees from Each Department*/\r\n;\r\nWITH CTE_ AS --\r\n(\r\n\tSELECT DeptID, MAX(EmpSalary) AS \"MaxSalary\"\r\n\tFROM dbo.EmployeeTbl\r\n\tGROUP BY DeptID\r\n)\r\nSELECT EMP.EmpID, EMP.EmpName, EMP.DeptID, DEPT.DeptName, EMP.EmpSalary\r\nFROM CTE_ AS CTE\r\nINNER JOIN dbo.EmployeeTbl AS EMP ON EMP.DeptID=CTE.DeptID AND EMP.EmpSalary=CTE.MaxSalary\r\nINNER JOIN dbo.DepartmentTbl AS DEPT ON DEPT.DeptID=EMP.DeptID\r\nORDER BY CTE.MaxSalary;\r\n\r\n--\r\n/*Find the Nth Highest Salaried Employees from Each Department*/\r\nSELECT EmpID, EmpName, EmpSalary, DeptID\r\nFROM dbo.EmployeeTbl\r\nORDER BY DeptID ASC, EmpSalary DESC;\r\nDECLARE @N_MaxSal INT=2;\r\n--\r\n;\r\nWITH CTE_ AS --\r\n(\r\n\tSELECT DISTINCT EMP.DeptID, EMP.EmpSalary AS \"Nth_MaxSalary\"\r\n\tFROM\r\n\t\t (\r\n\t\t SELECT DENSE_RANK() OVER (PARTITION BY EMP.DeptID ORDER BY EMP.EmpSalary DESC) AS \"DRid\", EMP.DeptID, EMP.EmpSalary\r\n\t\t FROM dbo.EmployeeTbl AS EMP\r\n\t\t ) AS EMP\r\n\tWHERE  EMP.DRid=@N_MaxSal\r\n)\r\nSELECT EMP.EmpID, EMP.EmpName, EMP.DeptID, DEPT.DeptName, EMP.EmpSalary\r\nFROM CTE_ AS CTE\r\nINNER JOIN dbo.EmployeeTbl AS EMP ON EMP.DeptID=CTE.DeptID AND EMP.EmpSalary=CTE.Nth_MaxSalary\r\nINNER JOIN dbo.DepartmentTbl AS DEPT ON DEPT.DeptID=EMP.DeptID\r\nORDER BY CTE.Nth_MaxSalary;"
}