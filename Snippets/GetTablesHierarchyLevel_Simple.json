{
  "id": "7bde5d99-8699-4255-bfd0-55ae6ddb865f",
  "prefix": "GetTablesHierarchyLevel_Simple",
  "description": "Get Simple Hierarchy Level of Tables using Existing Foreign Keys",
  "body": "/* =============================================================================================================================================================\r\n-- Server\t\t: LOCALSERVER\r\n-- Database\t\t: USER DATABASE\r\n-- Script\t\t: GetTablesHierarchyLevel_Simple\r\n-- Description\t: Get Simple Hierarchy Level of Tables using Existing Foreign Keys\r\n-- **Note: Self_Referencing and Cyclic_Referencing ForeignKeys will be Ignored to Avoid Infinite Looping\r\n-- In sys.foreign_keys: Referenced_Object_Id represents Parent_Object and Parent_Object_Id represents Child_Object\r\n============================================================================================================================================================= */\r\nSET NOCOUNT ON;\r\n--\r\n/* ===== ** DO NOT CHANGE CODE BELOW FROM HERE ** =========================================================================================================== */\r\n--$BeginRegion: All PK-FK Dependencies Except \"Self_Referencing and Cyclic_Referencing ForeignKeys\" to Avoid Infinite Looping\r\nDECLARE @Dependencies TABLE\r\n(\r\n\tForeignKeyObjectId INT NOT NULL, ForeignKeyName NVARCHAR(128) NOT NULL,\r\n\tChildObjectId INT NOT NULL, ChildSchema NVARCHAR(128) NOT NULL, ChildTable NVARCHAR(128) NOT NULL,\r\n\tParentObjectId INT NOT NULL, ParentSchema NVARCHAR(128) NOT NULL, ParentTable NVARCHAR(128) NOT NULL\r\n);\r\nINSERT INTO @Dependencies\r\n(\r\n\tForeignKeyObjectId, ForeignKeyName,\r\n\tChildObjectId, ChildSchema, ChildTable,\r\n\tParentObjectId, ParentSchema, ParentTable\r\n)\r\nSELECT FK.object_Id AS \"ForeignKeyObjectId\", FK.name AS \"ForeignKeyName\", --\r\n\t   FK.parent_object_id AS \"ChildObjectId\", OBJECT_SCHEMA_NAME(FK.parent_object_id) AS \"ChildSchema\", OBJECT_NAME(FK.parent_object_id) AS \"ChildTable\", --\r\n\t   FK.referenced_object_id as \"ParentObjectId\", OBJECT_SCHEMA_NAME(FK.referenced_object_id) AS \"ParentSchema\", OBJECT_NAME(FK.referenced_object_id) AS \"ParentTable\" --\r\nFROM sys.foreign_keys AS FK\r\nWHERE NOT EXISTS (\r\n\t\t\t\t\t --$BeginRegion: Self_Referencing and Cyclic_Referencing ForeignKeys\r\n\t\t\t\t\t SELECT FK1.name AS \"ForeignKeyName\", --\r\n\t\t\t\t\t\t\tOBJECT_SCHEMA_NAME(FK1.parent_object_id) + '.' + OBJECT_NAME(FK1.parent_object_id) AS \"ParentTableName\", --\r\n\t\t\t\t\t\t\tOBJECT_SCHEMA_NAME(FK1.referenced_object_id) + '.' + OBJECT_NAME(FK1.referenced_object_id) AS \"ReferTableName\" --\r\n\t\t\t\t\t FROM sys.foreign_keys AS FK1\r\n\t\t\t\t\t INNER JOIN sys.foreign_keys AS FK2 ON FK1.parent_object_id = FK2.referenced_object_id AND FK2.parent_object_id = FK1.referenced_object_id\r\n\t\t\t\t\t --$EndRegion: Self_Referencing and Cyclic_Referencing ForeignKeys\r\n\t\t\t\t\t WHERE FK1.object_id = FK.object_id OR FK2.object_id = FK.object_id\r\n\t\t\t\t );\r\n--$EndRegion: All PK-FK Dependencies Except \"Self_Referencing and Cyclic_Referencing ForeignKeys\" to Avoid Infinite Looping\r\n--\r\n--$BeginRegion: All Base Tables On Which Other Tables Depends\r\nDECLARE @NoDependencies TABLE (BaseObjectId INT NOT NULL, BaseSchema NVARCHAR(128) NOT NULL, BaseTable NVARCHAR(128) NOT NULL);\r\nINSERT INTO @NoDependencies (BaseObjectId, BaseSchema, BaseTable)\r\nSELECT T.object_id AS \"BaseObjectId\", OBJECT_SCHEMA_NAME(T.object_id) AS \"BaseSchema\", T.name AS \"BaseTable\"\r\nFROM sys.tables AS T\r\nWHERE T.type = 'U' AND NOT EXISTS (SELECT 1 FROM @Dependencies AS D WHERE D.ChildObjectId = T.object_id);\r\n--$EndRegion: All Base Tables On Which Other Tables Depends\r\n--\r\n;WITH _Recursive --Recursive CTE to Get Base Tables and Dependent Child Tables along with LVL\r\nAS (\r\n\t\tSELECT ND.BaseSchema AS \"SchemaName\", ND.BaseTable AS \"TableName\", 0 AS \"LVL\" --Level 0 Indicates Base Table\r\n\t\tFROM @NoDependencies AS ND\r\n\t\tUNION ALL\r\n\t\tSELECT D.ChildSchema AS \"SchemaName\", D.ChildTable AS \"TableName\", R.LVL + 1 AS \"LVL\" --LVL + 1 Indicates Child Table for Base Table\r\n\t\tFROM @Dependencies AS D\r\n\t\tINNER JOIN _Recursive AS R ON D.ParentSchema = R.SchemaName AND D.ParentTable = R.TableName\r\n   ) --\r\nSELECT R.SchemaName, R.TableName, MAX(R.LVL) AS \"LVL\"\r\n/*\r\n\t, ISNULL((SELECT STUFF(((SELECT '; ' + 'ALTER TABLE ['+R.SchemaName+'].['+R.TableName+'] DISABLE TRIGGER ['+name+']'\r\n\t\t\t\t\t\t\t FROM sys.triggers AS DT --DisableTriggers\r\n\t\t\t\t\t\t\t WHERE DT.is_disabled = 0 AND OBJECT_SCHEMA_NAME(DT.parent_id) = R.SchemaName AND OBJECT_NAME(DT.parent_id) = R.TableName\r\n\t\t\t\t\t\t\t FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)')), 1, 2, '')) + '; ', '')\r\n\t+ 'DELETE FROM ['+R.SchemaName+'].['+R.TableName+'] WHERE 1=1; '\r\n\t+ ISNULL((SELECT STUFF(((SELECT ';' + ' ALTER TABLE ['+R.SchemaName+'].['+R.TableName+'] ENABLE TRIGGER ['+name+']'\r\n\t\t\t\t\t\t\t FROM sys.triggers AS ET --EnableTriggers\r\n\t\t\t\t\t\t\t WHERE ET.is_disabled = 0 AND OBJECT_SCHEMA_NAME(ET.parent_id) = R.SchemaName AND OBJECT_NAME(ET.parent_id) = R.TableName\r\n\t\t\t\t\t\t\t FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)')), 1, 2, '')) + ';', '')\r\n\t+ '/*LVL:' + CAST(MAX(r.LVL) AS VARCHAR(2)) + '*/' AS \"DELETE STATEMENT\"\r\n*/\r\nFROM _Recursive AS R\r\nGROUP BY R.SchemaName, R.TableName\r\nORDER BY LVL ASC, R.SchemaName ASC, R.TableName ASC\r\nOPTION (MAXRECURSION 0);"
}