{
  "id": "b8b16502-3f2a-4712-b5d8-9e8e11c1d56e",
  "prefix": "GetTablesDatailedHierarchy",
  "description": "Get the Detailed Hierarchy of Tables using Existing Foreign Keys",
  "body": "/* =========================================================================================================================================\r\n-- Server\t\t: LOCALSERVER\r\n-- Database\t\t: USER Database\r\n-- Script\t\t: GetTablesDatailedHierarchy\r\n-- Description\t: Get Detailed Hierarchy of Tables using Existing Foreign Keys\r\n--\t\t\t\t**Note: Self Reference Foreign Keys should be Excluded or Dropped before Executing and Then ReCreated.\r\n========================================================================================================================================= */\r\nSET NOCOUNT ON;\r\nWITH _Dependencies -- Get Objects with FK Dependencies\r\nAS (\r\n\t   SELECT FK.TABLE_SCHEMA AS \"OBJECTschema\", FK.TABLE_NAME AS \"OBJECTname\",\r\n\t\t\t  PK.TABLE_SCHEMA AS \"DEPENDSschema\", PK.TABLE_NAME AS \"DEPENDSname\"\r\n\t   FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS C\r\n\t   INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS FK ON C.CONSTRAINT_NAME = FK.CONSTRAINT_NAME\r\n\t   INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS PK ON C.UNIQUE_CONSTRAINT_NAME = PK.CONSTRAINT_NAME\r\n   ),\r\n_NoDependencies -- The First Level Objects are with No Dependencies\r\nAS (\r\n\t   SELECT T.TABLE_SCHEMA AS \"OBJECTschema\", T.TABLE_NAME AS \"OBJECTname\"\r\n\t   FROM INFORMATION_SCHEMA.TABLES AS T\r\n\t   WHERE T.TABLE_TYPE = 'BASE TABLE' -- Just Tables Only\r\n\t\t\t AND NOT EXISTS (SELECT 1 FROM _Dependencies AS D WHERE D.OBJECTschema = T.TABLE_SCHEMA AND D.OBJECTname = T.TABLE_NAME)\r\n   ),\r\n_Recursive -- Recursive CTE to Get Dependencies\r\nAS (\r\n\t   SELECT ND.OBJECTschema AS \"SchemaName\", ND.OBJECTname AS \"TableName\", 0 AS \"LVL\", -- Level 0 Indicates Tables with No Dependencies\r\n\t   CAST('' AS VARCHAR(MAX)) AS \"DependsON\"\r\n\t   FROM _NoDependencies AS ND\r\n\t   UNION ALL\r\n\t   SELECT D.OBJECTschema AS \"SchemaName\", D.OBJECTname AS \"TableName\", R.LVL + 1 AS \"LVL\",\r\n\t   CAST((CASE WHEN LVL > 0 THEN R.DependsON + ' => ' ELSE '' END) + ('['+D.DEPENDSschema+'].['+D.DEPENDSname+'] ('+CAST(R.LVL AS VARCHAR(2))+')') AS VARCHAR(MAX)) -- Visually Reflects Hierarchy\r\n\t   FROM _Dependencies AS D\r\n\t   INNER JOIN _Recursive AS R ON D.DEPENDSschema = R.SchemaName AND D.DEPENDSname = R.TableName\r\n   )\r\nSELECT R.SchemaName, R.TableName, R.LVL,\r\nCASE WHEN R.LVL > 0 THEN R.DependsON + ' => ' + '['+R.SchemaName+'].['+R.TableName+'] ('+CAST(R.LVL AS VARCHAR(2))+')' ELSE R.DependsON END AS \"DependsOnHierarchy\"\r\nFROM _Recursive AS R\r\nORDER BY R.LVL ASC, R.SchemaName ASC, R.TableName ASC, R.DependsON ASC;"
}