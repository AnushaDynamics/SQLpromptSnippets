{
  "id": "dd9baf27-ae8c-4e34-bd66-54798a807c64",
  "prefix": "mvpAY_sp_helpExpandView_Execution",
  "description": "This tool script was written to as a companion to sp_helpExpandView",
  "body": "/*===============================================================================\r\n-- Script - EXEC sp_helpExpandView For All Views.sql\r\n-- \r\n-- Written By: Andy Yun\r\n-- Created On: 2015-03-09\r\n-- \r\n-- Summary:\r\n-- This tool script was written to as a companion to sp_helpExpandView.  You\r\n-- can run it against a database and it will return a horizontal output of\r\n-- all Views & their children.  Then dump the output to Excel for easier \r\n-- analysis & filtering of your database's nested views.\r\n--\r\n-- Supports:\r\n--      Scalar & Table-Valued Functions\r\n--      Schemas\r\n--      Synonyms to other DBs\r\n--\r\n-- \r\n-- Updates:\r\n-- Date\t\t\tDeveloper\tRemarks\r\n-- 2015-03-09\tAYun\t\tV1: Initial Release\r\n---------------------------------------------------------------------------------\r\n-- License: \r\n-- This code is free to use for personal, educational, and internal corporate \r\n-- purposes provided that this header is preserved. \r\n-- (c) 2015 Andy Yun\r\n===============================================================================*/\r\n\r\nIF OBJECT_ID('tempdb.dbo.#tmpExpandViewHorizontal ', 'U') IS NOT NULL\r\n\tDROP TABLE #tmpExpandViewHorizontalLoop;\r\nIF OBJECT_ID('tempdb.dbo.#tmpExpandViewHorizontal ', 'U') IS NOT NULL\r\n\tDROP TABLE #tmpExpandViewHorizontal;\r\n\r\nCREATE TABLE #tmpExpandViewHorizontalLoop (\r\n\tRecID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,\r\n\tHierarchyLvl INT,\r\n\tBaseObject_FullName VARCHAR(500),\r\n\tChild_DBName VARCHAR(256),\r\n\tChild_FullName VARCHAR(500),\r\n\tChild_Type CHAR(2),\r\n\tObjectHierarchyID INT,\r\n\tParentObjectHierarchyID INT\r\n)\r\n\r\nCREATE TABLE #tmpExpandViewHorizontal (\r\n\tRecID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,\r\n\tObjectID INT,\r\n\tHierarchyLvl INT,\r\n\tBaseObject_FullName VARCHAR(500),\r\n\tChild_DBName VARCHAR(256),\r\n\tChild_FullName VARCHAR(500),\r\n\tChild_Type CHAR(2),\r\n\tObjectHierarchyID INT,\r\n\tParentObjectHierarchyID INT\r\n)\r\n\r\nDECLARE @sqlCMD NVARCHAR(4000),\r\n\t@ObjectID INT\r\n\r\n-----\r\n-- Loop through every view in the current database\r\nDECLARE curExpandView CURSOR FAST_FORWARD FOR \r\n\tSELECT views.object_id,\r\n\t\t'EXEC sp_helpExpandView @ViewName = ''' + schemas.name + '.' + views.name + ''', @OutputFormat = ''Vertical'''\r\n\tFROM sys.views\r\n\tINNER JOIN sys.schemas\r\n\t\tON views.schema_id = schemas.schema_id\r\n\t-- Uncomment below to add in criteria. For example, only views that use ROW_NUMBER\r\n\t--INNER JOIN sys.sql_modules\r\n\t--\tON views.object_id = sql_modules.object_id\r\n\t--WHERE sql_modules.definition LIKE '%ROW_NUMBER%'\r\n\r\nOPEN curExpandView\r\n\r\nFETCH NEXT \r\n\tFROM curExpandView INTO @ObjectID, @sqlCMD\r\n\r\nWHILE @@FETCH_STATUS = 0\r\n\tBEGIN\r\n\t\r\n\tINSERT INTO #tmpExpandViewHorizontalLoop (\r\n\t\tHierarchyLvl,\r\n\t\tBaseObject_FullName,\r\n\t\tChild_DBName,\r\n\t\tChild_FullName,\r\n\t\tChild_Type,\r\n\t\tObjectHierarchyID,\r\n\t\tParentObjectHierarchyID\r\n\t)\r\n\tEXEC sp_executesql @sqlCMD\r\n\r\n\tINSERT INTO #tmpExpandViewHorizontal (\r\n\t\tObjectID,\r\n\t\tHierarchyLvl,\r\n\t\tBaseObject_FullName,\r\n\t\tChild_DBName,\r\n\t\tChild_FullName,\r\n\t\tChild_Type,\r\n\t\tObjectHierarchyID,\r\n\t\tParentObjectHierarchyID\r\n\t)\r\n\tSELECT \r\n\t\t@ObjectID,\r\n\t\tHierarchyLvl,\r\n\t\tBaseObject_FullName,\r\n\t\tChild_DBName,\r\n\t\tChild_FullName,\r\n\t\tChild_Type,\r\n\t\tObjectHierarchyID,\r\n\t\tParentObjectHierarchyID\r\n\tFROM #tmpExpandViewHorizontalLoop\r\n\r\n\tTRUNCATE TABLE #tmpExpandViewHorizontalLoop;\r\n\r\n\tFETCH NEXT \r\n \t\tFROM curExpandView INTO @ObjectID, @sqlCMD\r\n\tEND  \r\nCLOSE curExpandView\r\nDEALLOCATE curExpandView\r\n\r\n-----\r\n-- Dynamically create flattened output\r\nDECLARE @MaxHierarchyID INT,\r\n\t@HierarchyID INT = 2;\r\n\r\nSELECT @MaxHierarchyID = MAX(HierarchyLvl)\r\nFROM #tmpExpandViewHorizontal;\r\n\r\nDECLARE @sqlSelect NVARCHAR(4000) = N'\r\nSELECT \r\n\tLvl1.BaseObject_FullName\r\n\t, Lvl1.HierarchyLvl AS Lvl_1\r\n\t, Lvl1.Child_FullName AS Obj_1\r\n\t, Lvl1.Child_Type AS Typ_1',\r\n\t@sqlFrom NVARCHAR(4000) = N'\r\nFROM #tmpExpandViewHorizontal Lvl1';\r\n\r\nWHILE @HierarchyID <= @MaxHierarchyID\r\nBEGIN\r\n\tSET @sqlSelect = @sqlSelect + N'\r\n\t, COALESCE(Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.HierarchyLvl, ''' + CAST(@HierarchyID AS NVARCHAR(4000)) + ''') AS Lvl_' + CAST(@HierarchyID AS NVARCHAR(4000)) + '\r\n\t, COALESCE(Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.Child_FullName, SPACE(0)) AS Obj_' + CAST(@HierarchyID AS NVARCHAR(4000)) + '\r\n\t, COALESCE(Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.Child_Type, SPACE(0)) AS Typ_' + CAST(@HierarchyID AS NVARCHAR(4000));\r\n\tSET @sqlFrom = @sqlFrom + N'\r\nLEFT OUTER JOIN #tmpExpandViewHorizontal Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '\r\n\tON Lvl' + CAST((@HierarchyID - 1) AS NVARCHAR(4000)) + '.ObjectHierarchyID = Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.ParentObjectHierarchyID\r\n\tAND Lvl' + CAST((@HierarchyID - 1) AS NVARCHAR(4000)) + '.ObjectID = Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.ObjectID\r\n\r\n\tAND Lvl' + CAST(@HierarchyID AS NVARCHAR(4000)) + '.HierarchyLvl = ' + CAST(@HierarchyID AS NVARCHAR(4000));\r\n\tSET @HierarchyID = @HierarchyID + 1;\r\nEND\r\n\r\nSET @sqlCMD = @sqlSelect + @sqlFrom + N'\r\nWHERE Lvl1.HierarchyLvl = 1\r\nORDER BY Lvl1.BaseObject_FullName, Lvl1.HierarchyLvl, Lvl1.Child_FullName;';\r\nPRINT @sqlCMD;\r\nEXEC sp_executesql @sqlCMD;\r\n\r\n-----------\r\n\r\nSELECT *\r\nFROM #tmpExpandViewHorizontal\r\nWHERE #tmpExpandViewHorizontal.Child_Type = 'U'\r\n"
}