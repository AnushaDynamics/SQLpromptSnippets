{
  "id": "747ce465-7b42-4ddb-9984-b8f782ea962f",
  "prefix": "GetTablesHierarchyLevel_Detailed",
  "description": "Get Detailed Hierarchy Level of Tables using Existing Foreign Keys",
  "body": "/* =============================================================================================================================================================\r\n-- Server\t\t: LOCALSERVER\r\n-- Database\t\t: USER DATABASE\r\n-- Script\t\t: GetTablesHierarchyLevel_Detailed\r\n-- Description\t: Get Detailed Hierarchy Level of Tables using Existing Foreign Keys\r\n-- **Note: Self_Referencing and Cyclic_Referencing ForeignKeys will be Ignored to Avoid Infinite Looping\r\n-- In sys.foreign_keys: Referenced_Object_Id represents Parent_Object and Parent_Object_Id represents Child_Object\r\n============================================================================================================================================================= */\r\nSET NOCOUNT ON;\r\n--\r\nDECLARE @SchemaName VARCHAR(128) = '$SchName$'; --Optional\r\nDECLARE @TableName VARCHAR(128) = '$TblName$'; --Optional\r\n--\r\nDECLARE @GetOnlyDirectRelatedTables BIT = 0; -- 0 = Disabled (Default) | 1 = Enabled\r\nDECLARE @GetAllPossibleRelatedTables BIT = 0; -- 0 = Disabled (Default) | 1 = Enabled\r\n--\r\n/* ===== ** DO NOT CHANGE CODE BELOW FROM HERE ** =========================================================================================================== */\r\n--$BeginRegion: Preliminary Checks\r\nSET @SchemaName = LTRIM(RTRIM(@SchemaName)); IF @SchemaName = '' SET @SchemaName = NULL; --Resetting @SchemaName = NULL\r\nSET @TableName = LTRIM(RTRIM(@TableName)); IF @TableName = '' SET @TableName = NULL; --Resetting @TableName = NULL\r\n--\r\nIF (@GetOnlyDirectRelatedTables = 1 OR @GetAllPossibleRelatedTables = 1) AND (@SchemaName IS NULL OR @TableName IS NULL)\r\nBEGIN\r\n\tDECLARE @ErrMsg VARCHAR(4000);\r\n\tSET @ErrMsg = 'To Get List of All Tables which are Directly and InDirectly Related to @SCH and @TBL,' + CHAR(10) --\r\n\t\t\t\t+ '\tProvide Both (@SchemaName AND @TableName) OR Disable Both @GetOnlyDirectRelatedTables and @GetAllPossibleRelatedTables.!'\r\n\tRAISERROR(@ErrMsg, 11, 0) WITH NOWAIT;\r\n\tRETURN;\r\nEND;\r\n--$EndRegion: Preliminary Checks\r\n--\r\n/* ===== ** LIST ALL POSSIBLE PATHS OF ALL TABLES using FOREIGNKEY RELATIONS ** ============================================================================= */\r\n--$BeginRegion: Gets All Possible Paths Available for [@SchemaName].[@TableName]\r\nIF OBJECT_ID('tempdb..#HierarchyDetails', 'U') IS NOT NULL\r\n\tDROP TABLE #HierarchyDetails;\r\n--\r\nCREATE TABLE #HierarchyDetails\r\n(\r\n\tSchemaName NVARCHAR(128)NOT NULL,\r\n\tTableName NVARCHAR(128) NOT NULL,\r\n\tLVL INT NOT NULL,\r\n\tDependencyPath NVARCHAR(4000) NOT NULL,\r\n\tCONSTRAINT PK_HierarchyDetails PRIMARY KEY CLUSTERED (LVL, SchemaName, TableName, DependencyPath)\r\n);\r\n--\r\n--$BeginRegion: All PK-FK Dependencies Except \"Self_Referencing and Cyclic_Referencing ForeignKeys\" to Avoid Infinite Looping\r\nDECLARE @Dependencies TABLE\r\n(\r\n\tForeignKeyObjectId INT NOT NULL, ForeignKeyName NVARCHAR(128) NOT NULL,\r\n\tChildObjectId INT NOT NULL, ChildSchema NVARCHAR(128) NOT NULL, ChildTable NVARCHAR(128) NOT NULL,\r\n\tParentObjectId INT NOT NULL, ParentSchema NVARCHAR(128) NOT NULL, ParentTable NVARCHAR(128) NOT NULL\r\n);\r\nINSERT INTO @Dependencies\r\n(\r\n\tForeignKeyObjectId, ForeignKeyName,\r\n\tChildObjectId, ChildSchema, ChildTable,\r\n\tParentObjectId, ParentSchema, ParentTable\r\n)\r\nSELECT FK.object_Id AS \"ForeignKeyObjectId\", FK.name AS \"ForeignKeyName\", --\r\n\t   FK.parent_object_id AS \"ChildObjectId\", OBJECT_SCHEMA_NAME(FK.parent_object_id) AS \"ChildSchema\", OBJECT_NAME(FK.parent_object_id) AS \"ChildTable\", --\r\n\t   FK.referenced_object_id as \"ParentObjectId\", OBJECT_SCHEMA_NAME(FK.referenced_object_id) AS \"ParentSchema\", OBJECT_NAME(FK.referenced_object_id) AS \"ParentTable\" --\r\nFROM sys.foreign_keys AS FK\r\nWHERE NOT EXISTS (\r\n\t\t\t\t\t --$BeginRegion: Self_Referencing and Cyclic_Referencing ForeignKeys\r\n\t\t\t\t\t SELECT FK1.name AS \"ForeignKeyName\", --\r\n\t\t\t\t\t\t\tOBJECT_SCHEMA_NAME(FK1.parent_object_id) + '.' + OBJECT_NAME(FK1.parent_object_id) AS \"ParentTableName\", --\r\n\t\t\t\t\t\t\tOBJECT_SCHEMA_NAME(FK1.referenced_object_id) + '.' + OBJECT_NAME(FK1.referenced_object_id) AS \"ReferTableName\" --\r\n\t\t\t\t\t FROM sys.foreign_keys AS FK1\r\n\t\t\t\t\t INNER JOIN sys.foreign_keys AS FK2 ON FK1.parent_object_id = FK2.referenced_object_id AND FK2.parent_object_id = FK1.referenced_object_id\r\n\t\t\t\t\t --$EndRegion: Self_Referencing and Cyclic_Referencing ForeignKeys\r\n\t\t\t\t\t WHERE FK1.object_id = FK.object_id OR FK2.object_id = FK.object_id\r\n\t\t\t\t );\r\n--$EndRegion: All PK-FK Dependencies Except \"Self_Referencing and Cyclic_Referencing ForeignKeys\" to Avoid Infinite Looping\r\n--\r\n--$BeginRegion: All Base Tables On Which Other Tables Depends\r\nDECLARE @NoDependencies TABLE (BaseObjectId INT NOT NULL, BaseSchema NVARCHAR(128) NOT NULL, BaseTable NVARCHAR(128) NOT NULL);\r\nINSERT INTO @NoDependencies (BaseObjectId, BaseSchema, BaseTable)\r\nSELECT T.object_id AS \"BaseObjectId\", OBJECT_SCHEMA_NAME(T.object_id) AS \"BaseSchema\", T.name AS \"BaseTable\"\r\nFROM sys.tables AS T\r\nWHERE T.type = 'U' AND NOT EXISTS (SELECT 1 FROM @Dependencies AS D WHERE D.ChildObjectId = T.object_id);\r\n--$EndRegion: All Base Tables On Which Other Tables Depends\r\n--\r\n;WITH _Recursive --Recursive CTE to Get Base Tables and Dependent Child Tables along with LVL\r\nAS (\r\n\t\tSELECT ND.BaseSchema AS \"SchemaName\", ND.BaseTable AS \"TableName\", 0 AS \"LVL\", --Level 0 Indicates Base Table\r\n\t\t\t   CAST('[' + ND.BaseSchema + '].[' + ND.BaseTable + '] (0)' AS VARCHAR(MAX)) AS \"DependsON\"\r\n\t\tFROM @NoDependencies AS ND\r\n\t\tUNION ALL\r\n\t\tSELECT D.ChildSchema AS \"SchemaName\", D.ChildTable AS \"TableName\", R.LVL + 1 AS \"LVL\", --LVL + 1 Indicates Child Table for Base Table\r\n\t\t\t   CAST((CASE WHEN R.LVL > 0 THEN R.DependsON + ' => ' ELSE '' END) + ('[' + D.ParentSchema + '].[' + D.ParentTable + '] ('+CAST(R.LVL AS VARCHAR(2))+')') AS VARCHAR(MAX)) --Visually Reflects Hierarchy\r\n\t\tFROM @Dependencies AS D\r\n\t\tINNER JOIN _Recursive AS R ON D.ParentSchema = R.SchemaName AND D.ParentTable = R.TableName\r\n   ) --\r\nINSERT INTO #HierarchyDetails ( SchemaName, TableName, LVL, DependencyPath )\r\nSELECT DISTINCT TOP(100) PERCENT R.SchemaName, R.TableName, R.LVL,\r\n\t   CASE WHEN R.LVL > 0 THEN R.DependsON + ' => ' + '[' + R.SchemaName + '].[' + R.TableName + '] ('+CAST(R.LVL AS VARCHAR(2))+')' ELSE R.DependsON END AS \"DependencyPath\"\r\nFROM _Recursive AS R\r\nORDER BY R.LVL ASC, R.SchemaName ASC, R.TableName ASC\r\nOPTION (MAXRECURSION 0);\r\n--\r\nIF @GetOnlyDirectRelatedTables = 0 AND @GetAllPossibleRelatedTables = 0\r\n\tSELECT SchemaName, TableName, LVL, DependencyPath \r\n\tFROM #HierarchyDetails\r\n\tORDER BY LVL ASC, SchemaName ASC, TableName ASC;\r\n--$EndRegion: Gets All Possible Paths Available for [@SchemaName].[@TableName]\r\n--\r\n--\r\n/* ===== ** LIST OF ONLY TABLES DIRECTLY RELATED TO [@SchemaName].[@TableName] ** =========================================================================== */\r\n--$BeginRegion: Gets List of All Tables which are Directly Related to [@SchemaName].[@TableName]\r\nIF @GetOnlyDirectRelatedTables = 1\r\nBEGIN\r\n\tIF OBJECT_ID('tempdb..#OnlyDirectRelatedTables', 'U') IS NOT NULL\r\n\t\tDROP TABLE #OnlyDirectRelatedTables;\r\n\tCREATE TABLE #OnlyDirectRelatedTables (SCHname VARCHAR(128) NULL, TBLname VARCHAR(128) NULL, LVL INT NULL);\r\n\t--\r\n\tINSERT INTO #OnlyDirectRelatedTables(SCHname, TBLname, LVL)\r\n\tSELECT HD.SchemaName, HD.TableName, MAX(HD.LVL) AS \"LVL\"\r\n\tFROM (\r\n\t\t\t SELECT DISTINCT --HP.SchemaName, HP.TableName, HP.LVL, N.R.value('.', 'varchar(255)'), --\r\n\t\t\t\t\tSUBSTRING(N.R.value('.', 'varchar(255)'), 1, CHARINDEX('].[', N.R.value('.', 'varchar(255)'), 1)) AS \"SchemaName\", --\r\n\t\t\t\t\tSUBSTRING(N.R.value('.', 'varchar(255)'), CHARINDEX('].[', N.R.value('.', 'varchar(255)'), 1) + 2, 255) AS \"TableName\"\r\n\t\t\t FROM (\r\n\t\t\t\t\t  SELECT SchemaName, TableName, LVL, DependencyPath\r\n\t\t\t\t\t  FROM #HierarchyDetails\r\n\t\t\t\t\t  WHERE REPLACE(REPLACE(DependencyPath, '[', ''), ']', '') LIKE '%' + ISNULL(@SchemaName, '') + '.' + ISNULL(@TableName + ' (', '') + '%'\r\n\t\t\t\t  ) AS HP\r\n\t\t\t CROSS APPLY (SELECT CAST('<r>' + REPLACE(REPLACE(DependencyPath, '&', '&amp;'), ' => ', '</r><r>') + '</r>' AS XML)) AS S(XMLCol)\r\n\t\t\t CROSS APPLY S.XMLCol.nodes('r') AS N(R)\r\n\t\t ) AS T\r\n\tINNER JOIN #HierarchyDetails AS HD \r\n\t\tON HD.SchemaName = REPLACE(REPLACE(T.SchemaName, '[', ''), ']', '') \r\n\t\t\tAND HD.TableName = REPLACE(REPLACE(SUBSTRING(T.TableName, 1, CHARINDEX('] (', T.TableName, 1)), '[', ''), ']', '')\r\n\tGROUP BY HD.SchemaName, HD.TableName\r\n\tORDER BY MAX(HD.LVL) ASC, HD.SchemaName ASC, HD.TableName ASC;\r\n\t--\r\n\t--$BeginRegion: ResultSet #1 when @GetOnlyDirectRelatedTables = 1\r\n\tSELECT SchemaName, TableName, LVL, DependencyPath \r\n\tFROM #HierarchyDetails\r\n\tWHERE REPLACE(REPLACE(DependencyPath, '[', ''), ']', '') LIKE '%' + ISNULL(@SchemaName, '') + '.' + ISNULL(@TableName + ' (', '') + '%'\r\n\tORDER BY LVL ASC, SchemaName ASC, TableName ASC;\r\n\t--$EndRegion: ResultSet #1 when @GetOnlyDirectRelatedTables = 1\r\n\t--\r\n\t--$BeginRegion: ResultSet #2 when @GetOnlyDirectRelatedTables = 1\r\n\tSELECT SCHname, TBLname, LVL\r\n\tFROM #OnlyDirectRelatedTables\r\n\tORDER BY LVL ASC, SCHname ASC, TBLname ASC;\r\n\t--$EndRegion: ResultSet #2 when @GetOnlyDirectRelatedTables = 1\r\nEND;\r\n--$EndRegion: Gets List of All Tables which are Directly Related to [@SchemaName].[@TableName]\r\n--\r\n--\r\n/* ===== ** LIST OF ALL TABLES DIRECTLY and INDIRECTLY RELATED TO [@SchemaName].[@TableName] ** ============================================================= */\r\n--$BeginRegion: Gets List of All Tables which are Directly and InDirectly Related to [@SchemaName].[@TableName]\r\nIF @GetAllPossibleRelatedTables = 1\r\nBEGIN\r\n\tIF OBJECT_ID('tempdb..#AllPossibleRelatedTables', 'U') IS NOT NULL\r\n\t\tDROP TABLE #AllPossibleRelatedTables;\r\n\tCREATE TABLE #AllPossibleRelatedTables (SCHname VARCHAR(128) NULL, TBLname VARCHAR(128) NULL, LVL INT NULL, FLG BIT NULL DEFAULT (0));\r\n\t--\r\n\tWHILE @SchemaName IS NOT NULL AND @TableName IS NOT NULL\r\n\tBEGIN\r\n\t\tINSERT INTO #AllPossibleRelatedTables(SCHname, TBLname, LVL, FLG)\r\n\t\tSELECT HD.SchemaName, HD.TableName, MAX(HD.LVL) AS \"LVL\", 0 AS FLG\r\n\t\tFROM (\r\n\t\t\t\tSELECT DISTINCT --HP.SchemaName, HP.TableName, HP.LVL, N.R.value('.', 'varchar(255)'), --\r\n\t\t\t\t\tSUBSTRING(N.R.value('.', 'varchar(255)'), 1, CHARINDEX('].[', N.R.value('.', 'varchar(255)'), 1)) AS \"SchemaName\", --\r\n\t\t\t\t\tSUBSTRING(N.R.value('.', 'varchar(255)'), CHARINDEX('].[', N.R.value('.', 'varchar(255)'), 1) + 2, 255) AS \"TableName\"\r\n\t\t\t\tFROM (\r\n\t\t\t\t\t\tSELECT SchemaName, TableName, LVL, DependencyPath\r\n\t\t\t\t\t\tFROM #HierarchyDetails\r\n\t\t\t\t\t\tWHERE REPLACE(REPLACE(DependencyPath, '[', ''), ']', '') LIKE '%' + ISNULL(@SchemaName, '') + '.' + ISNULL(@TableName + ' (', '') + '%'\r\n\t\t\t\t\t\t) AS HP\r\n\t\t\t\tCROSS APPLY (SELECT CAST('<r>' + REPLACE(REPLACE(DependencyPath, '&', '&amp;'), ' => ', '</r><r>') + '</r>' AS XML)) AS S(XMLCol)\r\n\t\t\t\tCROSS APPLY S.XMLCol.nodes('r') AS N(R)\r\n\t\t\t\t) AS T\r\n\t\tINNER JOIN #HierarchyDetails AS HD \r\n\t\t\tON HD.SchemaName = REPLACE(REPLACE(T.SchemaName, '[', ''), ']', '') \r\n\t\t\t\tAND HD.TableName = REPLACE(REPLACE(SUBSTRING(T.TableName, 1, CHARINDEX('] (', T.TableName, 1)), '[', ''), ']', '')\r\n\t\tWHERE NOT EXISTS (SELECT 1 FROM #AllPossibleRelatedTables WHERE SCHname = HD.SchemaName AND TBLname = HD.TableName)\r\n\t\tGROUP BY HD.SchemaName, HD.TableName\r\n\t\tORDER BY MAX(HD.LVL) ASC, HD.SchemaName ASC, HD.TableName ASC;\r\n\t\t--\r\n\t\tUPDATE #AllPossibleRelatedTables SET FLG = 1 WHERE SCHname = @SchemaName AND TBLname = @TableName;\r\n\t\tSELECT @SchemaName = NULL, @TableName = NULL;\r\n\t\tSELECT TOP (1) @SchemaName = SCHname, @TableName = TBLname FROM #AllPossibleRelatedTables WHERE FLG = 0 ORDER BY FLG;\r\n\tEND;\r\n\t--\r\n\t--$BeginRegion: ResultSet #1 when @GetAllPossibleRelatedTables = 1\r\n\tSELECT HD.SchemaName, HD.TableName, HD.LVL, HD.DependencyPath\r\n\tFROM #AllPossibleRelatedTables AS RT\r\n\tINNER JOIN #HierarchyDetails AS HD ON HD.SchemaName = RT.SCHname AND HD.TableName = RT.TBLname\r\n\t--$EndRegion: ResultSet #1 when @GetAllPossibleRelatedTables = 1\r\n\t--\r\n\t--$BeginRegion: ResultSet #2 when @GetAllPossibleRelatedTables = 1\r\n\tSELECT SCHname, TBLname, LVL\r\n\tFROM #AllPossibleRelatedTables\r\n\tORDER BY LVL ASC, SCHname ASC, TBLname ASC;\r\n\t--$EndRegion: ResultSet #2 when @GetAllPossibleRelatedTables = 1\r\nEND;\r\n--$EndRegion: Gets List of All Tables which are Directly and InDirectly Related to [@SchemaName].[@TableName]",
  "placeholders": [
    {
      "name": "SchName",
      "defaultValue": " "
    },
    {
      "name": "TblName",
      "defaultValue": " "
    }
  ]
}