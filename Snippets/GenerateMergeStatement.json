{
  "id": "264cbb75-fb36-4a19-aa73-f63a0eada290",
  "prefix": "GenerateMergeStatement",
  "description": "Generating Merge Statement for Source and Destination v4",
  "body": "/* =============================================================================================================================================================\r\n-- Database\t\t: Source Database\r\n-- Script\t\t: Generating Merge Statement for Source and Destination v4\r\n-- Note: Source Server CAN be Local or Linked Server.\r\n--\t\t**But Target Server CANNOT be Linked Server (i.e., Merge Statement Cannot Write Data in Target If It is a Linked Server).\r\n--\t\tSo, We need to create a Merge Statement using linked Server (with Data Access) as Source for referencing the Data but not for inserting the Data.\r\n--\t\tAnd We Need to Execute the Query in the Subscriber Server or in the Target Server where exactly you need to Write(DML) to Table Data.\r\n============================================================================================================================================================= */\r\n--\r\nDECLARE --\r\n\t@SourceServer AS VARCHAR(256) = '$SourceLinkedServer$', -- Source Can Be LinkedServer Where Data Can Be Read But Target Cannot Be LinkedServer.\r\n\t@SourceDatabase AS VARCHAR(256) = '$SourceDatabase$',\r\n\t@TargetDatabase AS VARCHAR(256) = '$TargetDatabase$',\r\n\t@SourceSchema AS VARCHAR(256) = '$SourceSchema$',\r\n\t@TargetSchema AS VARCHAR(256) = '$TargetSchema$',\r\n\t@SourceTable AS VARCHAR(256) = '$SourceTable$',\r\n\t@TargetTable AS VARCHAR(256) = '$TargetTable$';\r\n--\r\nDECLARE --To Include/Exclude Statements for Insert, Update, Delete\r\n\t@IncludeInsert INT = 1, -- 1 = Included | 0 = Excluded\r\n\t@IncludeUpdate INT = 1, -- 1 = Included | 0 = Excluded\r\n\t@IncludeDelete INT = 1; -- 1 = Included | 0 = Excluded\r\n--AS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\t-- Assumptions\r\n\t-- The names of the columns are the same in both tables.\r\n\t-- There is an identity column or a primary key\r\n\tDECLARE @SQLstring AS NVARCHAR(MAX);\r\n\r\n\t--$BeginRegion: Source and Target Objects Check\r\n\tDECLARE @ReturnINT INT, @ReturnTXT VARCHAR(256);\r\n\t----$BeginRegion: Source Server Check\r\n\tIF TRIM(@SourceServer) = ''\r\n\t\tSET @SourceServer = NULL;\r\n\tIF @SourceServer IS NOT NULL\r\n\tBEGIN\r\n\t\tSET @SQLstring = --\r\n\t\tN'IF EXISTS (SELECT * FROM master.sys.servers WHERE name = ''' + @SourceServer + N''')\r\n\t\t\tIF EXISTS (SELECT * FROM master.sys.servers WHERE name = ''' + @SourceServer + N''' AND is_data_access_enabled = 1)\r\n\t\t\t\tSET @ReturnOUT1 = 0;\r\n\t\t\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Source Server Exists But Data Access Is Not Enabled..!''; END;\r\n\t\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Source Server Does Not Exists..!''; END;';\r\n\t\tEXECUTE sys.sp_executesql @CMD = @SQLstring, @PARAM = N'@ReturnOUT1 INT OUTPUT, @ReturnOUT2 VARCHAR(256) OUTPUT', @ReturnOUT1 = @ReturnINT OUTPUT, @ReturnOUT2 = @ReturnTXT OUTPUT;\r\n\t\tIF @ReturnINT = 1\r\n\t\tBEGIN\r\n\t\t\tSELECT @ReturnTXT AS \"ErrorMessage..!\";\r\n\t\t\tRAISERROR(@ReturnTXT, 16, 1) WITH NOWAIT;\r\n\t\t\tRETURN;\t    \r\n\t\tEND;\r\n\tEND;\r\n\t----$EndRegion: Source Server Check\r\n\t--\r\n\t----$BeginRegion: Source Object Check\r\n\tSET @SQLstring = --\r\n\tN'IF EXISTS (SELECT * FROM ' + ISNULL(@SourceServer + '.', '') + N'master.sys.databases WHERE name = ''' + @SourceDatabase + N''')\r\n\t\tIF EXISTS (SELECT * FROM ' + ISNULL(@SourceServer + '.', '') + @SourceDatabase + N'.INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = ''' + @SourceSchema + N''')\r\n\t\t\tIF EXISTS (SELECT * FROM ' + ISNULL(@SourceServer + '.', '') + @SourceDatabase + N'.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''' + @SourceSchema + N''' AND TABLE_NAME = ''' + @SourceTable + N''')\r\n\t\t\t\tSET @ReturnOUT1 = 0;\r\n\t\t\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Source Database And Source Schema Exists But Source Table Does Not Exists..!''; END;\r\n\t\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Source Database Exists But Source Schema Does Not Exists..!''; END;\r\n\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Source Database Does Not Exists..!''; END;';\r\n\tEXECUTE sys.sp_executesql @CMD = @SQLstring, @PARAM = N'@ReturnOUT1 INT OUTPUT, @ReturnOUT2 VARCHAR(256) OUTPUT', @ReturnOUT1 = @ReturnINT OUTPUT, @ReturnOUT2 = @ReturnTXT OUTPUT;\r\n\tIF @ReturnINT = 1\r\n\tBEGIN\r\n\t\tSELECT @ReturnTXT AS \"ErrorMessage..!\";\r\n\t\tRAISERROR(@ReturnTXT, 16, 1) WITH NOWAIT;\r\n\t\tRETURN;\t    \r\n\tEND;\r\n\t----$EndRegion: Source Object Check\r\n\t--\r\n\t----$BeginRegion: Target Object Check\r\n\tSET @SQLstring = --\r\n\tN'IF EXISTS (SELECT * FROM sys.databases WHERE name = ''' + @TargetDatabase + N''')\r\n\t\tIF EXISTS (SELECT * FROM ' + @TargetDatabase + N'.INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = ''' + @TargetSchema + N''')\r\n\t\t\tIF EXISTS (SELECT * FROM ' + @TargetDatabase + N'.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''' + @TargetSchema + N''' AND TABLE_NAME = ''' + @TargetTable + N''')\r\n\t\t\t\tSET @ReturnOUT1 = 0;\r\n\t\t\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Target Database And Target Schema Exists But Target Table Does Not Exists..!''; END;\r\n\t\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Target Database Exists But Target Schema Does Not Exists..!''; END;\r\n\tELSE BEGIN SET @ReturnOUT1 = 1; SET @ReturnOUT2 = ''Target Database Does Not Exists..!''; END;';\r\n\tEXECUTE sys.sp_executesql @CMD = @SQLstring, @PARAM = N'@ReturnOUT1 INT OUTPUT, @ReturnOUT2 VARCHAR(256) OUTPUT', @ReturnOUT1 = @ReturnINT OUTPUT, @ReturnOUT2 = @ReturnTXT OUTPUT;\r\n\tIF @ReturnINT = 1\r\n\tBEGIN\r\n\t\tSELECT @ReturnTXT AS \"ErrorMessage..!\";\r\n\t\tRAISERROR(@ReturnTXT, 16, 1) WITH NOWAIT;\r\n\t\tRETURN;\t    \r\n\tEND;\r\n\t----$EndRegion: Target Object Check\r\n\t--$EndRegion: Source and Target Objects Check\r\n\r\n\tDECLARE @Columns TABLE\r\n\t(\r\n\t\tColId INT NULL,\r\n\t\tColumnName VARCHAR(256) NULL\r\n\t);\r\n\t--\r\n\tDECLARE @ColumnList VARCHAR(MAX);\r\n\tDECLARE @UnequalList VARCHAR(MAX);\r\n\tDECLARE @EqualList VARCHAR(MAX);\r\n\tDECLARE @InsertList VARCHAR(MAX);\r\n\t--\r\n\tDECLARE @MatchColumns AS TABLE\r\n\t(\r\n\t\tColumnName VARCHAR(256) NULL\r\n\t);\r\n\t--\r\n\tDECLARE @MatchOnList AS VARCHAR(MAX);\r\n\t--\r\n\t--#BeginRegion: To Get All Columns in the Table\r\n\t----Exclude the timestamp column\r\n\tSET @SQLstring --\r\n\t\t= N'SELECT ORDINAL_POSITION, COLUMN_NAME' + CHAR(10) --\r\n\t\t  + N'FROM ' + ISNULL(@SourceServer + '.', '') + @SourceDatabase + N'.INFORMATION_SCHEMA.COLUMNS' + CHAR(10) --\r\n\t\t  + N'WHERE TABLE_SCHEMA = ''' + @SourceSchema + N''' AND TABLE_NAME = ''' + @SourceTable + N'''' + CHAR(10) --\r\n\t\t  + N'\tAND DATA_TYPE != ''Timestamp''' + CHAR(10) --\r\n\t\t  + N'ORDER BY ORDINAL_POSITION;';\r\n\t--\r\n\tINSERT @Columns\r\n\t(\r\n\t\tColId,\r\n\t\tColumnName\r\n\t)\r\n\tEXECUTE (@SQLstring);\r\n\t--#EndRegion: To Get All Columns in the Table\r\n\t--\r\n\t--Criteria:\r\n\t--Get the PrimaryKey Columns if defined for Condition Check.\r\n\t--If PrimaryKey is not defined, Then Check For Identity Column for Condition Check.\r\n\t--\r\n\tDELETE @MatchColumns\r\n\tWHERE 1 = 1;\r\n\t--\r\n\t--#BeginRegion: Get the PrimaryKey Columns if Exists\r\n\tBEGIN\r\n\t\tSET @SQLstring --\r\n\t\t\t= N'SELECT KCU.COLUMN_NAME ' + CHAR(10) --\r\n\t\t\t\t+ N'FROM ' + ISNULL(@SourceServer + '.', '') + @SourceDatabase + N'.INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU' + CHAR(10) --\r\n\t\t\t\t+ N'INNER JOIN ' + ISNULL(@SourceServer + '.', '') + @SourceDatabase + N'.INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC ON TC.CONSTRAINT_NAME = KCU.CONSTRAINT_NAME' + CHAR(10) --\r\n\t\t\t\t+ N'WHERE TC.TABLE_SCHEMA = ''' + @SourceSchema + N''' AND TC.TABLE_NAME = ''' + @SourceTable + N'''' + CHAR(10) --\r\n\t\t\t\t+ N'\tAND TC.CONSTRAINT_TYPE = ''Primary Key''' + CHAR(10) --\r\n\t\t\t\t+ N'ORDER BY KCU.ORDINAL_POSITION;';\r\n\t\t--\r\n\t\tINSERT INTO @MatchColumns ( ColumnName )\r\n\t\tEXECUTE (@SQLstring); \r\n\t\t--\r\n\tEND;\r\n\t--#EndRegion: Get the PrimaryKey Columns if Exists\r\n\t--\r\n\t--#BeginRegion: Get Identity Column If Primary Key Doesn't  Exists\r\n\tIF NOT EXISTS (SELECT 1 FROM @MatchColumns)\r\n\tBEGIN\r\n\t\tSET @SQLstring --\r\n\t\t\t= N'SELECT COLUMN_NAME ' + CHAR(10) --\r\n\t\t\t  + N'FROM ' + ISNULL(@SourceServer + '.', '') + @SourceDatabase + N'.' + N'INFORMATION_SCHEMA.COLUMNS' + CHAR(10) --\r\n\t\t\t  + N'WHERE TABLE_SCHEMA = ''' + @SourceSchema + N''' AND TABLE_NAME = ''' + @SourceTable + N'''' + CHAR(10) --\r\n\t\t\t  + N'\tAND COLUMNPROPERTY(OBJECT_ID(TABLE_NAME), COLUMN_NAME, ''IsIdentity'') = 1;';\r\n\t\t--\r\n\t\tINSERT INTO @MatchColumns ( ColumnName )\r\n\t\tEXECUTE (@SQLstring);\r\n\t\t--\r\n\tEND;\r\n\t--#EndRegion: Get Identity Column If Primary Key Doesn't  Exists\r\n\t--\r\n\t--#BeginRegion: MatchOnList Coalesce String\r\n\tSELECT @MatchOnList = COALESCE(@MatchOnList + ' AND T.[' + ColumnName + '] = S.[' + ColumnName + ']', 'T.[' + ColumnName + '] = S.[' + ColumnName + ']')\r\n\tFROM @MatchColumns;\r\n\t--\r\n\t----If Tables Doesn't have Both PrimaryKey and Identity Column, then:\r\n\tIF (@MatchOnList IS NULL)\r\n\tBEGIN\r\n\t\tSET @MatchOnList = 'T.<TargetColumnName> = S.<SourceColumnName>';\r\n\tEND;\r\n\t--#EndRegion: MatchOnList Coalesce String\r\n\r\n\t-- coalesce the columns\r\n\tSET @ColumnList = NULL;\r\n\r\n\tSELECT @ColumnList = COALESCE(@ColumnList + ', [' + ColumnName + ']', '[' + ColumnName + ']')\r\n\tFROM @Columns\r\n\tORDER BY ColId;\r\n\r\n\t-- coalesce the unequal columns (used to locate changes)\r\n\tSET @UnequalList = NULL;\r\n\r\n\tSELECT @UnequalList = COALESCE(@UnequalList + ' OR T.[' + c.ColumnName + '] != S.[' + c.ColumnName + ']', 'T.[' + c.ColumnName + '] != S.[' + c.ColumnName + ']')\r\n\tFROM @Columns AS c\r\n\tWHERE c.ColumnName NOT IN ( SELECT ColumnName FROM @MatchColumns );\t--Excluded the PK / Identity Columns\r\n\r\n\t-- coalesce the equal columns (used to update the target)\r\n\tSET @EqualList = NULL;\r\n\r\n\tSELECT @EqualList = COALESCE(@EqualList + ', T.[' + c.ColumnName + '] = S.[' + c.ColumnName + ']', 'T.[' + c.ColumnName + '] = S.[' + c.ColumnName + ']')\r\n\tFROM @Columns AS c\r\n\tWHERE c.ColumnName NOT IN ( SELECT ColumnName FROM @MatchColumns );\t--Excluded the PK / Identity Columns\r\n\r\n\t-- coalesce the insert columns (used to insert the target)\r\n\tSET @InsertList = NULL;\r\n\r\n\tSELECT @InsertList = COALESCE(@InsertList + ', S.[' + ColumnName + ']', 'S.[' + ColumnName + ']')\r\n\tFROM @Columns;\r\n\r\n\t/* Begin : Printing the Merge Statement ***********************************************************************************************/\r\n\tIF @SourceServer IS NOT NULL\r\n\t\tPRINT '--**Note: Make Sure \"' + @SourceServer + '\" is Configured as Linked Server with Data Read Access';\r\n\tPRINT 'USE ' + @TargetDatabase + ';' + CHAR(10) --\r\n\t\t+ 'GO';\r\n\r\n\t--\r\n\tEXEC ('IF EXISTS \r\n\t(\r\n\t\tSELECT 1\r\n\t\tFROM ' + @TargetDatabase + '.sys.identity_columns AS IC\r\n\t\tINNER JOIN ' + @TargetDatabase + '.sys.tables AS T ON T.object_id = IC.object_id\r\n\t\tINNER JOIN ' + @TargetDatabase + '.sys.schemas AS S ON S.schema_id = T.schema_id\r\n\t\tWHERE S.name = ''' + @TargetSchema + ''' AND T.name = ''' + @TargetTable + '''\r\n\t)\r\n\tBEGIN\r\n\t\tPRINT ''--''\r\n\t\tPRINT ''SET IDENTITY_INSERT [' + @TargetDatabase + '].['+@TargetSchema+'].[' + @TargetTable + '] ON;''\r\n\tEND' );\r\n\r\n\t--\r\n\tPRINT '--';\r\n\t--\r\n\tPRINT 'MERGE INTO ' + QUOTENAME(@TargetDatabase) + '.' + QUOTENAME(@TargetSchema) + '.' + QUOTENAME(@TargetTable) + ' as T --TargetTable' + CHAR(10) --\r\n\t\t  + 'USING ' + ISNULL(@SourceServer + '.', '') + QUOTENAME(@SourceDatabase) + '.' + QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable) + ' as S --SourceTable' + CHAR(10) --\r\n\t\t  + 'ON ' + @MatchOnList;\r\n\r\n\t--\r\n\tIF @IncludeUpdate = 1\r\n\tBEGIN\r\n\t\tPRINT '\tWHEN MATCHED AND ' + @UnequalList;\r\n\t\tPRINT '\t\tTHEN UPDATE SET ' + @EqualList;\r\n\tEND;\r\n\r\n\t--\r\n\tIF @IncludeInsert = 1\r\n\tBEGIN\r\n\t\tPRINT '\tWHEN NOT MATCHED BY TARGET ';\r\n\t\tPRINT '\t\tTHEN INSERT (' + @ColumnList + ')';\r\n\t\tPRINT '\t\t\t VALUES (' + @InsertList + ')';\r\n\tEND;\r\n\r\n\t--\r\n\tIF @IncludeDelete = 1\r\n\tBEGIN\r\n\t\tPRINT '\tWHEN NOT MATCHED BY SOURCE ';\r\n\t\tPRINT '\t\tTHEN DELETE';\r\n\tEND;\r\n\t--Merge Statement should be ended with SemiColumn \";\"\r\n\tPRINT ';';\r\n\r\n\t--\r\n\tEXEC ('IF EXISTS \r\n\t(\r\n\t\tSELECT 1\r\n\t\tFROM ' + @TargetDatabase + '.sys.identity_columns AS IC\r\n\t\tINNER JOIN ' + @TargetDatabase + '.sys.tables AS T ON T.object_id = IC.object_id\r\n\t\tINNER JOIN ' + @TargetDatabase + '.sys.schemas AS S ON S.schema_id = T.schema_id\r\n\t\tWHERE S.name = ''' + @TargetSchema + ''' AND T.name = ''' + @TargetTable + '''\r\n\t)\r\n\tBEGIN\r\n\t\tPRINT ''--''\r\n\t\tPRINT ''SET IDENTITY_INSERT [' + @TargetDatabase + '].[' + @TargetSchema + '].[' + @TargetTable + '] OFF;''\r\n\tEND' );\r\n\r\n\t--\r\n\t/* End : Printing the Merge Statement *************************************************************************************************/\r\n\t--\r\n\tSET NOCOUNT OFF;\r\n--\r\nEND;",
  "placeholders": [
    {
      "name": "SourceLinkedServer",
      "defaultValue": "DELL7548"
    },
    {
      "name": "SourceDatabase",
      "defaultValue": "AdventureWorks2019"
    },
    {
      "name": "TargetDatabase",
      "defaultValue": "AdventureWorksNew"
    },
    {
      "name": "SourceSchema",
      "defaultValue": "Sales"
    },
    {
      "name": "TargetSchema",
      "defaultValue": "Sales"
    },
    {
      "name": "SourceTable",
      "defaultValue": "SalesOrderHeader"
    },
    {
      "name": "TargetTable",
      "defaultValue": "SalesOrderHeader"
    }
  ]
}