{
  "id": "747ce465-7b42-4ddb-9984-b8f782ea962f",
  "prefix": "GetTablesHierarchyDetailed_v2",
  "description": "Get Detailed Hierarchy of Tables using Existing Foreign Keys v2",
  "body": "/* =============================================================================================================================================================\r\n-- Server\t\t: LOCALSERVER\r\n-- Database\t\t: USER Database\r\n-- Script\t\t: GetTablesHierarchyDetailed_v2\r\n-- Description\t: Get Detailed Hierarchy of Tables using Existing Foreign Keys\r\n-- **Note: Self Reference Foreign Keys will be Ignored to Avoid Infinite Looping\r\n============================================================================================================================================================= */\r\nSET NOCOUNT ON;\r\nDECLARE @SchemaName VARCHAR(128) = NULL; --Optional\r\nDECLARE @TableName VARCHAR(128) = NULL; --Optional\r\n--\r\nDECLARE @GetDirectDependentTables BIT = 0; -- 0 = Disabled (Default) | 1 = Enabled\r\nDECLARE @GetAllDependentTables BIT = 0; -- 0 = Disabled (Default) | 1 = Enabled\r\n--\r\n/* ===== ** DO NOT CHANGE CODE BELOW FROM HERE ** =========================================================================================================== */\r\nIF (@GetDirectDependentTables = 1 OR @GetAllDependentTables = 1) AND (@SchemaName IS NULL OR @TableName IS NULL)\r\nBEGIN\r\n\tDECLARE @ErrMsg VARCHAR(4000);\r\n\tSET @ErrMsg = 'To Get List of All Tables which are Directly and InDirectly Related to @SCH and @TBL,' + CHAR(10) --\r\n\t\t\t\t+ '\tProvide Both (@SchemaName AND @TableName) OR Disable Both @GetDirectDependentTables and @GetAllDependentTables.!'\r\n\tRAISERROR(@ErrMsg, 11, 0) WITH NOWAIT;\r\n\tRETURN;\r\nEND;\r\n--\r\n--$BeginRegion: Gets All Different Paths Available for All Tables\r\nIF OBJECT_ID('tempdb..#HierarchyDetails', 'U') IS NOT NULL\r\n\tDROP TABLE #HierarchyDetails;\r\n--\r\nCREATE TABLE #HierarchyDetails\r\n(\r\n\tSchemaName NVARCHAR(128)NOT NULL,\r\n\tTableName NVARCHAR(128) NOT NULL,\r\n\tLVL INT NOT NULL,\r\n\tDependencyPath NVARCHAR(4000) NOT NULL,\r\n\tCONSTRAINT PK_HierarchyDetails PRIMARY KEY CLUSTERED (LVL, SchemaName, TableName, DependencyPath)\r\n);\r\n--\r\n;WITH _Dependencies -- Get Objects with FK Dependencies\r\nAS (\r\n\t\tSELECT C.CONSTRAINT_NAME AS \"ForeignKeyName\",\r\n\t\t\t   FK.TABLE_SCHEMA AS \"OBJECTschema\", FK.TABLE_NAME AS \"OBJECTname\",\r\n\t\t\t   PK.TABLE_SCHEMA AS \"DEPENDSschema\", PK.TABLE_NAME AS \"DEPENDSname\"\r\n\t\tFROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS C\r\n\t\tINNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS FK ON C.CONSTRAINT_NAME=FK.CONSTRAINT_NAME\r\n\t\tINNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS PK ON C.UNIQUE_CONSTRAINT_NAME=PK.CONSTRAINT_NAME\r\n\t\tWHERE NOT EXISTS\r\n\t\t\t(\r\n\t\t\t\tSELECT FK1.name AS ForeignKeyName,\r\n\t\t\t\t\t   OBJECT_SCHEMA_NAME(FK1.parent_object_id)+'.'+OBJECT_NAME(FK1.parent_object_id) AS MainTableName,\r\n\t\t\t\t\t   OBJECT_SCHEMA_NAME(FK1.referenced_object_id)+'.'+OBJECT_NAME(FK1.referenced_object_id) AS ReferTableName\r\n\t\t\t\tFROM sys.foreign_keys AS FK1\r\n\t\t\t\tINNER JOIN sys.foreign_keys AS FK2 ON FK1.parent_object_id = FK2.referenced_object_id AND FK2.parent_object_id=FK1.referenced_object_id\r\n\t\t\t\tWHERE FK1.name = C.CONSTRAINT_NAME OR FK2.name = C.CONSTRAINT_NAME\r\n\t\t\t)\r\n   ),--\r\n_NoDependencies -- The First Level Objects are with No Dependencies\r\nAS (\r\n\t\tSELECT T.TABLE_SCHEMA AS \"OBJECTschema\", T.TABLE_NAME AS \"OBJECTname\"\r\n\t\tFROM INFORMATION_SCHEMA.TABLES AS T\r\n\t\tWHERE T.TABLE_TYPE = 'BASE TABLE' -- Considering Tables Only But Not Views\r\n\t\t\tAND NOT EXISTS (SELECT 1 FROM _Dependencies AS D WHERE D.OBJECTschema = T.TABLE_SCHEMA AND D.OBJECTname = T.TABLE_NAME)\r\n   ),--\r\n_Recursive -- Recursive CTE to Get Dependencies\r\nAS (\r\n\t\tSELECT ND.OBJECTschema AS \"SchemaName\", ND.OBJECTname AS \"TableName\", 0 AS \"LVL\", -- Level 0 Indicates Tables with No Dependencies\r\n\t\t\t   CAST('[' + ND.OBJECTschema + '].[' + ND.OBJECTname + '] (0)' AS VARCHAR(MAX)) AS \"DependsON\"\r\n\t\tFROM _NoDependencies AS ND\r\n\t\tUNION ALL\r\n\t\tSELECT D.OBJECTschema AS \"SchemaName\", D.OBJECTname AS \"TableName\", R.LVL + 1 AS \"LVL\",\r\n\t\t\t   CAST((CASE WHEN R.LVL > 0 THEN R.DependsON + ' => ' ELSE '' END) + ('[' + D.DEPENDSschema + '].[' + D.DEPENDSname + '] ('+CAST(R.LVL AS VARCHAR(2))+')') AS VARCHAR(MAX)) -- Visually Reflects Hierarchy\r\n\t\tFROM _Dependencies AS D\r\n\t\tINNER JOIN _Recursive AS R ON D.DEPENDSschema = R.SchemaName AND D.DEPENDSname = R.TableName\r\n   )--\r\nINSERT INTO #HierarchyDetails ( SchemaName, TableName, LVL, DependencyPath )\r\nSELECT DISTINCT TOP(100) PERCENT R.SchemaName, R.TableName, R.LVL,\r\n\t   CASE WHEN R.LVL > 0 THEN R.DependsON + ' => ' + '[' + R.SchemaName + '].[' + R.TableName + '] ('+CAST(R.LVL AS VARCHAR(2))+')' ELSE R.DependsON END AS \"DependencyPath\"\r\nFROM _Recursive AS R\r\nORDER BY R.LVL ASC, R.SchemaName ASC, R.TableName ASC\r\nOPTION (MAXRECURSION 0);\r\n--\r\nSELECT SchemaName, TableName, LVL, DependencyPath FROM #HierarchyDetails\r\nORDER BY LVL ASC, SchemaName ASC, TableName ASC;\r\n--$EndRegion: Gets All Different Paths Available for All Tables\r\n--\r\n--\r\n--$BeginRegion: Gets List of All Tables which are Directly Related to @SCH and @TBL\r\nIF @GetDirectDependentTables = 1\r\nBEGIN\r\n\tIF OBJECT_ID('tempdb..#DirectlyMappedTables', 'U') IS NOT NULL\r\n\t\tDROP TABLE #DirectlyMappedTables;\r\n\tCREATE TABLE #DirectlyMappedTables (SCHname VARCHAR(128) NULL, TBLname VARCHAR(128) NULL, LVL INT NULL);\r\n\t--\r\n\tINSERT INTO #DirectlyMappedTables(SCHname, TBLname, LVL)\r\n\tSELECT HD.SchemaName, HD.TableName, MAX(HD.LVL) AS \"LVL\"\r\n\tFROM (\r\n\t\t\t SELECT DISTINCT --HP.SchemaName, HP.TableName, HP.LVL, N.R.value('.', 'varchar(255)'), --\r\n\t\t\t\t\tSUBSTRING(N.R.value('.', 'varchar(255)'), 1, CHARINDEX('].[', N.R.value('.', 'varchar(255)'), 1)) AS \"SchemaName\", --\r\n\t\t\t\t\tSUBSTRING(N.R.value('.', 'varchar(255)'), CHARINDEX('].[', N.R.value('.', 'varchar(255)'), 1) + 2, 255) AS \"TableName\"\r\n\t\t\t FROM (\r\n\t\t\t\t\t  SELECT SchemaName, TableName, LVL, DependencyPath\r\n\t\t\t\t\t  FROM #HierarchyDetails\r\n\t\t\t\t\t  WHERE REPLACE(REPLACE(DependencyPath, '[', ''), ']', '') LIKE '%' + ISNULL(@SchemaName, '') + '.' + ISNULL(@TableName + ' (', '') + '%'\r\n\t\t\t\t  ) AS HP\r\n\t\t\t CROSS APPLY (SELECT CAST('<r>' + REPLACE(REPLACE(DependencyPath, '&', '&amp;'), ' => ', '</r><r>') + '</r>' AS XML)) AS S(XMLCol)\r\n\t\t\t CROSS APPLY S.XMLCol.nodes('r') AS N(R)\r\n\t\t ) AS T\r\n\tINNER JOIN #HierarchyDetails AS HD \r\n\t\tON HD.SchemaName = REPLACE(REPLACE(T.SchemaName, '[', ''), ']', '') \r\n\t\t\tAND HD.TableName = REPLACE(REPLACE(SUBSTRING(T.TableName, 1, CHARINDEX('] (', T.TableName, 1)), '[', ''), ']', '')\r\n\tGROUP BY HD.SchemaName, HD.TableName\r\n\tORDER BY MAX(HD.LVL) ASC, HD.SchemaName ASC, HD.TableName ASC;\r\n\t--\r\n\tSELECT SCHname, TBLname, LVL FROM #DirectlyMappedTables\r\n\tORDER BY LVL ASC, SCHname ASC, TBLname ASC;\r\nEND;\r\n--$EndRegion: Gets List of All Tables which are Directly Related to @SCH and @TBL\r\n--\r\n--\r\n--$BeginRegion: Gets List of All Tables which are Directly and InDirectly Related to @SCH and @TBL\r\nIF @GetAllDependentTables = 1\r\nBEGIN\r\n\tIF OBJECT_ID('tempdb..#OverAllMappedTables', 'U') IS NOT NULL\r\n\t\tDROP TABLE #OverAllMappedTables;\r\n\tCREATE TABLE #OverAllMappedTables (SCHname VARCHAR(128) NULL, TBLname VARCHAR(128) NULL, LVL INT NULL, FLG BIT NULL DEFAULT (0));\r\n\t--\r\n\tWHILE @SchemaName IS NOT NULL AND @TableName IS NOT NULL\r\n\tBEGIN\r\n\t\tINSERT INTO #OverAllMappedTables(SCHname, TBLname, LVL, FLG)\r\n\t\tSELECT HD.SchemaName, HD.TableName, MAX(HD.LVL) AS \"LVL\", 0 AS FLG\r\n\t\tFROM (\r\n\t\t\t\tSELECT DISTINCT --HP.SchemaName, HP.TableName, HP.LVL, N.R.value('.', 'varchar(255)'), --\r\n\t\t\t\t\tSUBSTRING(N.R.value('.', 'varchar(255)'), 1, CHARINDEX('].[', N.R.value('.', 'varchar(255)'), 1)) AS \"SchemaName\", --\r\n\t\t\t\t\tSUBSTRING(N.R.value('.', 'varchar(255)'), CHARINDEX('].[', N.R.value('.', 'varchar(255)'), 1) + 2, 255) AS \"TableName\"\r\n\t\t\t\tFROM (\r\n\t\t\t\t\t\tSELECT SchemaName, TableName, LVL, DependencyPath\r\n\t\t\t\t\t\tFROM #HierarchyDetails\r\n\t\t\t\t\t\tWHERE REPLACE(REPLACE(DependencyPath, '[', ''), ']', '') LIKE '%' + ISNULL(@SchemaName, '') + '.' + ISNULL(@TableName + ' (', '') + '%'\r\n\t\t\t\t\t\t) AS HP\r\n\t\t\t\tCROSS APPLY (SELECT CAST('<r>' + REPLACE(REPLACE(DependencyPath, '&', '&amp;'), ' => ', '</r><r>') + '</r>' AS XML)) AS S(XMLCol)\r\n\t\t\t\tCROSS APPLY S.XMLCol.nodes('r') AS N(R)\r\n\t\t\t\t) AS T\r\n\t\tINNER JOIN #HierarchyDetails AS HD \r\n\t\t\tON HD.SchemaName = REPLACE(REPLACE(T.SchemaName, '[', ''), ']', '') \r\n\t\t\t\tAND HD.TableName = REPLACE(REPLACE(SUBSTRING(T.TableName, 1, CHARINDEX('] (', T.TableName, 1)), '[', ''), ']', '')\r\n\t\tWHERE NOT EXISTS (SELECT 1 FROM #OverAllMappedTables WHERE SCHname = HD.SchemaName AND TBLname = HD.TableName)\r\n\t\tGROUP BY HD.SchemaName, HD.TableName\r\n\t\tORDER BY MAX(HD.LVL) ASC, HD.SchemaName ASC, HD.TableName ASC;\r\n\t\t--\r\n\t\tUPDATE #OverAllMappedTables SET FLG = 1 WHERE SCHname = @SchemaName AND TBLname = @TableName;\r\n\t\tSELECT @SchemaName = NULL, @TableName = NULL;\r\n\t\tSELECT TOP (1) @SchemaName = SCHname, @TableName = TBLname FROM #OverAllMappedTables WHERE FLG = 0 ORDER BY FLG;\r\n\tEND;\r\n\t--\r\n\tSELECT SCHname, TBLname, LVL FROM #OverAllMappedTables\r\n\tORDER BY LVL ASC, SCHname ASC, TBLname ASC;\r\nEND;\r\n--$EndRegion: Gets List of All Tables which are Directly and InDirectly Related to @SCH and @TBL"
}