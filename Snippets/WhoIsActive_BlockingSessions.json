{
  "id": "4211d096-4e16-42dc-b23c-21aa1f989c9b",
  "prefix": "WhoIsActive_BlockingSessions",
  "description": "Get Blocking Sessions Tree and Additional SPID Info from sp_WhoIsActive (By Adam Mechanic).",
  "body": "/* =============================================================================================================================================================\n-- Database\t\t: master\n-- Script\t\t: WhoIsActive_BlockingSessions\n-- Description\t: Get Blocking Sessions Tree and Additional SPID Info from sp_WhoIsActive (By Adam Mechanic).\n-- Usage\t\t: The Proc \"master.dbo.sp_WhoIsActive\" is required as PreRequisite. Refer Snippet: \"mvpAM_sp_WhoIsActive\"\n-- Refer Links\t: \n--\tsp_whoisactive\t: https://github.com/amachanic/sp_whoisactive\n--\tBlocking Tree\t: https://blog.sqlauthority.com/2020/04/20/sql-server-blocking-tree-identifying-blocking-chain-using-sql-scripts/\n============================================================================================================================================================= */\nSET NOCOUNT ON;\n--\nIF OBJECT_ID('tempdb..#WhoIsActiveSessions', 'U') IS NOT NULL\n\tDROP TABLE #WhoIsActiveSessions;\n--\nCREATE TABLE #WhoIsActiveSessions\n(\n\t[dd hh:mm:ss.mss] VARCHAR(8000) NULL,\n\tsession_id SMALLINT NOT NULL,\n\tsql_text XML NULL,\n\tsql_command XML NULL,\n\tlogin_name NVARCHAR(128) NOT NULL,\n\twait_info NVARCHAR(4000) NULL,\n\ttran_log_writes NVARCHAR(4000) NULL,\n\tCPU VARCHAR(30) NULL,\n\ttempdb_allocations VARCHAR(30) NULL,\n\ttempdb_current VARCHAR(30) NULL,\n\tblocking_session_id SMALLINT NULL,\n\treads VARCHAR(30) NULL,\n\twrites VARCHAR(30) NULL,\n\tphysical_reads VARCHAR(30) NULL,\n\tquery_plan XML NULL,\n\tused_memory VARCHAR(30) NULL,\n\tstatus VARCHAR(30) NOT NULL,\n\ttran_start_time DATETIME NULL,\n\topen_tran_count VARCHAR(30) NULL,\n\tpercent_complete VARCHAR(30) NULL,\n\thost_name NVARCHAR(128) NULL,\n\tdatabase_name NVARCHAR(128) NULL,\n\tprogram_name NVARCHAR(128) NULL,\n\tadditional_info XML NULL,\n\tstart_time DATETIME NOT NULL,\n\tlogin_time DATETIME NULL,\n\trequest_id INT NULL,\n\tcollection_time DATETIME NOT NULL\n);\n--\nEXEC master.dbo.sp_WhoIsActive --\n\t@get_outer_command = 1,\n\t@get_plans = 1,\n\t@get_transaction_info = 1,\n\t@get_additional_info = 1,\n\t@output_column_list = '[dd hh:mm:ss.mss][session_id][sql_text][sql_command][login_name][wait_info][tran_log_writes][CPU][tempdb_allocations][tempdb_current][blocking_session_id][reads][writes][physical_reads][query_plan][used_memory][status][tran_start_time][open_tran_count][percent_complete][host_name][database_name][program_name][additional_info][start_time][login_time][request_id][collection_time]',\n\t@destination_table = '#WhoIsActiveSessions';\n--\n;\nWITH\n\t_WIA_sessions (session_id, blocking_session_id)\nAS (\n\t   SELECT session_id,\n\t\t\t  ISNULL(blocking_session_id, 0) AS \"blocking_session_id\"\n\t   FROM #WhoIsActiveSessions\n   ),\n\t_Blocker_Sessions (session_id, blocking_session_id, B_lvl, Hierarchy, T_lvl)\nAS (\n\t   --$BeginRegion: Root Blocker Sessions\n\t   SELECT S.session_id,\n\t\t\t  S.blocking_session_id,\n\t\t\t  0 AS B_lvl,\n\t\t\t  CAST(S.session_id AS VARCHAR(MAX)) AS Hierarchy,\n\t\t\t  CAST(REPLICATE('0', 4 - LEN(CAST(S.session_id AS VARCHAR(8)))) + CAST(S.session_id AS VARCHAR(8)) AS VARCHAR(1000)) AS \"T_lvl\"\n\t   FROM _WIA_sessions AS S\n\t   WHERE (S.blocking_session_id = 0 OR S.blocking_session_id = S.session_id)\n\t\t\t AND EXISTS (SELECT * FROM _WIA_sessions AS R2 WHERE R2.blocking_session_id = S.session_id AND R2.blocking_session_id <> R2.session_id)\n\t   --$EndRegion: Root Blocker Sessions\n\t   UNION ALL\n\t   --$BeginRegion: Dependent Sessions on Root Blocker\n\t   SELECT S.session_id,\n\t\t\t  S.blocking_session_id,\n\t\t\t  B.B_lvl + 1 AS B_lvl,\n\t\t\t  CAST(CASE WHEN B.B_lvl > 0 THEN B.Hierarchy + ' => ' ELSE '' END + CAST(B.session_id AS VARCHAR(8)) AS VARCHAR(max)),\n\t\t\t  CAST(B.T_lvl + RIGHT(CAST((1000 + S.session_id) AS VARCHAR(100)), 4) AS VARCHAR(1000)) AS \"T_lvl\"\n\t   FROM _WIA_sessions AS S\n\t   INNER JOIN _Blocker_Sessions AS B ON S.blocking_session_id = B.session_id\n\t   WHERE S.blocking_session_id > 0 AND S.blocking_session_id <> S.session_id\n\t   --$EndRegion: Dependent Sessions on Root Blocker\n   )\nSELECT WIA.session_id AS \"SPID\", WIA.blocking_session_id AS \"BLKby\", --[BS].[LEVEL],\n\t   BS.B_lvl, CASE WHEN BS.B_lvl > 0 THEN BS.Hierarchy + ' => ' ELSE '' END + CAST(BS.session_id AS VARCHAR(8)) AS \"Blocking_Hierarchy\",\n\t   REPLICATE('|    ', LEN(BS.T_lvl) / 4 - 1) + CASE WHEN (LEN(BS.T_lvl) / 4 - 1) = 0 THEN '|| ' ELSE '>>  ' END + CAST(BS.session_id AS NVARCHAR(10)) AS \"Blocking_Tree\",\n\t   WIA.[dd hh:mm:ss.mss], WIA.sql_text AS \"SQL_Statement\", WIA.sql_command AS \"SQL_Batch\",\n\t   WIA.wait_info, WIA.tran_log_writes,\n\t   WIA.tempdb_allocations, WIA.tempdb_current,\n\t   WIA.CPU, WIA.used_memory, WIA.reads, WIA.writes, WIA.physical_reads,\n\t   WIA.query_plan, WIA.additional_info,\n\t   WIA.status, WIA.percent_complete,\n\t   WIA.tran_start_time, WIA.open_tran_count,\t   \n\t   WIA.host_name, WIA.login_name, WIA.database_name, WIA.program_name,\n\t   WIA.request_id, WIA.start_time, WIA.login_time, WIA.collection_time\nFROM _Blocker_Sessions AS BS\nRIGHT OUTER JOIN #WhoIsActiveSessions AS WIA ON WIA.session_id = BS.session_id\nORDER BY ISNULL(BS.T_lvl, 9) ASC;\nGO"
}