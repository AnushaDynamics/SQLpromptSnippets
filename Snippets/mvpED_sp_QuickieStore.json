{
  "id": "238193b9-7cbf-4a0c-9fa2-452f2c7193bc",
  "prefix": "mvpED_sp_QuickieStore",
  "description": "sp_QuickieStore: Used to dig into Query Store data to find queries to tune",
  "body": "SET ANSI_NULLS ON;\r\nSET ANSI_PADDING ON;\r\nSET ANSI_WARNINGS ON;\r\nSET ARITHABORT ON;\r\nSET CONCAT_NULL_YIELDS_NULL ON;\r\nSET QUOTED_IDENTIFIER ON;\r\nSET IMPLICIT_TRANSACTIONS OFF;\r\nSET STATISTICS IO OFF;\r\nSET STATISTICS TIME OFF;\r\nGO\r\n\r\n/*\r\n\r\n ██████╗ ██╗   ██╗██╗ ██████╗██╗  ██╗██╗███████╗\r\n██╔═══██╗██║   ██║██║██╔════╝██║ ██╔╝██║██╔════╝\r\n██║   ██║██║   ██║██║██║     █████╔╝ ██║█████╗\r\n██║▄▄ ██║██║   ██║██║██║     ██╔═██╗ ██║██╔══╝\r\n╚██████╔╝╚██████╔╝██║╚██████╗██║  ██╗██║███████╗\r\n ╚══▀▀═╝  ╚═════╝ ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝╚══════╝\r\n                      \r\n███████╗████████╗ ██████╗ ██████╗ ███████╗██╗\r\n██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗██╔════╝██║\r\n███████╗   ██║   ██║   ██║██████╔╝█████╗  ██║\r\n╚════██║   ██║   ██║   ██║██╔══██╗██╔══╝  ╚═╝\r\n███████║   ██║   ╚██████╔╝██║  ██║███████╗██╗\r\n╚══════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝\r\n\r\nCopyright 2021 Darling Data, LLC\r\nhttps://www.erikdarlingdata.com/\r\n\r\nFor usage and licensing details, run:\r\nEXEC sp_QuickieStore\r\n    @help = 1;\r\n\r\nFor working through errors:\r\nEXEC sp_QuickieStore\r\n    @debug = 1;\r\n\r\nFor performance issues:\r\nEXEC sp_QuickieStore\r\n    @troubleshoot_performance = 1;\r\n\r\nFor support, head over to GitHub:\r\nhttps://github.com/erikdarlingdata/DarlingData\r\n\r\n*/\r\n\r\nCREATE OR ALTER PROCEDURE dbo.sp_QuickieStore\r\n(\r\n    @database_name sysname = NULL,\r\n    @sort_order varchar(20) = 'cpu',\r\n    @top bigint = 10,\r\n    @start_date datetime = NULL,\r\n    @end_date datetime = NULL,\r\n    @execution_count bigint = NULL,\r\n    @duration_ms bigint = NULL ,\r\n    @procedure_schema sysname = NULL,\r\n    @procedure_name sysname = NULL,\r\n    @include_plan_ids nvarchar(4000) = NULL,\r\n    @include_query_ids nvarchar(4000) = NULL,\r\n    @ignore_plan_ids nvarchar(4000) = NULL,\r\n    @ignore_query_ids nvarchar(4000) = NULL,\r\n    @query_text_search nvarchar(4000) = NULL,\r\n    @wait_filter varchar(20) = NULL,\r\n    @expert_mode bit = 0,\r\n    @format_output bit = 0,\r\n    @version varchar(30) = NULL OUTPUT,\r\n    @version_date datetime = NULL OUTPUT,\r\n    @help bit = 0,\r\n    @debug bit = 0,\r\n    @troubleshoot_performance bit = 0\r\n)\r\nWITH RECOMPILE\r\nAS\r\nBEGIN\r\n\r\nSET STATISTICS XML OFF;\r\nSET NOCOUNT, XACT_ABORT ON;\r\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\nBEGIN TRY\r\n\r\n/*\r\nIf this column doesn't exist, you're not on a good version of SQL Server\r\n*/\r\nIF NOT EXISTS\r\n   (\r\n       SELECT\r\n           1/0\r\n       FROM sys.all_columns AS ac\r\n       WHERE ac.object_id = OBJECT_ID(N'sys.dm_exec_query_stats', N'V')\r\n       AND   ac.name = N'total_spills'\r\n   )\r\nBEGIN\r\n    RAISERROR('This procedure only runs on supported versions of SQL Server:\r\n* 2016 SP2+\r\n* 2017 CU3+\r\n* 2019+\r\n* Probably Azure?', 11, 1) WITH NOWAIT;\r\n\r\n    RETURN;\r\nEND;\r\n\r\n/*\r\nThese are for your outputs.\r\n*/\r\nSELECT \r\n    @version = '1.92', \r\n    @version_date = '20211101';\r\n\r\n/*\r\nHelpful section! For help.\r\n*/\r\nIF @help = 1\r\nBEGIN\r\n\r\n    /*\r\n    Introduction\r\n    */\r\n    SELECT\r\n        introduction =\r\n           'hi, i''m sp_QuickieStore!' UNION ALL\r\n    SELECT 'you got me from https://www.erikdarlingdata.com/sp_quickiestore/' UNION ALL\r\n    SELECT 'i can be used to quickly grab misbehaving queries from query store' UNION ALL\r\n    SELECT 'the plan analysis is up to you; there will not be any XML shredding here' UNION ALL\r\n    SELECT 'so what can you do, and how do you do it? read below!';\r\n\r\n    /*\r\n    Parameters\r\n    */\r\n    SELECT\r\n        parameter_name =\r\n            ap.name,\r\n        data_type = t.name,\r\n        description =\r\n            CASE\r\n                ap.name\r\n                WHEN '@database_name' THEN 'the name of the database you want to look at query store in'\r\n                WHEN '@sort_order' THEN 'the runtime metric you want to prioritize results by'\r\n                WHEN '@top' THEN 'the number of queries you want to pull back'\r\n                WHEN '@start_date' THEN 'the begin date of your search'\r\n                WHEN '@end_date' THEN 'the end date of your search'\r\n                WHEN '@execution_count' THEN 'the minimum number of executions a query must have'\r\n                WHEN '@duration_ms' THEN 'the minimum duration a query must have'\r\n                WHEN '@procedure_schema' THEN 'the schema of the procedure you''re searching for'\r\n                WHEN '@procedure_name' THEN 'the name of the programmable object you''re searching for'\r\n                WHEN '@include_plan_ids' THEN 'a list of plan ids to search for'\r\n                WHEN '@include_query_ids' THEN 'a list of query ids to search for'\r\n                WHEN '@ignore_plan_ids' THEN 'a list of plan ids to ignore'\r\n                WHEN '@ignore_query_ids' THEN 'a list of query ids to ignore'\r\n                WHEN '@query_text_search' THEN 'query text to search for'\r\n                WHEN '@wait_filter' THEN 'wait category to search for; category details are below'\r\n                WHEN '@expert_mode' THEN 'returns additional columns and results'\r\n                WHEN '@format_output' THEN 'returns numbers formatted with commas'\r\n                WHEN '@version' THEN 'OUTPUT; for support'\r\n                WHEN '@version_date' THEN 'OUTPUT; for support'\r\n                WHEN '@help' THEN 'how you got here'\r\n                WHEN '@debug' THEN 'prints dynamic sql (including statement length), parameter and variable values, and raw temp table contents'\r\n                WHEN '@troubleshoot_performance' THEN 'set statistics xml on for queries against views'\r\n            END,\r\n        valid_inputs =\r\n            CASE\r\n                ap.name\r\n                WHEN '@database_name' THEN 'a database name with query store enabled'\r\n                WHEN '@sort_order' THEN 'cpu, logical reads, physical reads, writes, duration, memory, tempdb, executions'\r\n                WHEN '@top' THEN 'a positive integer between 1 and 9,223,372,036,854,775,807'\r\n                WHEN '@start_date' THEN 'January 1, 1753, through December 31, 9999'\r\n                WHEN '@end_date' THEN 'January 1, 1753, through December 31, 9999'\r\n                WHEN '@execution_count' THEN 'a positive integer between 1 and 9,223,372,036,854,775,807'\r\n                WHEN '@duration_ms' THEN 'a positive integer between 1 and 9,223,372,036,854,775,807'\r\n                WHEN '@procedure_schema' THEN 'a valid schema in your database'\r\n                WHEN '@procedure_name' THEN 'a valid programmable object in your database'\r\n                WHEN '@include_plan_ids' THEN 'a string; comma separated for multiple ids'\r\n                WHEN '@include_query_ids' THEN 'a string; comma separated for multiple ids'\r\n                WHEN '@ignore_plan_ids' THEN 'a string; comma separated for multiple ids'\r\n                WHEN '@ignore_query_ids' THEN 'a string; comma separated for multiple ids'\r\n                WHEN '@query_text_search' THEN 'a string; leading and trailing wildcards will be added if missing'\r\n                WHEN '@wait_filter' THEN 'cpu, lock, latch, buffer latch, buffer io, log io, network io, parallelism, memory'\r\n                WHEN '@expert_mode' THEN '0 or 1'\r\n                WHEN '@format_output' THEN '0 or 1'\r\n                WHEN '@version' THEN 'none'\r\n                WHEN '@version_date' THEN 'none'\r\n                WHEN '@help' THEN '0 or 1'\r\n                WHEN '@debug' THEN '0 or 1'\r\n                WHEN '@troubleshoot_performance' THEN '0 or 1'\r\n            END,\r\n        defaults =\r\n            CASE\r\n                ap.name\r\n                WHEN '@database_name' THEN 'NULL'\r\n                WHEN '@sort_order' THEN 'cpu'\r\n                WHEN '@top' THEN '10'\r\n                WHEN '@start_date' THEN 'the last 24 hours'\r\n                WHEN '@end_date' THEN 'NULL'\r\n                WHEN '@execution_count' THEN 'NULL'\r\n                WHEN '@duration_ms' THEN 'NULL'\r\n                WHEN '@procedure_schema' THEN 'NULL; dbo if NULL and procedure name is not NULL'\r\n                WHEN '@procedure_name' THEN 'NULL'\r\n                WHEN '@include_plan_ids' THEN 'NULL'\r\n                WHEN '@include_query_ids' THEN 'NULL'\r\n                WHEN '@ignore_plan_ids' THEN 'NULL'\r\n                WHEN '@ignore_query_ids' THEN 'NULL'\r\n                WHEN '@query_text_search' THEN 'NULL'\r\n                WHEN '@wait_filter' THEN 'NULL'\r\n                WHEN '@expert_mode' THEN '0'\r\n                WHEN '@format_output' THEN '0'\r\n                WHEN '@version' THEN 'none'\r\n                WHEN '@version_date' THEN 'none'\r\n                WHEN '@help' THEN '0'\r\n                WHEN '@debug' THEN '0'\r\n                WHEN '@troubleshoot_performance' THEN '0'\r\n            END\r\n    FROM sys.all_parameters AS ap\r\n    INNER JOIN sys.all_objects AS o\r\n        ON ap.object_id = o.object_id\r\n    INNER JOIN sys.types AS t\r\n        ON  ap.system_type_id = t.system_type_id\r\n        AND ap.user_type_id = t.user_type_id\r\n    WHERE o.name = N'sp_QuickieStore'\r\n    OPTION(RECOMPILE);\r\n\r\n    /*\r\n    Wait categories\r\n    */\r\n\r\n    SELECT\r\n        wait_categories =\r\n           'cpu (1): SOS_SCHEDULER_YIELD' UNION ALL\r\n    SELECT 'lock (3): LCK_M_%' UNION ALL\r\n    SELECT 'latch (4): LATCH_%' UNION ALL\r\n    SELECT 'buffer latch (5): PAGELATCH_%' UNION ALL\r\n    SELECT 'buffer io (6): PAGEIOLATCH_%' UNION ALL\r\n    SELECT 'log io (14): LOGMGR, LOGBUFFER, LOGMGR_RESERVE_APPEND, LOGMGR_FLUSH, LOGMGR_PMM_LOG, CHKPT, WRITELOG' UNION ALL\r\n    SELECT 'network io (15): ASYNC_NETWORK_IO, NET_WAITFOR_PACKET, PROXY_NETWORK_IO, EXTERNAL_SCRIPT_NETWORK_IOF' UNION ALL\r\n    SELECT 'parallelism (16): CXPACKET, EXCHANGE, HT%, BMP%, BP%' UNION ALL\r\n    SELECT 'memory (17): RESOURCE_SEMAPHORE, CMEMTHREAD, CMEMPARTITIONED, EE_PMOLOCK, MEMORY_ALLOCATION_EXT, RESERVED_MEMORY_ALLOCATION_EXT, MEMORY_GRANT_UPDATE';\r\n\r\n    /*\r\n    Results\r\n    */\r\n    SELECT\r\n        results =\r\n           'results returned at the end of the procedure:' UNION ALL\r\n    SELECT REPLICATE('-', 100) UNION ALL\r\n    SELECT 'Runtime Stats: data from query_store_runtime_stats, along with query plan, query text, wait stats (2017+, when enabled), and parent object' UNION ALL\r\n    SELECT REPLICATE('-', 100) UNION ALL\r\n    SELECT 'Compilation Stats (expert mode only): data from query_store_query about compilation metrics' UNION ALL\r\n    SELECT REPLICATE('-', 100) UNION ALL\r\n    SELECT 'Resource Stats (expert mode only): data from dm_exec_query_stats, when available' UNION ALL\r\n    SELECT 'query store does not currently track some details about memory grants and thread usage' UNION ALL\r\n    SELECT 'so i go back to a plan cache view to try to track it down' UNION ALL\r\n    SELECT REPLICATE('-', 100) UNION ALL\r\n    SELECT 'Query Store Waits By Query(expert mode only): information about query duration and logged wait stats' UNION ALL\r\n    SELECT 'it can sometimes be useful to compare query duration to query wait times' UNION ALL\r\n    SELECT REPLICATE('-', 100) UNION ALL\r\n    SELECT 'Query Store Waits Total(expert mode only): total wait stats for the chosen date range only' UNION ALL\r\n    SELECT REPLICATE('-', 100) UNION ALL\r\n    SELECT 'Query Store Options (expert mode only): details about current query store configuration';\r\n\r\n    /*\r\n    Limitations\r\n    */\r\n    SELECT\r\n        limitations =\r\n           'frigid shortcomings:'  UNION ALL\r\n    SELECT 'you need to be on at least SQL Server 2016 SP2, 2017 CU3, or any higher version to run this' UNION ALL\r\n    SELECT 'if you''re on azure sql db then you''ll need to be in compat level 130' UNION ALL\r\n    SELECT 'i do not currently support synapse or edge or other memes';\r\n\r\n    /*\r\n    License to F5\r\n    */\r\n    SELECT\r\n        mit_license_yo =\r\n           'i am MIT licensed, so like, do whatever' UNION ALL\r\n    SELECT 'see printed messages for full license';\r\n\r\n    RAISERROR('\r\nMIT License\r\n\r\nCopyright 2021 Darling Data, LLC\r\n\r\nhttps://www.erikdarlingdata.com/\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\r\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute,\r\nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\r\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n', 0, 1) WITH NOWAIT;\r\n\r\n    RETURN;\r\n\r\nEND;\r\n\r\n/*\r\nThese are the tables that we'll use to grab data from query store\r\nIt will be fun\r\nYou'll love it\r\n*/\r\n\r\n/*\r\nPlans we'll be working on\r\n*/\r\nCREATE TABLE\r\n    #distinct_plans\r\n(\r\n    plan_id bigint PRIMARY KEY\r\n);\r\n\r\n/*\r\nHold plan_ids for procedures we're searching\r\n*/\r\nCREATE TABLE\r\n    #procedure_plans\r\n(\r\n    plan_id bigint PRIMARY KEY\r\n);\r\n\r\n/*\r\nHold plan_ids for plans we want\r\n*/\r\nCREATE TABLE\r\n    #include_plan_ids\r\n(\r\n    plan_id bigint PRIMARY KEY\r\n);\r\n\r\n/*\r\nHold query_ids for plans we want\r\n*/\r\nCREATE TABLE\r\n    #include_query_ids\r\n(\r\n    query_id bigint PRIMARY KEY\r\n);\r\n\r\n/*\r\nHold plan_ids for ignored plans\r\n*/\r\nCREATE TABLE\r\n    #ignore_plan_ids\r\n(\r\n    plan_id bigint PRIMARY KEY\r\n);\r\n\r\n/*\r\nHold query_ids for ignored plans\r\n*/\r\nCREATE TABLE\r\n    #ignore_query_ids\r\n(\r\n    query_id bigint PRIMARY KEY\r\n);\r\n\r\n/*\r\nHold plan_ids for matching query text\r\n*/\r\nCREATE TABLE\r\n    #query_text_search\r\n(\r\n    plan_id bigint PRIMARY KEY\r\n);\r\n\r\n/*\r\nHold plan_ids for matching wait filter\r\n*/\r\nCREATE TABLE\r\n    #wait_filter\r\n(\r\n    plan_id bigint PRIMARY KEY\r\n);\r\n\r\n/*\r\nIndex and statistics entries to avoid\r\n*/\r\nCREATE TABLE\r\n    #maintenance_plans\r\n(\r\n    plan_id bigint PRIMARY KEY\r\n);\r\n\r\n/*\r\nQuery Store Setup\r\n*/\r\nCREATE TABLE\r\n    #database_query_store_options\r\n(\r\n    desired_state_desc nvarchar(60) NULL,\r\n    actual_state_desc nvarchar(60) NULL,\r\n    readonly_reason nvarchar(100) NULL,\r\n    current_storage_size_mb bigint NULL,\r\n    flush_interval_seconds bigint NULL,\r\n    interval_length_minutes bigint NULL,\r\n    max_storage_size_mb bigint NULL,\r\n    stale_query_threshold_days bigint NULL,\r\n    max_plans_per_query bigint NULL,\r\n    query_capture_mode_desc nvarchar(60) NULL,\r\n    capture_policy_execution_count int NULL,\r\n    capture_policy_total_compile_cpu_time_ms bigint NULL,\r\n    capture_policy_total_execution_cpu_time_ms bigint NULL,\r\n    capture_policy_stale_threshold_hours int NULL,\r\n    size_based_cleanup_mode_desc nvarchar(60) NULL,\r\n    wait_stats_capture_mode_desc nvarchar(60) NULL\r\n);\r\n\r\n/*\r\nPlans and Plan information\r\n*/\r\nCREATE TABLE\r\n    #query_store_plan\r\n(\r\n    plan_id bigint NOT NULL,\r\n    query_id bigint NOT NULL,\r\n    all_plan_ids varchar(max),\r\n    plan_group_id bigint NULL,\r\n    engine_version nvarchar(32) NULL,\r\n    compatibility_level smallint NOT NULL,\r\n    query_plan_hash binary(8) NOT NULL,\r\n    query_plan nvarchar(max) NULL,\r\n    is_online_index_plan bit NOT NULL,\r\n    is_trivial_plan bit NOT NULL,\r\n    is_parallel_plan bit NOT NULL,\r\n    is_forced_plan bit NOT NULL,\r\n    is_natively_compiled bit NOT NULL,\r\n    force_failure_count bigint NOT NULL,\r\n    last_force_failure_reason int NOT NULL,\r\n    last_force_failure_reason_desc nvarchar(128) NULL,\r\n    count_compiles bigint NULL,\r\n    initial_compile_start_time datetimeoffset(7) NOT NULL,\r\n    last_compile_start_time datetimeoffset(7) NULL,\r\n    last_execution_time datetimeoffset(7) NULL,\r\n    avg_compile_duration_ms float NULL,\r\n    last_compile_duration_ms bigint NULL,\r\n    plan_forcing_type int NULL,\r\n    plan_forcing_type_desc nvarchar(60) NULL\r\n);\r\n\r\n/*\r\nQueries and Compile Information\r\n*/\r\nCREATE TABLE\r\n    #query_store_query\r\n(\r\n    query_id bigint NOT NULL,\r\n    query_text_id bigint NOT NULL,\r\n    context_settings_id bigint NOT NULL,\r\n    object_id bigint NULL,\r\n    object_name AS\r\n        ISNULL\r\n        (\r\n            QUOTENAME\r\n            (\r\n                OBJECT_SCHEMA_NAME\r\n                (\r\n                    object_id,\r\n                    database_id\r\n                )\r\n            ) +\r\n            N'.' +\r\n            QUOTENAME\r\n            (\r\n                OBJECT_NAME\r\n                (\r\n                    object_id,\r\n                    database_id\r\n                )\r\n            ),\r\n            N'Adhoc'\r\n        ),\r\n    batch_sql_handle varbinary(64) NULL,\r\n    query_hash binary(8) NOT NULL,\r\n    is_internal_query bit NOT NULL,\r\n    query_parameterization_type tinyint NOT NULL,\r\n    query_parameterization_type_desc nvarchar(60) NULL,\r\n    initial_compile_start_time datetimeoffset(7) NOT NULL,\r\n    last_compile_start_time datetimeoffset(7) NULL,\r\n    last_execution_time datetimeoffset(7) NULL,\r\n    last_compile_batch_sql_handle varbinary(64) NULL,\r\n    last_compile_batch_offset_start bigint NULL,\r\n    last_compile_batch_offset_end bigint NULL,\r\n    count_compiles bigint NULL,\r\n    avg_compile_duration_ms float NULL,\r\n    total_compile_duration_ms AS\r\n        (count_compiles * avg_compile_duration_ms),\r\n    last_compile_duration_ms bigint NULL,\r\n    avg_bind_duration_ms float NULL,\r\n    total_bind_duration_ms AS\r\n        (count_compiles * avg_bind_duration_ms),\r\n    last_bind_duration_ms bigint NULL,\r\n    avg_bind_cpu_time_ms float NULL,\r\n    total_bind_cpu_time_ms AS\r\n        (count_compiles * avg_bind_cpu_time_ms),\r\n    last_bind_cpu_time_ms bigint NULL,\r\n    avg_optimize_duration_ms float NULL,\r\n    total_optimize_duration_ms AS\r\n        (count_compiles * avg_optimize_duration_ms),\r\n    last_optimize_duration_ms bigint NULL,\r\n    avg_optimize_cpu_time_ms float NULL,\r\n    total_optimize_cpu_time_ms AS\r\n        (count_compiles * avg_optimize_cpu_time_ms),\r\n    last_optimize_cpu_time_ms bigint NULL,\r\n    avg_compile_memory_mb float NULL,\r\n    total_compile_memory_mb AS\r\n        (count_compiles * avg_compile_memory_mb),\r\n    last_compile_memory_mb bigint NULL,\r\n    max_compile_memory_mb bigint NULL,\r\n    is_clouddb_internal_query bit NULL,\r\n    database_id int NULL\r\n);\r\n\r\n/*\r\nQuery Text And Columns From sys.dm_exec_query_stats\r\n*/\r\nCREATE TABLE\r\n    #query_store_query_text\r\n(\r\n    query_text_id bigint NOT NULL,\r\n    query_sql_text xml NULL,\r\n    statement_sql_handle varbinary(64) NULL,\r\n    is_part_of_encrypted_module bit NOT NULL,\r\n    has_restricted_text bit NOT NULL,\r\n    total_grant_mb bigint NULL,\r\n    last_grant_mb bigint NULL,\r\n    min_grant_mb bigint NULL,\r\n    max_grant_mb bigint NULL,\r\n    total_used_grant_mb bigint NULL,\r\n    last_used_grant_mb bigint NULL,\r\n    min_used_grant_mb bigint NULL,\r\n    max_used_grant_mb bigint NULL,\r\n    total_ideal_grant_mb bigint NULL,\r\n    last_ideal_grant_mb bigint NULL,\r\n    min_ideal_grant_mb bigint NULL,\r\n    max_ideal_grant_mb bigint NULL,\r\n    total_reserved_threads bigint NULL,\r\n    last_reserved_threads bigint NULL,\r\n    min_reserved_threads bigint NULL,\r\n    max_reserved_threads bigint NULL,\r\n    total_used_threads bigint NULL,\r\n    last_used_threads bigint NULL,\r\n    min_used_threads bigint NULL,\r\n    max_used_threads bigint NULL\r\n);\r\n\r\n/*\r\nFigure it out.\r\n*/\r\nCREATE TABLE\r\n    #dm_exec_query_stats\r\n(\r\n    statement_sql_handle varbinary(64) NOT NULL,\r\n    total_grant_mb bigint NULL,\r\n    last_grant_mb bigint NULL,\r\n    min_grant_mb bigint NULL,\r\n    max_grant_mb bigint NULL,\r\n    total_used_grant_mb bigint NULL,\r\n    last_used_grant_mb bigint NULL,\r\n    min_used_grant_mb bigint NULL,\r\n    max_used_grant_mb bigint NULL,\r\n    total_ideal_grant_mb bigint NULL,\r\n    last_ideal_grant_mb bigint NULL,\r\n    min_ideal_grant_mb bigint NULL,\r\n    max_ideal_grant_mb bigint NULL,\r\n    total_reserved_threads bigint NULL,\r\n    last_reserved_threads bigint NULL,\r\n    min_reserved_threads bigint NULL,\r\n    max_reserved_threads bigint NULL,\r\n    total_used_threads bigint NULL,\r\n    last_used_threads bigint NULL,\r\n    min_used_threads bigint NULL,\r\n    max_used_threads bigint NULL\r\n);\r\n\r\n/*\r\nRuntime stats information\r\n*/\r\nCREATE TABLE\r\n    #query_store_runtime_stats\r\n(\r\n    runtime_stats_id bigint NOT NULL,\r\n    plan_id bigint NOT NULL,\r\n    runtime_stats_interval_id bigint NOT NULL,\r\n    execution_type_desc nvarchar(60) NULL,\r\n    first_execution_time datetimeoffset(7) NOT NULL,\r\n    last_execution_time datetimeoffset(7) NOT NULL,\r\n    count_executions bigint NOT NULL,\r\n    executions_per_second AS\r\n        ISNULL\r\n        (\r\n            count_executions /\r\n                NULLIF\r\n                (\r\n                    DATEDIFF\r\n                    (\r\n                        SECOND,\r\n                        first_execution_time,\r\n                        last_execution_time\r\n                    ), 0\r\n                ), 0\r\n        ),\r\n    avg_duration_ms float NULL,\r\n    last_duration_ms bigint NOT NULL,\r\n    min_duration_ms bigint NOT NULL,\r\n    max_duration_ms bigint NOT NULL,\r\n    total_duration_ms AS\r\n        (avg_duration_ms * count_executions),\r\n    avg_cpu_time_ms float NULL,\r\n    last_cpu_time_ms bigint NOT NULL,\r\n    min_cpu_time_ms bigint NOT NULL,\r\n    max_cpu_time_ms bigint NOT NULL,\r\n    total_cpu_time_ms AS\r\n        (avg_cpu_time_ms * count_executions),\r\n    avg_logical_io_reads_mb float NULL,\r\n    last_logical_io_reads_mb bigint NOT NULL,\r\n    min_logical_io_reads_mb bigint NOT NULL,\r\n    max_logical_io_reads_mb bigint NOT NULL,\r\n    total_logical_io_reads_mb AS\r\n        (avg_logical_io_reads_mb * count_executions),\r\n    avg_logical_io_writes_mb float NULL,\r\n    last_logical_io_writes_mb bigint NOT NULL,\r\n    min_logical_io_writes_mb bigint NOT NULL,\r\n    max_logical_io_writes_mb bigint NOT NULL,\r\n    total_logical_io_writes_mb AS\r\n        (avg_logical_io_writes_mb * count_executions),\r\n    avg_physical_io_reads_mb float NULL,\r\n    last_physical_io_reads_mb bigint NOT NULL,\r\n    min_physical_io_reads_mb bigint NOT NULL,\r\n    max_physical_io_reads_mb bigint NOT NULL,\r\n    total_physical_io_reads_mb AS\r\n        (avg_physical_io_reads_mb * count_executions),\r\n    avg_clr_time_ms float NULL,\r\n    last_clr_time_ms bigint NOT NULL,\r\n    min_clr_time_ms bigint NOT NULL,\r\n    max_clr_time_ms bigint NOT NULL,\r\n    total_clr_time_ms AS\r\n        (avg_clr_time_ms * count_executions),\r\n    last_dop bigint NOT NULL,\r\n    min_dop bigint NOT NULL,\r\n    max_dop bigint NOT NULL,\r\n    avg_query_max_used_memory_mb float NULL,\r\n    last_query_max_used_memory_mb bigint NOT NULL,\r\n    min_query_max_used_memory_mb bigint NOT NULL,\r\n    max_query_max_used_memory_mb bigint NOT NULL,\r\n    total_query_max_used_memory_mb AS\r\n        (avg_query_max_used_memory_mb * count_executions),\r\n    avg_rowcount float NULL,\r\n    last_rowcount bigint NOT NULL,\r\n    min_rowcount bigint NOT NULL,\r\n    max_rowcount bigint NOT NULL,\r\n    total_rowcount AS\r\n        (avg_rowcount * count_executions),\r\n    avg_num_physical_io_reads_mb float NULL,\r\n    last_num_physical_io_reads_mb bigint NULL,\r\n    min_num_physical_io_reads_mb bigint NULL,\r\n    max_num_physical_io_reads_mb bigint NULL,\r\n    total_num_physical_io_reads_mb AS\r\n        (avg_num_physical_io_reads_mb * count_executions),\r\n    avg_log_bytes_used_mb float NULL,\r\n    last_log_bytes_used_mb bigint NULL,\r\n    min_log_bytes_used_mb bigint NULL,\r\n    max_log_bytes_used_mb bigint NULL,\r\n    total_log_bytes_used_mb AS\r\n        (avg_log_bytes_used_mb * count_executions),\r\n    avg_tempdb_space_used_mb float NULL,\r\n    last_tempdb_space_used_mb bigint NULL,\r\n    min_tempdb_space_used_mb bigint NULL,\r\n    max_tempdb_space_used_mb bigint NULL,\r\n    total_tempdb_space_used_mb AS\r\n        (avg_tempdb_space_used_mb * count_executions),\r\n    context_settings nvarchar(256) NULL\r\n);\r\n\r\n/*\r\nWait Stats, When Available\r\n*/\r\nCREATE TABLE\r\n    #query_store_wait_stats\r\n(\r\n    plan_id bigint NOT NULL,\r\n    wait_category_desc nvarchar(60) NOT NULL,\r\n    total_query_wait_time_ms bigint NOT NULL,\r\n    avg_query_wait_time_ms float NULL,\r\n    last_query_wait_time_ms bigint NOT NULL,\r\n    min_query_wait_time_ms bigint NOT NULL,\r\n    max_query_wait_time_ms bigint NOT NULL\r\n);\r\n\r\n/*\r\nContext is everything\r\n*/\r\nCREATE TABLE\r\n    #query_context_settings\r\n(\r\n    context_settings_id bigint NOT NULL,\r\n    set_options varbinary(8) NULL,\r\n    language_id smallint NOT NULL,\r\n    date_format smallint NOT NULL,\r\n    date_first tinyint NOT NULL,\r\n    status varbinary(2) NULL,\r\n    required_cursor_options int NOT NULL,\r\n    acceptable_cursor_options int NOT NULL,\r\n    merge_action_type smallint NOT NULL,\r\n    default_schema_id int NOT NULL,\r\n    is_replication_specific bit NOT NULL,\r\n    is_contained varbinary(1) NULL\r\n);\r\n\r\n/*\r\nTrouble Loves Me\r\n*/\r\nCREATE TABLE\r\n    #troubleshoot_performance\r\n(\r\n    id bigint IDENTITY,\r\n    current_table nvarchar(100),\r\n    start_time datetime,\r\n    end_time datetime,\r\n    runtime_ms AS\r\n        FORMAT\r\n        (\r\n            DATEDIFF\r\n            (\r\n                MILLISECOND,\r\n                start_time,\r\n                end_time\r\n            ),\r\n            'N0'\r\n        )\r\n);\r\n\r\n/*\r\nTry to be helpful by subbing in a database name if null\r\n*/\r\nIF\r\n  (\r\n      @database_name IS NULL\r\n        AND LOWER\r\n            (\r\n                DB_NAME()\r\n            )\r\n            NOT IN\r\n            (\r\n                N'master',\r\n                N'model',\r\n                N'msdb',\r\n                N'tempdb',\r\n                N'dbatools',\r\n                N'dbadmin',\r\n                N'dbmaintenance',\r\n                N'rdsadmin',\r\n                N'other_memes'\r\n            )\r\n  )\r\nBEGIN\r\n    SELECT\r\n        @database_name =\r\n            DB_NAME();\r\nEND;\r\n\r\n/*\r\nVariables for the variable gods\r\n*/\r\nDECLARE\r\n    @azure bit,\r\n    @engine int,\r\n    @product_version int,\r\n    @database_id int,\r\n    @database_name_quoted sysname,\r\n    @procedure_name_quoted sysname,\r\n    @collation sysname,\r\n    @new bit,\r\n    @sql nvarchar(max),\r\n    @isolation_level nvarchar(max),\r\n    @parameters nvarchar(200),\r\n    @plans_top bigint,\r\n    @nc10 nvarchar(2),\r\n    @where_clause nvarchar(max),\r\n    @procedure_exists bit,\r\n    @query_store_exists bit,\r\n    @query_store_waits_enabled bit,\r\n    @string_split nvarchar(1500),\r\n    @current_table nvarchar(100),\r\n    @troubleshoot_insert nvarchar(max),\r\n    @troubleshoot_update nvarchar(max),\r\n    @troubleshoot_info nvarchar(max),\r\n    @rc bigint;\r\n\r\n/*\r\nSome variable assignment, because why not?\r\n*/\r\nSELECT\r\n    @azure =\r\n        CASE\r\n            WHEN\r\n                CONVERT\r\n                (\r\n                    sysname,\r\n                    SERVERPROPERTY('EDITION')\r\n                ) = N'SQL Azure'\r\n            THEN 1\r\n            ELSE 0\r\n        END,\r\n    @engine =\r\n        CONVERT\r\n        (\r\n            int,\r\n            SERVERPROPERTY('ENGINEEDITION')\r\n        ),\r\n    @product_version =\r\n        CONVERT\r\n        (\r\n            int,\r\n            PARSENAME\r\n            (\r\n                CONVERT\r\n                (\r\n                    sysname,\r\n                    SERVERPROPERTY('PRODUCTVERSION')\r\n                ),\r\n                4\r\n            )\r\n        ),\r\n    @database_id =\r\n        DB_ID(@database_name),\r\n    @database_name_quoted =\r\n        QUOTENAME(@database_name),\r\n    @procedure_name_quoted =\r\n         QUOTENAME(@database_name) +\r\n         N'.' +\r\n         QUOTENAME\r\n         (\r\n             ISNULL\r\n             (\r\n                 @procedure_schema,\r\n                 N'dbo'\r\n             )\r\n         ) +\r\n         N'.' +\r\n         QUOTENAME(@procedure_name),\r\n    @collation =\r\n        CONVERT\r\n        (\r\n            sysname,\r\n            DATABASEPROPERTYEX\r\n            (\r\n                @database_name,\r\n                'Collation'\r\n            )\r\n        ),\r\n    @new = 0,\r\n    @sql = N'',\r\n    @isolation_level =\r\n        N'\r\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;',\r\n    @parameters =\r\n        N'@top bigint,\r\n          @start_date datetime,\r\n          @end_date datetime,\r\n          @execution_count bigint,\r\n          @duration_ms bigint',\r\n    @plans_top =\r\n        CASE\r\n            WHEN @include_plan_ids IS NULL\r\n            THEN 1\r\n            ELSE 10\r\n         END,\r\n    @nc10 = NCHAR(10),\r\n    @where_clause = N'',\r\n    @procedure_exists = 0,\r\n    @query_store_exists = 0,\r\n    @query_store_waits_enabled = 0,\r\n    @current_table = N'',\r\n    @string_split = N'\r\n    SELECT DISTINCT\r\n        LTRIM\r\n        (\r\n            RTRIM\r\n            (\r\n                ids.ids\r\n            )\r\n        ) AS ids\r\n    FROM\r\n    (\r\n        SELECT\r\n            ids =\r\n                x.x.value\r\n                    (\r\n                        ''(./text())[1]'',\r\n                        ''bigint''\r\n                    )\r\n        FROM\r\n        (\r\n            SELECT\r\n                ids =\r\n                    CONVERT\r\n                    (\r\n                        xml,\r\n                        ''<x>'' +\r\n                        REPLACE\r\n                        (\r\n                            REPLACE\r\n                            (\r\n                                @ids,\r\n                                '','',\r\n                                ''</x><x>''\r\n                            ),\r\n                            '' '',\r\n                            ''''\r\n                        ) +\r\n                        ''</x>''\r\n                    ).query(''.'')\r\n        ) AS ids\r\n            CROSS APPLY ids.nodes(''x'') AS x (x)\r\n    ) AS ids\r\n    OPTION(RECOMPILE);',\r\n    @troubleshoot_insert = N'\r\n        INSERT\r\n            #troubleshoot_performance WITH(TABLOCK)\r\n        (\r\n            current_table,\r\n            start_time\r\n        )\r\n        VALUES\r\n        (\r\n            @current_table,\r\n            GETDATE()\r\n        )\r\n        OPTION(RECOMPILE);',\r\n    @troubleshoot_update = N'\r\n        UPDATE tp\r\n            SET tp.end_time = GETDATE()\r\n        FROM #troubleshoot_performance AS tp\r\n        WHERE tp.current_table = @current_table\r\n        OPTION(RECOMPILE);',\r\n    @troubleshoot_info = N'\r\n        SELECT\r\n            (\r\n                SELECT\r\n                    runtime_ms =\r\n                        tp.runtime_ms,\r\n                    current_table =\r\n                        tp.current_table,\r\n                    query_length =\r\n                        FORMAT(LEN(@sql), ''N0''),\r\n                    ''processing-instruction(statement_text)'' =\r\n                        @sql\r\n                FROM #troubleshoot_performance AS tp\r\n                WHERE tp.current_table = @current_table\r\n                FOR XML PATH(N''''), TYPE\r\n            ).query(''.[1]'') AS current_query\r\n        OPTION(RECOMPILE);',\r\n    @rc = 0;\r\n\r\n/*\r\nSome parameters can't be NULL,\r\nand some shouldn't be empty strings\r\n*/\r\nSELECT\r\n    @sort_order =\r\n        ISNULL(@sort_order, 'cpu'),\r\n    @top =\r\n        ISNULL(@top, 10),\r\n    @expert_mode =\r\n        ISNULL(@expert_mode, 0),\r\n    @procedure_schema =\r\n        NULLIF(@procedure_schema, ''),\r\n    @procedure_name =\r\n        NULLIF(@procedure_name, ''),\r\n    @include_plan_ids =\r\n        NULLIF(@include_plan_ids, ''),\r\n    @include_query_ids =\r\n        NULLIF(@include_query_ids, ''),\r\n    @ignore_plan_ids =\r\n        NULLIF(@ignore_plan_ids, ''),\r\n    @ignore_query_ids =\r\n        NULLIF(@ignore_query_ids, ''),\r\n    @wait_filter =\r\n        NULLIF(@wait_filter, ''),\r\n    @format_output =\r\n        ISNULL(@format_output, 0),\r\n    @help =\r\n        ISNULL(@help, 0),\r\n    @debug =\r\n        ISNULL(@debug, 0),\r\n    @troubleshoot_performance =\r\n        ISNULL(@troubleshoot_performance, 0);\r\n\r\n/*\r\nLet's make sure things will work\r\n*/\r\n\r\n/*\r\nDatabase are you there?\r\n*/\r\nIF\r\n  (\r\n      @database_id IS NULL\r\n        OR @collation IS NULL\r\n  )\r\nBEGIN\r\n    RAISERROR('Database %s does not exist', 11, 1, @database_name) WITH NOWAIT;\r\n    RETURN;\r\nEND;\r\n\r\n/*\r\nDatabase what are you?\r\n*/\r\nIF\r\n  (\r\n      @azure = 1\r\n        AND @engine NOT IN (5, 8)\r\n  )\r\nBEGIN\r\n    RAISERROR('Not all Azure offerings are supported, please try avoiding memes', 11, 1) WITH NOWAIT;\r\n    RETURN;\r\nEND;\r\n\r\n/*\r\nDatabase are you compatible?\r\n*/\r\nIF\r\n  (\r\n      @azure = 1\r\n        AND EXISTS\r\n            (\r\n                SELECT\r\n                    1/0\r\n                 FROM sys.databases AS d\r\n                 WHERE d.database_id = @database_id\r\n                 AND   d.compatibility_level < 130\r\n            )\r\n  )\r\nBEGIN\r\n    RAISERROR('Azure databases in compatiblity levels under 130 are not supported', 11, 1) WITH NOWAIT;\r\n    RETURN;\r\nEND;\r\n\r\n/*\r\nSometimes sys.databases will report Query Store being on, but it's really not\r\n*/\r\nSELECT\r\n    @current_table = 'checking query store existence',\r\n    @sql = @isolation_level;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    SET STATISTICS XML ON;\r\n\r\nEND;\r\n\r\nSELECT\r\n    @sql += N'\r\nSELECT\r\n    @query_store_exists =\r\n        CASE\r\n            WHEN EXISTS\r\n                 (\r\n                     SELECT\r\n                         1/0\r\n                     FROM ' + @database_name_quoted + N'.sys.database_query_store_options AS dqso\r\n                     WHERE ( dqso.actual_state = 0\r\n                               OR dqso.actual_state IS NULL )\r\n                 )\r\n            OR   NOT EXISTS\r\n                     (\r\n                         SELECT\r\n                             1/0\r\n                         FROM ' + @database_name_quoted + N'.sys.database_query_store_options AS dqso\r\n                     )\r\n            THEN 0\r\n            ELSE 1\r\n        END\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\nIF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\nEXEC sys.sp_executesql\r\n    @sql,\r\n  N'@query_store_exists bit OUTPUT',\r\n    @query_store_exists OUTPUT;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    SET STATISTICS XML OFF;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_update,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_info,\r\n      N'@sql nvarchar(max),\r\n        @current_table nvarchar(100)',\r\n        @sql,\r\n        @current_table;\r\n\r\nEND;\r\n\r\nIF @query_store_exists = 0\r\n    BEGIN\r\n        RAISERROR('Query Store doesn''t seem to be enabled for database: %s', 11, 1, @database_name) WITH NOWAIT;\r\n        RETURN;\r\n    END;\r\n\r\n/*\r\nIf you specified a procedure name, we need to figure out if it's there\r\n*/\r\nIF @procedure_name IS NOT NULL\r\nBEGIN\r\n\r\n    SELECT\r\n        @current_table = 'checking procedure existence',\r\n        @sql = @isolation_level;\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n        SET STATISTICS XML ON;\r\n\r\n    END;\r\n\r\n    SELECT\r\n        @sql += N'\r\nSELECT\r\n    @procedure_exists =\r\n        CASE\r\n            WHEN EXISTS\r\n                 (\r\n                     SELECT\r\n                         1/0\r\n                     FROM ' + @database_name_quoted + N'.sys.query_store_query AS qsq\r\n                     WHERE qsq.object_id = OBJECT_ID(@procedure_name_quoted)\r\n                 )\r\n            THEN 1\r\n            ELSE 0\r\n        END\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\n    IF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\n    EXEC sys.sp_executesql\r\n        @sql,\r\n      N'@procedure_exists bit OUTPUT,\r\n        @procedure_name_quoted sysname',\r\n        @procedure_exists OUTPUT,\r\n        @procedure_name_quoted;\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        SET STATISTICS XML OFF;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_update,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_info,\r\n          N'@sql nvarchar(max),\r\n            @current_table nvarchar(100)',\r\n            @sql,\r\n            @current_table;\r\n\r\n    END;\r\n\r\n    IF @procedure_exists = 0\r\n        BEGIN\r\n            RAISERROR('The stored procedure %s does not appear to have any entries in Query Store for database %s\r\nCheck that you spelled everything correctly and you''re in the right database',\r\n                       11, 1, @procedure_name, @database_name) WITH NOWAIT;\r\n        RETURN;\r\n    END;\r\nEND;\r\n\r\n/*\r\nSome things are version dependent.\r\nNormally, I'd check for object existence, but the documentation\r\nleads me to believe that certain things won't be back-ported,\r\nlike the wait stats DMV, and tempdb spills columns\r\n*/\r\nIF\r\n  (\r\n      @product_version > 13\r\n        OR @azure = 1\r\n  )\r\nBEGIN\r\n   SELECT\r\n       @new = 1;\r\nEND;\r\n\r\n/*\r\nValidate Sort Order\r\n*/\r\nIF @sort_order NOT IN\r\n               (\r\n                   'cpu',\r\n                   'logical reads',\r\n                   'physical reads',\r\n                   'writes',\r\n                   'duration',\r\n                   'memory',\r\n                   'tempdb',\r\n                   'executions'\r\n               )\r\nBEGIN\r\n   RAISERROR('The sort order (%s) you chose is so out of this world that I''m using cpu instead', 10, 1, @sort_order) WITH NOWAIT;\r\n   SELECT\r\n       @sort_order = 'cpu';\r\nEND;\r\n\r\n/*\r\nThese columns are only available in 2017+\r\n*/\r\nIF\r\n  (\r\n      @sort_order = 'tempdb'\r\n        AND @new = 0\r\n  )\r\nBEGIN\r\n   RAISERROR('The sort order (%s) you chose is invalid in product version %i, reverting to cpu', 10, 1, @sort_order, @product_version) WITH NOWAIT;\r\n   SELECT\r\n       @sort_order = N'cpu';\r\nEND;\r\n\r\nIF\r\n(\r\n    @wait_filter IS NOT NULL\r\n      AND @new = 0\r\n)\r\nBEGIN\r\n   RAISERROR('Query Store wait stats are not available prior to SQL Server 2017', 11, 1) WITH NOWAIT;\r\n   RETURN;\r\nEND;\r\n\r\nIF \r\n(\r\n    @new = 1\r\n      AND @wait_filter NOT IN\r\n                       (\r\n                           'cpu',\r\n                           'lock',\r\n                           'locks',\r\n                           'latch',\r\n                           'latches',\r\n                           'buffer latch',\r\n                           'buffer latches',\r\n                           'buffer io',\r\n                           'log',\r\n                           'log io',\r\n                           'network',\r\n                           'network io',\r\n                           'parallel',\r\n                           'parallelism',\r\n                           'memory'\r\n                       )\r\n)\r\nBEGIN\r\n   RAISERROR('The wait category (%s) you chose is invalid', 11, 1, @wait_filter) WITH NOWAIT;\r\n   RETURN;\r\nEND;\r\n\r\nIF\r\n(\r\n    @wait_filter IS NOT NULL\r\n      AND @new = 1\r\n)\r\nBEGIN\r\n\r\n    SELECT\r\n        @current_table = 'checking query store waits are enabled',\r\n        @sql = @isolation_level;\r\n    \r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n    \r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_insert,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n    \r\n        SET STATISTICS XML ON;\r\n    \r\n    END;\r\n    \r\n    SELECT\r\n        @sql += N'\r\nSELECT\r\n    @query_store_waits_enabled =\r\n        CASE\r\n            WHEN EXISTS\r\n                 (\r\n                     SELECT\r\n                         1/0\r\n                     FROM ' + @database_name_quoted + N'.sys.database_query_store_options AS dqso\r\n                     WHERE dqso.wait_stats_capture_mode = 1\r\n                 )\r\n            THEN 1\r\n            ELSE 0\r\n        END\r\nOPTION(RECOMPILE);' + @nc10;\r\n    \r\n    IF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n    \r\n    EXEC sys.sp_executesql\r\n        @sql,\r\n      N'@query_store_waits_enabled bit OUTPUT',\r\n        @query_store_waits_enabled OUTPUT;\r\n    \r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n    \r\n        SET STATISTICS XML OFF;\r\n    \r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_update,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n    \r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_info,\r\n          N'@sql nvarchar(max),\r\n            @current_table nvarchar(100)',\r\n            @sql,\r\n            @current_table;\r\n    \r\n    END;\r\n    \r\n    IF @query_store_waits_enabled = 0\r\n    BEGIN\r\n       RAISERROR('Query Store wait stats are not enabled for database %s', 11, 1, @database_name_quoted) WITH NOWAIT;\r\n       RETURN;\r\n    END\r\n\r\nEND;\r\n\r\n\r\n/*\r\nGet filters ready, or whatever\r\nWe're only going to pull some stuff from runtime stats and plans\r\n*/\r\n\r\nIF @start_date IS NULL\r\nBEGIN\r\n    SELECT\r\n        @where_clause += N'AND   qsrs.last_execution_time >= DATEADD(DAY, -1, DATEDIFF(DAY, 0, SYSDATETIME()))' + @nc10;\r\nEND;\r\n\r\nIF @start_date IS NOT NULL\r\nBEGIN\r\n    SELECT\r\n        @where_clause += N'AND   qsrs.last_execution_time >= @start_date' + @nc10;\r\nEND;\r\n\r\nIF @end_date IS NOT NULL\r\nBEGIN\r\n    SELECT\r\n        @where_clause += N'AND   qsrs.last_execution_time < @end_date' + @nc10;\r\nEND;\r\n\r\nIF @execution_count IS NOT NULL\r\nBEGIN\r\n    SELECT\r\n        @where_clause += N'AND   qsrs.count_executions >= @execution_count' + @nc10;\r\nEND;\r\n\r\nIF @duration_ms IS NOT NULL\r\nBEGIN\r\n    SELECT\r\n        @where_clause += N'AND   qsrs.avg_duration >= (@duration_ms * 1000.)' + @nc10;\r\nEND;\r\n\r\nIF\r\n  (\r\n      @procedure_name IS NOT NULL\r\n        AND @procedure_exists = 1\r\n  )\r\nBEGIN\r\n\r\n    SELECT\r\n        @current_table = 'inserting #procedure_plans',\r\n        @sql = @isolation_level;\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_insert,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n\r\n        SET STATISTICS XML ON;\r\n\r\n    END;\r\n\r\n    SELECT\r\n        @sql += N'\r\nSELECT DISTINCT\r\n    qsp.plan_id\r\nFROM ' + @database_name_quoted + N'.sys.query_store_query AS qsq\r\nJOIN ' + @database_name_quoted + N'.sys.query_store_plan AS qsp\r\n   ON qsq.query_id = qsp.query_id\r\nWHERE qsq.object_id = OBJECT_ID(@procedure_name_quoted)\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\n    IF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\n    INSERT\r\n        #procedure_plans WITH(TABLOCK)\r\n    (\r\n        plan_id\r\n    )\r\n    EXEC sys.sp_executesql\r\n        @sql,\r\n      N'@procedure_name_quoted sysname',\r\n        @procedure_name_quoted;\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        SET STATISTICS XML OFF;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_update,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_info,\r\n          N'@sql nvarchar(max),\r\n            @current_table nvarchar(100)',\r\n            @sql,\r\n            @current_table;\r\n\r\n    END;\r\n\r\n    SELECT\r\n        @where_clause += N'AND   EXISTS\r\n        (\r\n            SELECT\r\n                1/0\r\n            FROM #procedure_plans AS pp\r\n            WHERE pp.plan_id = qsrs.plan_id\r\n        )'  + @nc10;\r\n\r\nEND;\r\n\r\n/*\r\nThis section filters query or plan ids\r\n*/\r\nIF\r\n  (\r\n         @include_plan_ids  IS NOT NULL\r\n      OR @include_query_ids IS NOT NULL\r\n      OR @ignore_plan_ids   IS NOT NULL\r\n      OR @ignore_query_ids  IS NOT NULL\r\n  )\r\nBEGIN\r\n\r\n    IF @include_plan_ids IS NOT NULL\r\n    BEGIN\r\n\r\n        SELECT\r\n            @current_table = 'inserting #include_plan_ids';\r\n\r\n        INSERT\r\n            #include_plan_ids WITH(TABLOCK)\r\n        (\r\n            plan_id\r\n        )\r\n        EXEC sys.sp_executesql\r\n            @string_split,\r\n          N'@ids nvarchar(4000)',\r\n            @include_plan_ids;\r\n\r\n        SELECT\r\n           @where_clause += N'AND   EXISTS\r\n      (\r\n         SELECT\r\n            1/0\r\n         FROM #include_plan_ids AS idi\r\n         WHERE idi.plan_id = qsrs.plan_id\r\n      )' + @nc10;\r\n\r\n    END;\r\n\r\n    IF @ignore_plan_ids IS NOT NULL\r\n    BEGIN\r\n\r\n        SELECT\r\n            @current_table = 'inserting #ignore_plan_ids';\r\n\r\n        INSERT\r\n            #ignore_plan_ids WITH(TABLOCK)\r\n        (\r\n            plan_id\r\n        )\r\n        EXEC sys.sp_executesql\r\n            @string_split,\r\n          N'@ids nvarchar(4000)',\r\n            @ignore_plan_ids;\r\n\r\n        SELECT\r\n           @where_clause += N'AND   NOT EXISTS\r\n          (\r\n             SELECT\r\n                1/0\r\n             FROM #ignore_plan_ids AS idi\r\n             WHERE idi.plan_id = qsrs.plan_id\r\n          )' + @nc10;\r\n\r\n    END;\r\n\r\n    IF @include_query_ids IS NOT NULL\r\n    BEGIN\r\n\r\n        SELECT\r\n            @current_table = 'inserting #include_query_ids',\r\n            @sql = @isolation_level;\r\n\r\n        INSERT\r\n            #include_query_ids WITH(TABLOCK)\r\n        (\r\n            query_id\r\n        )\r\n        EXEC sys.sp_executesql\r\n            @string_split,\r\n          N'@ids nvarchar(4000)',\r\n            @include_query_ids;\r\n\r\n        SELECT\r\n            @current_table = 'inserting #include_plan_ids for included query ids';\r\n\r\n        IF @troubleshoot_performance = 1\r\n        BEGIN\r\n\r\n            EXEC sys.sp_executesql\r\n                @troubleshoot_insert,\r\n              N'@current_table nvarchar(100)',\r\n                @current_table;\r\n\r\n            SET STATISTICS XML ON;\r\n\r\n        END;\r\n\r\n        SELECT\r\n            @sql += N'\r\nSELECT DISTINCT\r\n    qsp.plan_id\r\nFROM ' + @database_name_quoted + N'.sys.query_store_plan AS qsp\r\nWHERE EXISTS\r\n      (\r\n          SELECT\r\n              1/0\r\n          FROM #include_query_ids AS iqi\r\n          WHERE iqi.query_id = qsp.query_id\r\n      )\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\n        IF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\n        INSERT\r\n            #include_plan_ids\r\n            (\r\n                plan_id\r\n            )\r\n        EXEC sys.sp_executesql\r\n            @sql;\r\n\r\n        IF @troubleshoot_performance = 1\r\n        BEGIN\r\n\r\n            SET STATISTICS XML OFF;\r\n\r\n            EXEC sys.sp_executesql\r\n                @troubleshoot_update,\r\n              N'@current_table nvarchar(100)',\r\n                @current_table;\r\n\r\n            EXEC sys.sp_executesql\r\n                @troubleshoot_info,\r\n              N'@sql nvarchar(max),\r\n                @current_table nvarchar(100)',\r\n                @sql,\r\n                @current_table;\r\n\r\n        END;\r\n\r\n        IF @include_plan_ids IS NULL\r\n        BEGIN\r\n            SELECT\r\n               @where_clause += N'AND   EXISTS\r\n          (\r\n             SELECT\r\n                1/0\r\n             FROM #include_plan_ids AS idi\r\n             WHERE idi.plan_id = qsrs.plan_id\r\n          )' + @nc10;\r\n        END;\r\n\r\n    END;\r\n\r\n    IF @ignore_query_ids IS NOT NULL\r\n    BEGIN\r\n\r\n        SELECT\r\n            @current_table = 'inserting #ignore_query_ids',\r\n            @sql = @isolation_level;\r\n\r\n        INSERT\r\n            #ignore_query_ids WITH(TABLOCK)\r\n        (\r\n            query_id\r\n        )\r\n        EXEC sys.sp_executesql\r\n            @string_split,\r\n          N'@ids nvarchar(4000)',\r\n            @ignore_query_ids;\r\n\r\n        SELECT\r\n            @current_table = 'inserting #ignore_plan_ids for ignored query ids';\r\n\r\n        IF @troubleshoot_performance = 1\r\n        BEGIN\r\n\r\n            EXEC sys.sp_executesql\r\n                @troubleshoot_insert,\r\n              N'@current_table nvarchar(100)',\r\n                @current_table;\r\n\r\n            SET STATISTICS XML ON;\r\n\r\n        END;\r\n\r\n        SELECT\r\n            @sql += N'\r\nSELECT DISTINCT\r\n    qsp.plan_id\r\nFROM ' + @database_name_quoted + N'.sys.query_store_plan AS qsp\r\nWHERE EXISTS\r\n      (\r\n          SELECT\r\n              1/0\r\n          FROM #ignore_query_ids AS iqi\r\n          WHERE iqi.query_id = qsp.query_id\r\n      )\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\n        IF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\n        INSERT\r\n            #ignore_plan_ids\r\n            (\r\n                plan_id\r\n            )\r\n        EXEC sys.sp_executesql\r\n            @sql;\r\n\r\n        IF @troubleshoot_performance = 1\r\n        BEGIN\r\n\r\n            SET STATISTICS XML OFF;\r\n\r\n            EXEC sys.sp_executesql\r\n                @troubleshoot_update,\r\n              N'@current_table nvarchar(100)',\r\n                @current_table;\r\n\r\n            EXEC sys.sp_executesql\r\n                @troubleshoot_info,\r\n              N'@sql nvarchar(max),\r\n                @current_table nvarchar(100)',\r\n                @sql,\r\n                @current_table;\r\n\r\n        END;\r\n\r\n        IF @ignore_plan_ids IS NULL\r\n        BEGIN\r\n        SELECT\r\n               @where_clause += N'AND   NOT EXISTS\r\n              (\r\n                 SELECT\r\n                    1/0\r\n                 FROM #ignore_plan_ids AS idi\r\n                 WHERE idi.plan_id = qsrs.plan_id\r\n              )' + @nc10;\r\n          END;\r\n    END;\r\n\r\nEND;\r\n\r\nIF @query_text_search IS NOT NULL\r\nBEGIN\r\n\r\n    IF\r\n      (\r\n          LEFT\r\n          (\r\n              @query_text_search,\r\n              1\r\n          ) <> N'%'\r\n      )\r\n    BEGIN\r\n        SELECT\r\n            @query_text_search =\r\n                N'%' + @query_text_search;\r\n    END;\r\n\r\n    IF\r\n      (\r\n          LEFT\r\n          (\r\n              REVERSE\r\n              (\r\n                  @query_text_search\r\n              ),\r\n              1\r\n          ) <> N'%'\r\n      )\r\n    BEGIN\r\n        SELECT\r\n            @query_text_search =\r\n                @query_text_search + N'%';\r\n    END;\r\n\r\n    SELECT\r\n        @current_table = 'inserting #query_text_search',\r\n        @sql = @isolation_level;\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_insert,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n\r\n        SET STATISTICS XML ON;\r\n\r\n    END;\r\n\r\n    SELECT\r\n        @sql += N'\r\nSELECT DISTINCT\r\n    qsp.plan_id\r\nFROM ' + @database_name_quoted + N'.sys.query_store_plan AS qsp\r\nWHERE EXISTS\r\n      (\r\n          SELECT\r\n              1/0\r\n          FROM ' + @database_name_quoted + N'.sys.query_store_query AS qsq\r\n          WHERE qsp.query_id = qsq.query_id\r\n          AND EXISTS\r\n              (\r\n                  SELECT\r\n                      1/0\r\n                  FROM ' + @database_name_quoted + N'.sys.query_store_query_text AS qsqt\r\n                  WHERE qsqt.query_text_id = qsq.query_text_id\r\n                  AND   qsqt.query_sql_text LIKE @query_text_search\r\n              )\r\n      )\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\n    IF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\n    INSERT\r\n        #query_text_search WITH(TABLOCK)\r\n    (\r\n        plan_id\r\n    )\r\n    EXEC sys.sp_executesql\r\n        @sql,\r\n      N'@query_text_search nvarchar(4000)',\r\n        @query_text_search;\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        SET STATISTICS XML OFF;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_update,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_info,\r\n          N'@sql nvarchar(max),\r\n            @current_table nvarchar(100)',\r\n            @sql,\r\n            @current_table;\r\n\r\n    END;\r\n\r\n    SELECT\r\n        @where_clause += N'AND   EXISTS\r\n       (\r\n           SELECT\r\n               1/0\r\n           FROM #query_text_search AS qst\r\n           WHERE qst.plan_id = qsrs.plan_id\r\n       )' + @nc10;\r\n\r\nEND;\r\n\r\n/*\r\nValidate wait stats stuff\r\n*/\r\nIF @wait_filter IS NOT NULL\r\nBEGIN\r\n\r\n    BEGIN\r\n\r\n        SELECT\r\n            @current_table = 'inserting #wait_filter',\r\n            @sql = @isolation_level;\r\n\r\n        IF @troubleshoot_performance = 1\r\n        BEGIN\r\n\r\n            EXEC sys.sp_executesql\r\n                @troubleshoot_insert,\r\n              N'@current_table nvarchar(100)',\r\n                @current_table;\r\n\r\n            SET STATISTICS XML ON;\r\n\r\n        END;\r\n\r\n        SELECT\r\n            @sql += N'\r\nSELECT TOP (@top)\r\n    qsws.plan_id\r\nFROM  ' + @database_name_quoted + N'.sys.query_store_wait_stats AS qsws\r\nWHERE qsws.execution_type = 0\r\nAND   qsws.wait_category = ' +\r\nCASE @wait_filter\r\n     WHEN 'cpu' THEN N'1'\r\n     WHEN 'lock' THEN N'3'\r\n     WHEN 'locks' THEN N'3'\r\n     WHEN 'latch' THEN N'4'\r\n     WHEN 'latches' THEN N'4'\r\n     WHEN 'buffer latch' THEN N'5'\r\n     WHEN 'buffer latches' THEN N'5'\r\n     WHEN 'buffer io' THEN N'6'\r\n     WHEN 'log' THEN N'14'\r\n     WHEN 'log io' THEN N'14'\r\n     WHEN 'network' THEN N'15'\r\n     WHEN 'network io' THEN N'15'\r\n     WHEN 'parallel' THEN N'16'\r\n     WHEN 'parallelism' THEN N'16'\r\n     WHEN 'memory' THEN N'17'\r\nEND\r\n+ N'\r\nGROUP BY qsws.plan_id\r\nHAVING SUM(qsws.avg_query_wait_time_ms) > 1000.\r\nORDER BY SUM(qsws.avg_query_wait_time_ms) DESC\r\nOPTION(RECOMPILE, OPTIMIZE FOR (@top = 9223372036854775807));' + @nc10;\r\n\r\n    END;\r\n\r\n    IF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\n    INSERT\r\n        #wait_filter WITH(TABLOCK)\r\n    (\r\n        plan_id\r\n    )\r\n    EXEC sys.sp_executesql\r\n        @sql,\r\n      N'@top bigint',\r\n        @top;\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        SET STATISTICS XML OFF;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_update,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_info,\r\n          N'@sql nvarchar(max),\r\n            @current_table nvarchar(100)',\r\n            @sql,\r\n            @current_table;\r\n\r\n    END;\r\n\r\n    SELECT\r\n        @where_clause += N'AND   EXISTS\r\n       (\r\n           SELECT\r\n               1/0\r\n           FROM #wait_filter AS wf\r\n           WHERE wf.plan_id = qsrs.plan_id\r\n       )' + @nc10;\r\n\r\nEND;\r\n\r\n\r\n/*\r\nThis section screens out index create and alter statements because who cares\r\n*/\r\n\r\nSELECT\r\n    @current_table = 'inserting #maintenance_plans',\r\n    @sql = @isolation_level;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    SET STATISTICS XML ON;\r\n\r\nEND;\r\n\r\nSELECT\r\n    @sql += N'\r\nSELECT DISTINCT\r\n   qsp.plan_id\r\nFROM ' + @database_name_quoted + N'.sys.query_store_plan AS qsp\r\nWHERE NOT EXISTS\r\n          (\r\n              SELECT\r\n                 1/0\r\n              FROM ' + @database_name_quoted + N'.sys.query_store_query AS qsq\r\n              JOIN ' + @database_name_quoted + N'.sys.query_store_query_text AS qsqt\r\n                  ON qsqt.query_text_id = qsq.query_text_id\r\n              WHERE qsq.query_id = qsp.query_id\r\n              AND   qsqt.query_sql_text NOT LIKE ''ALTER INDEX%''\r\n              AND   qsqt.query_sql_text NOT LIKE ''CREATE%INDEX%''\r\n              AND   qsqt.query_sql_text NOT LIKE ''CREATE STATISTICS%''\r\n              AND   qsqt.query_sql_text NOT LIKE ''UPDATE STATISTICS%''\r\n              AND   qsqt.query_sql_text NOT LIKE ''SELECT StatMan%''\r\n          )\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\nIF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\nINSERT\r\n    #maintenance_plans WITH(TABLOCK)\r\n(\r\n    plan_id\r\n)\r\nEXEC sys.sp_executesql\r\n    @sql;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    SET STATISTICS XML OFF;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_update,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_info,\r\n      N'@sql nvarchar(max),\r\n        @current_table nvarchar(100)',\r\n        @sql,\r\n        @current_table;\r\n\r\nEND;\r\n\r\nSELECT\r\n    @where_clause += N'AND   NOT EXISTS\r\n          (\r\n              SELECT\r\n                  1/0\r\n              FROM #maintenance_plans AS mp\r\n              WHERE mp.plan_id = qsrs.plan_id\r\n          )' + @nc10;\r\n\r\n/*\r\nTidy up the where clause a bit\r\n*/\r\nSELECT\r\n    @where_clause =\r\n        SUBSTRING\r\n        (\r\n            @where_clause,\r\n            1,\r\n            LEN\r\n            (\r\n                @where_clause\r\n            ) - 1\r\n        );\r\n\r\n/*\r\nThis gets the plan_ids we care about\r\n*/\r\nSELECT\r\n    @current_table = 'inserting #distinct_plans',\r\n    @sql = @isolation_level;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    SET STATISTICS XML ON;\r\n\r\nEND;\r\n\r\nSELECT\r\n    @sql += N'\r\nSELECT TOP (@top)\r\n    qsrs.plan_id\r\nFROM ' + @database_name_quoted + N'.sys.query_store_runtime_stats AS qsrs\r\nWHERE qsrs.execution_type = 0\r\n' + @where_clause\r\n  + N'\r\nGROUP BY qsrs.plan_id\r\nORDER BY MAX(' +\r\nCASE @sort_order\r\n     WHEN 'cpu' THEN N'qsrs.avg_cpu_time'\r\n     WHEN 'logical reads' THEN N'qsrs.avg_logical_io_reads'\r\n     WHEN 'physical reads' THEN N'qsrs.avg_physical_io_reads'\r\n     WHEN 'writes' THEN N'qsrs.avg_logical_io_writes'\r\n     WHEN 'duration' THEN N'qsrs.avg_duration'\r\n     WHEN 'memory' THEN N'qsrs.avg_query_max_used_memory'\r\n     WHEN 'tempdb' THEN CASE WHEN @new = 1 THEN N'qsrs.avg_tempdb_space_used' ELSE N'qsrs.avg_cpu_time' END\r\n     WHEN 'executions' THEN N'qsrs.count_executions'\r\n     ELSE N'qsrs.avg_cpu_time'\r\nEND +\r\nN') DESC\r\nOPTION(RECOMPILE, OPTIMIZE FOR (@top = 9223372036854775807));' + @nc10;\r\n\r\nIF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\nINSERT\r\n    #distinct_plans WITH(TABLOCK)\r\n(\r\n    plan_id\r\n)\r\nEXEC sys.sp_executesql\r\n    @sql,\r\n    @parameters,\r\n    @top,\r\n    @start_date,\r\n    @end_date,\r\n    @execution_count,\r\n    @duration_ms;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    SET STATISTICS XML OFF;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_update,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_info,\r\n      N'@sql nvarchar(max),\r\n        @current_table nvarchar(100)',\r\n        @sql,\r\n        @current_table;\r\n\r\nEND;\r\n\r\n/*\r\nThis gets the runtime stats for the plans we care about\r\n*/\r\nSELECT\r\n    @current_table = 'inserting #query_store_runtime_stats',\r\n    @sql = @isolation_level;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    SET STATISTICS XML ON;\r\n\r\nEND;\r\n\r\nSELECT\r\n    @sql += N'\r\nSELECT\r\n    qsrs.runtime_stats_id,\r\n    qsrs.plan_id,\r\n    qsrs.runtime_stats_interval_id,\r\n    qsrs.execution_type_desc,\r\n    qsrs.first_execution_time,\r\n    qsrs.last_execution_time,\r\n    qsrs.count_executions,\r\n    (qsrs.avg_duration / 1000.),\r\n    (qsrs.last_duration / 1000.),\r\n    (qsrs.min_duration / 1000.),\r\n    (qsrs.max_duration / 1000.),\r\n    (qsrs.avg_cpu_time / 1000.),\r\n    (qsrs.last_cpu_time / 1000.),\r\n    (qsrs.min_cpu_time / 1000.),\r\n    (qsrs.max_cpu_time / 1000.),\r\n    ((qsrs.avg_logical_io_reads * 8.) / 1024.),\r\n    ((qsrs.last_logical_io_reads * 8.) / 1024.),\r\n    ((qsrs.min_logical_io_reads * 8.) / 1024.),\r\n    ((qsrs.max_logical_io_reads * 8.) / 1024.),\r\n    ((qsrs.avg_logical_io_writes * 8.) / 1024.),\r\n    ((qsrs.last_logical_io_writes * 8.) / 1024.),\r\n    ((qsrs.min_logical_io_writes * 8.) / 1024.),\r\n    ((qsrs.max_logical_io_writes * 8.) / 1024.),\r\n    ((qsrs.avg_physical_io_reads * 8.) / 1024.),\r\n    ((qsrs.last_physical_io_reads * 8.) / 1024.),\r\n    ((qsrs.min_physical_io_reads * 8.) / 1024.),\r\n    ((qsrs.max_physical_io_reads * 8.) / 1024.),\r\n    (qsrs.avg_clr_time / 1000.),\r\n    (qsrs.last_clr_time / 1000.),\r\n    (qsrs.min_clr_time / 1000.),\r\n    (qsrs.max_clr_time / 1000.),\r\n    qsrs.last_dop,\r\n    qsrs.min_dop,\r\n    qsrs.max_dop,\r\n    ((qsrs.avg_query_max_used_memory * 8.) / 1024.),\r\n    ((qsrs.last_query_max_used_memory * 8.) / 1024.),\r\n    ((qsrs.min_query_max_used_memory * 8.) / 1024.),\r\n    ((qsrs.max_query_max_used_memory * 8.) / 1024.),\r\n    qsrs.avg_rowcount,\r\n    qsrs.last_rowcount,\r\n    qsrs.min_rowcount,\r\n    qsrs.max_rowcount,';\r\n\r\nIF @new = 1\r\n    BEGIN\r\n\r\n        SELECT\r\n            @sql += N'\r\n    ((qsrs.avg_num_physical_io_reads * 8.) / 1024.),\r\n    ((qsrs.last_num_physical_io_reads * 8.) / 1024.),\r\n    ((qsrs.min_num_physical_io_reads * 8.) / 1024.),\r\n    ((qsrs.max_num_physical_io_reads * 8.) / 1024.),\r\n    (qsrs.avg_log_bytes_used / 100000000.),\r\n    (qsrs.last_log_bytes_used / 100000000.),\r\n    (qsrs.min_log_bytes_used / 100000000.),\r\n    (qsrs.max_log_bytes_used / 100000000.),\r\n    ((qsrs.avg_tempdb_space_used * 8) / 1024.),\r\n    ((qsrs.last_tempdb_space_used * 8) / 1024.),\r\n    ((qsrs.min_tempdb_space_used * 8) / 1024.),\r\n    ((qsrs.max_tempdb_space_used * 8) / 1024.),';\r\n\r\n    END;\r\n\r\nIF @new = 0\r\n    BEGIN\r\n\r\n        SELECT\r\n            @sql += N'\r\n    NULL,\r\n    NULL,\r\n    NULL,\r\n    NULL,\r\n    NULL,\r\n    NULL,\r\n    NULL,\r\n    NULL,\r\n    NULL,\r\n    NULL,\r\n    NULL,\r\n    NULL,';\r\n\r\n    END;\r\n\r\nSELECT\r\n    @sql += N'\r\n    context_settings = NULL\r\nFROM #distinct_plans AS dp\r\nCROSS APPLY\r\n(\r\n    SELECT TOP (1)\r\n        qsrs.*\r\n    FROM ' + @database_name_quoted + N'.sys.query_store_runtime_stats AS qsrs\r\n    WHERE qsrs.plan_id = dp.plan_id\r\n    AND   qsrs.execution_type = 0\r\n    ' + @where_clause\r\n  + N'\r\nORDER BY ' +\r\nCASE @sort_order\r\n     WHEN 'cpu' THEN N'qsrs.avg_cpu_time'\r\n     WHEN 'logical reads' THEN N'qsrs.avg_logical_io_reads'\r\n     WHEN 'physical reads' THEN N'qsrs.avg_physical_io_reads'\r\n     WHEN 'writes' THEN N'qsrs.avg_logical_io_writes'\r\n     WHEN 'duration' THEN N'qsrs.avg_duration'\r\n     WHEN 'memory' THEN N'qsrs.avg_query_max_used_memory'\r\n     WHEN 'tempdb' THEN CASE WHEN @new = 1 THEN N'qsrs.avg_tempdb_space_used' ELSE N'qsrs.avg_cpu_time' END\r\n     WHEN 'executions' THEN N'qsrs.count_executions'\r\n     ELSE N'qsrs.avg_cpu_time'\r\nEND + N' DESC\r\n) AS qsrs\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\nIF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\nINSERT\r\n    #query_store_runtime_stats WITH(TABLOCK)\r\n(\r\n    runtime_stats_id, plan_id, runtime_stats_interval_id, execution_type_desc,\r\n    first_execution_time, last_execution_time, count_executions,\r\n    avg_duration_ms, last_duration_ms, min_duration_ms, max_duration_ms,\r\n    avg_cpu_time_ms, last_cpu_time_ms, min_cpu_time_ms, max_cpu_time_ms,\r\n    avg_logical_io_reads_mb, last_logical_io_reads_mb, min_logical_io_reads_mb, max_logical_io_reads_mb,\r\n    avg_logical_io_writes_mb, last_logical_io_writes_mb, min_logical_io_writes_mb, max_logical_io_writes_mb,\r\n    avg_physical_io_reads_mb, last_physical_io_reads_mb, min_physical_io_reads_mb, max_physical_io_reads_mb,\r\n    avg_clr_time_ms, last_clr_time_ms, min_clr_time_ms, max_clr_time_ms,\r\n    last_dop, min_dop, max_dop,\r\n    avg_query_max_used_memory_mb, last_query_max_used_memory_mb, min_query_max_used_memory_mb, max_query_max_used_memory_mb,\r\n    avg_rowcount, last_rowcount, min_rowcount, max_rowcount,\r\n    avg_num_physical_io_reads_mb, last_num_physical_io_reads_mb, min_num_physical_io_reads_mb, max_num_physical_io_reads_mb,\r\n    avg_log_bytes_used_mb, last_log_bytes_used_mb, min_log_bytes_used_mb, max_log_bytes_used_mb,\r\n    avg_tempdb_space_used_mb, last_tempdb_space_used_mb, min_tempdb_space_used_mb, max_tempdb_space_used_mb,\r\n    context_settings\r\n)\r\nEXEC sys.sp_executesql\r\n    @sql,\r\n    @parameters,\r\n    @top,\r\n    @start_date,\r\n    @end_date,\r\n    @execution_count,\r\n    @duration_ms;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    SET STATISTICS XML OFF;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_update,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_info,\r\n      N'@sql nvarchar(max),\r\n        @current_table nvarchar(100)',\r\n        @sql,\r\n        @current_table;\r\n\r\nEND;\r\n\r\n/*\r\nThis gets context info and settings\r\n*/\r\nSELECT\r\n    @current_table = 'inserting #query_context_settings',\r\n    @sql = @isolation_level;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    SET STATISTICS XML ON;\r\n\r\nEND;\r\n\r\nSELECT\r\n    @sql += N'\r\nSELECT\r\n    context_settings_id,\r\n    set_options,\r\n    language_id,\r\n    date_format,\r\n    date_first,\r\n    status,\r\n    required_cursor_options,\r\n    acceptable_cursor_options,\r\n    merge_action_type,\r\n    default_schema_id,\r\n    is_replication_specific,\r\n    is_contained\r\nFROM ' + @database_name_quoted + N'.sys.query_context_settings;';\r\n\r\nINSERT\r\n    #query_context_settings WITH(TABLOCK)\r\n(\r\n    context_settings_id,\r\n    set_options,\r\n    language_id,\r\n    date_format,\r\n    date_first,\r\n    status,\r\n    required_cursor_options,\r\n    acceptable_cursor_options,\r\n    merge_action_type,\r\n    default_schema_id,\r\n    is_replication_specific,\r\n    is_contained\r\n)\r\nEXEC sys.sp_executesql\r\n    @sql;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    SET STATISTICS XML OFF;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_update,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_info,\r\n      N'@sql nvarchar(max),\r\n        @current_table nvarchar(100)',\r\n        @sql,\r\n        @current_table;\r\n\r\nEND;\r\n\r\n/*\r\nThis gets the query plans we're after\r\n*/\r\nSELECT\r\n    @current_table = 'inserting #query_store_plan',\r\n    @sql = @isolation_level;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    SET STATISTICS XML ON;\r\n\r\nEND;\r\n\r\nSELECT\r\n    @sql += N'\r\nSELECT\r\n    qsp.plan_id,\r\n    qsp.query_id,\r\n    all_plan_ids =\r\n        STUFF\r\n        (\r\n            (\r\n                SELECT DISTINCT\r\n                    '', '' +\r\n                    RTRIM\r\n                        (qsp_plans.plan_id)\r\n                FROM ' + @database_name_quoted + N'.sys.query_store_plan AS qsp_plans\r\n                WHERE qsp_plans.query_id = qsp.query_id\r\n                FOR XML PATH(''''), TYPE\r\n            ).value(''./text()[1]'', ''varchar(max)''),\r\n            1,\r\n            2,\r\n            ''''\r\n        ),\r\n    qsp.plan_group_id,\r\n    qsp.engine_version,\r\n    qsp.compatibility_level,\r\n    qsp.query_plan_hash,\r\n    qsp.query_plan,\r\n    qsp.is_online_index_plan,\r\n    qsp.is_trivial_plan,\r\n    qsp.is_parallel_plan,\r\n    qsp.is_forced_plan,\r\n    qsp.is_natively_compiled,\r\n    qsp.force_failure_count,\r\n    qsp.last_force_failure_reason,\r\n    qsp.last_force_failure_reason_desc,\r\n    qsp.count_compiles,\r\n    qsp.initial_compile_start_time,\r\n    qsp.last_compile_start_time,\r\n    qsp.last_execution_time,\r\n    (qsp.avg_compile_duration / 1000.),\r\n    (qsp.last_compile_duration / 1000.),';\r\n\r\nIF @new = 1\r\nBEGIN\r\n    SELECT\r\n        @sql += N'\r\n    qsp.plan_forcing_type,\r\n    qsp.plan_forcing_type_desc';\r\nEND;\r\n\r\nIF @new = 0\r\nBEGIN\r\n    SELECT\r\n        @sql += N'\r\n    NULL,\r\n    NULL';\r\nEND;\r\n\r\nSELECT\r\n    @sql += N'\r\nFROM #query_store_runtime_stats AS qsrs\r\nCROSS APPLY\r\n(\r\n    SELECT TOP (@plans_top)\r\n        qsp.*\r\n    FROM ' + @database_name_quoted + N'.sys.query_store_plan AS qsp\r\n    WHERE qsp.plan_id = qsrs.plan_id\r\n    AND   qsp.is_online_index_plan = 0\r\n    ORDER BY qsp.last_execution_time DESC\r\n) AS qsp\r\nOPTION(RECOMPILE, OPTIMIZE FOR (@plans_top = 9223372036854775807));' + @nc10;\r\n\r\nIF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\nINSERT\r\n    #query_store_plan WITH(TABLOCK)\r\n(\r\n    plan_id,\r\n    query_id,\r\n    all_plan_ids,\r\n    plan_group_id,\r\n    engine_version,\r\n    compatibility_level,\r\n    query_plan_hash,\r\n    query_plan,\r\n    is_online_index_plan,\r\n    is_trivial_plan,\r\n    is_parallel_plan,\r\n    is_forced_plan,\r\n    is_natively_compiled,\r\n    force_failure_count,\r\n    last_force_failure_reason,\r\n    last_force_failure_reason_desc,\r\n    count_compiles,\r\n    initial_compile_start_time,\r\n    last_compile_start_time,\r\n    last_execution_time,\r\n    avg_compile_duration_ms,\r\n    last_compile_duration_ms,\r\n    plan_forcing_type,\r\n    plan_forcing_type_desc\r\n)\r\nEXEC sys.sp_executesql\r\n    @sql,\r\n  N'@plans_top bigint',\r\n    @plans_top;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    SET STATISTICS XML OFF;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_update,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_info,\r\n      N'@sql nvarchar(max),\r\n        @current_table nvarchar(100)',\r\n        @sql,\r\n        @current_table;\r\n\r\nEND;\r\n\r\n/*\r\nThis gets some query information\r\n*/\r\nSELECT\r\n    @current_table = 'inserting #query_store_query',\r\n    @sql = @isolation_level;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    SET STATISTICS XML ON;\r\n\r\nEND;\r\n\r\nSELECT\r\n    @sql += N'\r\nSELECT\r\n    qsq.query_id,\r\n    qsq.query_text_id,\r\n    qsq.context_settings_id,\r\n    qsq.object_id,\r\n    qsq.batch_sql_handle,\r\n    qsq.query_hash,\r\n    qsq.is_internal_query,\r\n    qsq.query_parameterization_type,\r\n    qsq.query_parameterization_type_desc,\r\n    qsq.initial_compile_start_time,\r\n    qsq.last_compile_start_time,\r\n    qsq.last_execution_time,\r\n    qsq.last_compile_batch_sql_handle,\r\n    qsq.last_compile_batch_offset_start,\r\n    qsq.last_compile_batch_offset_end,\r\n    qsq.count_compiles,\r\n    (qsq.avg_compile_duration / 1000.),\r\n    (qsq.last_compile_duration / 1000.),\r\n    (qsq.avg_bind_duration / 1000.),\r\n    (qsq.last_bind_duration / 1000.),\r\n    (qsq.avg_bind_cpu_time / 1000.),\r\n    (qsq.last_bind_cpu_time / 1000.),\r\n    (qsq.avg_optimize_duration / 1000.),\r\n    (qsq.last_optimize_duration / 1000.),\r\n    (qsq.avg_optimize_cpu_time / 1000.),\r\n    (qsq.last_optimize_cpu_time / 1000.),\r\n    ((qsq.avg_compile_memory_kb * 8) / 1024.),\r\n    ((qsq.last_compile_memory_kb * 8) / 1024.),\r\n    ((qsq.max_compile_memory_kb * 8) / 1024.),\r\n    qsq.is_clouddb_internal_query,\r\n    @database_id\r\nFROM #query_store_plan AS qsp\r\nCROSS APPLY\r\n(\r\n    SELECT TOP (1)\r\n        qsq.*\r\n    FROM ' + @database_name_quoted + N'.sys.query_store_query AS qsq\r\n    WHERE qsq.query_id = qsp.query_id\r\n    ORDER BY qsq.last_execution_time DESC\r\n) AS qsq\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\nIF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\nINSERT\r\n    #query_store_query WITH(TABLOCK)\r\n(\r\n    query_id,\r\n    query_text_id,\r\n    context_settings_id,\r\n    object_id,\r\n    batch_sql_handle,\r\n    query_hash,\r\n    is_internal_query,\r\n    query_parameterization_type,\r\n    query_parameterization_type_desc,\r\n    initial_compile_start_time,\r\n    last_compile_start_time,\r\n    last_execution_time,\r\n    last_compile_batch_sql_handle,\r\n    last_compile_batch_offset_start,\r\n    last_compile_batch_offset_end,\r\n    count_compiles,\r\n    avg_compile_duration_ms,\r\n    last_compile_duration_ms,\r\n    avg_bind_duration_ms,\r\n    last_bind_duration_ms,\r\n    avg_bind_cpu_time_ms,\r\n    last_bind_cpu_time_ms,\r\n    avg_optimize_duration_ms,\r\n    last_optimize_duration_ms,\r\n    avg_optimize_cpu_time_ms,\r\n    last_optimize_cpu_time_ms,\r\n    avg_compile_memory_mb,\r\n    last_compile_memory_mb,\r\n    max_compile_memory_mb,\r\n    is_clouddb_internal_query,\r\n    database_id\r\n)\r\nEXEC sys.sp_executesql\r\n    @sql,\r\n  N'@database_id int',\r\n    @database_id;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    SET STATISTICS XML OFF;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_update,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_info,\r\n      N'@sql nvarchar(max),\r\n        @current_table nvarchar(100)',\r\n        @sql,\r\n        @current_table;\r\n\r\nEND;\r\n\r\n/*\r\nThis gets the query text for them!\r\n*/\r\nSELECT\r\n    @current_table = 'inserting #query_store_query_text',\r\n    @sql = @isolation_level;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    SET STATISTICS XML ON;\r\n\r\nEND;\r\n\r\n\r\nSELECT\r\n    @sql += N'\r\nSELECT\r\n    qsqt.query_text_id,\r\n    query_sql_text =\r\n        (\r\n             SELECT\r\n                 [processing-instruction(query)] =\r\n                     qsqt.query_sql_text\r\n             FOR XML PATH(''''), TYPE\r\n        ),\r\n    qsqt.statement_sql_handle,\r\n    qsqt.is_part_of_encrypted_module,\r\n    qsqt.has_restricted_text\r\nFROM #query_store_query AS qsq\r\nCROSS APPLY\r\n(\r\n    SELECT TOP (1)\r\n        qsqt.*\r\n    FROM ' + @database_name_quoted + N'.sys.query_store_query_text AS qsqt\r\n    WHERE qsqt.query_text_id = qsq.query_text_id\r\n) AS qsqt\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\nIF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\nINSERT\r\n    #query_store_query_text WITH(TABLOCK)\r\n(\r\n    query_text_id,\r\n    query_sql_text,\r\n    statement_sql_handle,\r\n    is_part_of_encrypted_module,\r\n    has_restricted_text\r\n)\r\nEXEC sys.sp_executesql\r\n    @sql;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    SET STATISTICS XML OFF;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_update,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_info,\r\n      N'@sql nvarchar(max),\r\n        @current_table nvarchar(100)',\r\n        @sql,\r\n        @current_table;\r\n\r\nEND;\r\n\r\n/*\r\nHere we try to get some data from the \"plan cache\"\r\nthat isn't available in Query Store :(\r\n*/\r\nSELECT\r\n    @sql = N'',\r\n    @current_table = 'inserting #dm_exec_query_stats';\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    SET STATISTICS XML ON;\r\n\r\nEND;\r\n\r\nINSERT\r\n    #dm_exec_query_stats WITH(TABLOCK)\r\n(\r\n    statement_sql_handle,\r\n    total_grant_mb,\r\n    last_grant_mb,\r\n    min_grant_mb,\r\n    max_grant_mb,\r\n    total_used_grant_mb,\r\n    last_used_grant_mb,\r\n    min_used_grant_mb,\r\n    max_used_grant_mb,\r\n    total_ideal_grant_mb,\r\n    last_ideal_grant_mb,\r\n    min_ideal_grant_mb,\r\n    max_ideal_grant_mb,\r\n    total_reserved_threads,\r\n    last_reserved_threads,\r\n    min_reserved_threads,\r\n    max_reserved_threads,\r\n    total_used_threads,\r\n    last_used_threads,\r\n    min_used_threads,\r\n    max_used_threads\r\n)\r\nSELECT\r\n    deqs.statement_sql_handle,\r\n    MAX(deqs.total_grant_kb) / 1024.,\r\n    MAX(deqs.last_grant_kb) / 1024.,\r\n    MAX(deqs.min_grant_kb) / 1024.,\r\n    MAX(deqs.max_grant_kb) / 1024.,\r\n    MAX(deqs.total_used_grant_kb) / 1024.,\r\n    MAX(deqs.last_used_grant_kb) / 1024.,\r\n    MAX(deqs.min_used_grant_kb) / 1024.,\r\n    MAX(deqs.max_used_grant_kb) / 1024.,\r\n    MAX(deqs.total_ideal_grant_kb) / 1024.,\r\n    MAX(deqs.last_ideal_grant_kb) / 1024.,\r\n    MAX(deqs.min_ideal_grant_kb) / 1024.,\r\n    MAX(deqs.max_ideal_grant_kb) / 1024.,\r\n    MAX(deqs.total_reserved_threads),\r\n    MAX(deqs.last_reserved_threads),\r\n    MAX(deqs.min_reserved_threads),\r\n    MAX(deqs.max_reserved_threads),\r\n    MAX(deqs.total_used_threads),\r\n    MAX(deqs.last_used_threads),\r\n    MAX(deqs.min_used_threads),\r\n    MAX(deqs.max_used_threads)\r\nFROM sys.dm_exec_query_stats AS deqs\r\nWHERE EXISTS\r\n      (\r\n          SELECT\r\n              1/0\r\n          FROM #query_store_query_text AS qsqt\r\n          WHERE qsqt.statement_sql_handle = deqs.statement_sql_handle\r\n      )\r\nGROUP BY deqs.statement_sql_handle\r\nOPTION(RECOMPILE);\r\n\r\nSELECT\r\n    @rc = @@ROWCOUNT;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    SET STATISTICS XML OFF;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_update,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_info,\r\n      N'@sql nvarchar(max),\r\n        @current_table nvarchar(100)',\r\n        @sql,\r\n        @current_table;\r\n\r\nEND;\r\n\r\nIF @rc > 0\r\nBEGIN\r\n\r\n    SELECT\r\n        @current_table = 'updating #dm_exec_query_stats';\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_insert,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n\r\n        SET STATISTICS XML ON;\r\n\r\n    END;\r\n\r\n    UPDATE qsqt\r\n        SET\r\n            qsqt.total_grant_mb = deqs.total_grant_mb,\r\n            qsqt.last_grant_mb = deqs.last_grant_mb,\r\n            qsqt.min_grant_mb = deqs.min_grant_mb,\r\n            qsqt.max_grant_mb = deqs.max_grant_mb,\r\n            qsqt.total_used_grant_mb = deqs.total_used_grant_mb,\r\n            qsqt.last_used_grant_mb = deqs.last_used_grant_mb,\r\n            qsqt.min_used_grant_mb = deqs.min_used_grant_mb,\r\n            qsqt.max_used_grant_mb = deqs.max_used_grant_mb,\r\n            qsqt.total_ideal_grant_mb = deqs.total_ideal_grant_mb,\r\n            qsqt.last_ideal_grant_mb = deqs.last_ideal_grant_mb,\r\n            qsqt.min_ideal_grant_mb = deqs.min_ideal_grant_mb,\r\n            qsqt.max_ideal_grant_mb = deqs.max_ideal_grant_mb,\r\n            qsqt.total_reserved_threads = deqs.total_reserved_threads,\r\n            qsqt.last_reserved_threads = deqs.last_reserved_threads,\r\n            qsqt.min_reserved_threads = deqs.min_reserved_threads,\r\n            qsqt.max_reserved_threads = deqs.max_reserved_threads,\r\n            qsqt.total_used_threads = deqs.total_used_threads,\r\n            qsqt.last_used_threads = deqs.last_used_threads,\r\n            qsqt.min_used_threads = deqs.min_used_threads,\r\n            qsqt.max_used_threads = deqs.max_used_threads\r\n    FROM #query_store_query_text AS qsqt\r\n    JOIN #dm_exec_query_stats AS deqs\r\n        ON qsqt.statement_sql_handle = deqs.statement_sql_handle\r\n    OPTION(RECOMPILE);\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        SET STATISTICS XML OFF;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_update,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_info,\r\n          N'@sql nvarchar(max),\r\n            @current_table nvarchar(100)',\r\n            @sql,\r\n            @current_table;\r\n\r\n    END;\r\n\r\nEND;\r\n\r\n/*\r\nLet's check on settings, etc.\r\nWe do this first so we can see if wait stats capture mode is true more easily\r\n*/\r\nSELECT\r\n    @current_table = 'inserting #database_query_store_options',\r\n    @sql = @isolation_level;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_insert,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    SET STATISTICS XML ON;\r\n\r\nEND;\r\n\r\nSELECT\r\n    @sql += N'\r\nSELECT\r\n    dqso.desired_state_desc,\r\n    dqso.actual_state_desc,\r\n    readonly_reason =\r\n        CASE dqso.readonly_reason\r\n             WHEN 0\r\n             THEN ''None''\r\n             WHEN 2\r\n             THEN ''Database in single user mode''\r\n             WHEN 4\r\n             THEN ''Database is in emergency mode''\r\n             WHEN 8\r\n             THEN ''Database is AG secondary''\r\n             WHEN 65536\r\n             THEN ''Reached max size: '' +\r\n                  FORMAT(dqso.current_storage_size_mb, ''N0'') +\r\n                  '' of '' +\r\n                  FORMAT(dqso.max_storage_size_mb, ''N0'') +\r\n                  ''.''\r\n             WHEN 131072\r\n             THEN ''The number of different statements in Query Store has reached the internal memory limit''\r\n             WHEN 262144\r\n             THEN ''Size of in-memory items waiting to be persisted on disk has reached the internal memory limit''\r\n             WHEN 524288\r\n             THEN ''Database has reached disk size limit''\r\n             ELSE ''WOAH''\r\n        END,\r\n    dqso.current_storage_size_mb,\r\n    dqso.flush_interval_seconds,\r\n    dqso.interval_length_minutes,\r\n    dqso.max_storage_size_mb,\r\n    dqso.stale_query_threshold_days,\r\n    dqso.max_plans_per_query,\r\n    dqso.query_capture_mode_desc,'\r\n    +\r\n    CASE\r\n        WHEN (@product_version > 14\r\n                OR @azure = 1)\r\n        THEN N'\r\n    dqso.capture_policy_execution_count,\r\n    dqso.capture_policy_total_compile_cpu_time_ms,\r\n    dqso.capture_policy_total_execution_cpu_time_ms,\r\n    dqso.capture_policy_stale_threshold_hours,'\r\n        ELSE N'\r\n    NULL,\r\n    NULL,\r\n    NULL,\r\n    NULL,'\r\n    END\r\n    + N'\r\n    dqso.size_based_cleanup_mode_desc,'\r\n    +\r\n    CASE\r\n        WHEN (@product_version = 13\r\n                AND @azure = 0)\r\n        THEN N'\r\n    NULL'\r\n        ELSE N'\r\n    dqso.wait_stats_capture_mode_desc'\r\n    END\r\n    + N'\r\nFROM ' + @database_name_quoted + N'.sys.database_query_store_options AS dqso\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\nIF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\nINSERT\r\n    #database_query_store_options WITH(TABLOCK)\r\n(\r\n    desired_state_desc,\r\n    actual_state_desc,\r\n    readonly_reason,\r\n    current_storage_size_mb,\r\n    flush_interval_seconds,\r\n    interval_length_minutes,\r\n    max_storage_size_mb,\r\n    stale_query_threshold_days,\r\n    max_plans_per_query,\r\n    query_capture_mode_desc,\r\n    capture_policy_execution_count,\r\n    capture_policy_total_compile_cpu_time_ms,\r\n    capture_policy_total_execution_cpu_time_ms,\r\n    capture_policy_stale_threshold_hours,\r\n    size_based_cleanup_mode_desc,\r\n    wait_stats_capture_mode_desc\r\n)\r\nEXEC sys.sp_executesql\r\n   @sql;\r\n\r\nIF @troubleshoot_performance = 1\r\nBEGIN\r\n\r\n    SET STATISTICS XML OFF;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_update,\r\n      N'@current_table nvarchar(100)',\r\n        @current_table;\r\n\r\n    EXEC sys.sp_executesql\r\n        @troubleshoot_info,\r\n      N'@sql nvarchar(max),\r\n        @current_table nvarchar(100)',\r\n        @sql,\r\n        @current_table;\r\n\r\nEND;\r\n\r\n/*\r\nIf wait stats are available, we'll grab them here\r\n*/\r\nIF\r\n(\r\n    @new = 1\r\n      AND EXISTS\r\n          (\r\n              SELECT\r\n                  1/0\r\n              FROM #database_query_store_options AS dqso\r\n              WHERE dqso.wait_stats_capture_mode_desc = 'ON'\r\n          )\r\n)\r\nBEGIN\r\n\r\n    SELECT\r\n        @current_table = 'inserting #query_store_wait_stats',\r\n        @sql = @isolation_level;\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_insert,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n\r\n        SET STATISTICS XML ON;\r\n\r\n    END;\r\n\r\n    SELECT\r\n        @sql += N'\r\nSELECT\r\n    qsws.plan_id,\r\n    qsws.wait_category_desc,\r\n    total_query_wait_time_ms =\r\n        SUM(qsws.total_query_wait_time_ms),\r\n    avg_query_wait_time_ms =\r\n        SUM(qsws.avg_query_wait_time_ms),\r\n    last_query_wait_time_ms =\r\n        SUM(qsws.last_query_wait_time_ms),\r\n    min_query_wait_time_ms =\r\n        SUM(qsws.min_query_wait_time_ms),\r\n    max_query_wait_time_ms =\r\n        SUM(qsws.max_query_wait_time_ms)\r\nFROM #query_store_runtime_stats AS qsrs\r\nCROSS APPLY\r\n(\r\n    SELECT TOP (5)\r\n        qsws.*\r\n    FROM ' + @database_name_quoted + N'.sys.query_store_wait_stats AS qsws\r\n    WHERE qsws.runtime_stats_interval_id = qsrs.runtime_stats_interval_id\r\n    AND   qsws.plan_id = qsrs.plan_id\r\n    AND   qsws.execution_type = 0\r\n    AND   qsws.wait_category > 0\r\n    ORDER BY qsws.avg_query_wait_time_ms DESC\r\n) AS qsws\r\nGROUP BY\r\n    qsws.plan_id,\r\n    qsws.wait_category_desc\r\nHAVING SUM(qsws.min_query_wait_time_ms) >= 0.\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\n    IF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\n    INSERT\r\n        #query_store_wait_stats WITH(TABLOCK)\r\n    (\r\n        plan_id,\r\n        wait_category_desc,\r\n        total_query_wait_time_ms,\r\n        avg_query_wait_time_ms,\r\n        last_query_wait_time_ms,\r\n        min_query_wait_time_ms,\r\n        max_query_wait_time_ms\r\n    )\r\n    EXEC sys.sp_executesql\r\n        @sql;\r\n\r\n    IF @troubleshoot_performance = 1\r\n    BEGIN\r\n\r\n        SET STATISTICS XML OFF;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_update,\r\n          N'@current_table nvarchar(100)',\r\n            @current_table;\r\n\r\n        EXEC sys.sp_executesql\r\n            @troubleshoot_info,\r\n          N'@sql nvarchar(max),\r\n            @current_table nvarchar(100)',\r\n            @sql,\r\n            @current_table;\r\n\r\n    END;\r\n\r\nEND;\r\n\r\n/*\r\nUpdate things to get the context settings for each query\r\n*/\r\nSELECT\r\n    @current_table = 'updating context_settings in #query_store_runtime_stats';\r\n\r\nUPDATE qsrs\r\n    SET qsrs.context_settings =\r\n        SUBSTRING\r\n        (\r\n            CASE\r\n                WHEN\r\n                    CONVERT\r\n                    (\r\n                        int,\r\n                        qcs.set_options\r\n                    ) & 1 = 1\r\n                THEN ', ANSI_PADDING'\r\n                ELSE ''\r\n            END +\r\n            CASE\r\n                WHEN\r\n                    CONVERT\r\n                    (\r\n                        int,\r\n                        qcs.set_options\r\n                    ) & 8 = 8\r\n                THEN ', CONCAT_NULL_YIELDS_NULL'\r\n                ELSE ''\r\n            END +\r\n            CASE\r\n                WHEN\r\n                    CONVERT\r\n                    (\r\n                        int,\r\n                        qcs.set_options\r\n                    ) & 16 = 16\r\n                THEN ', ANSI_WARNINGS'\r\n                ELSE ''\r\n            END +\r\n            CASE\r\n                WHEN\r\n                    CONVERT\r\n                    (\r\n                        int,\r\n                        qcs.set_options\r\n                    ) & 32 = 32\r\n                THEN ', ANSI_NULLS'\r\n                ELSE ''\r\n            END +\r\n            CASE\r\n                WHEN\r\n                    CONVERT\r\n                    (\r\n                        int,\r\n                        qcs.set_options\r\n                    ) & 64 = 64\r\n                THEN ', QUOTED_IDENTIFIER'\r\n                ELSE ''\r\n            END +\r\n            CASE\r\n                WHEN\r\n                    CONVERT\r\n                    (\r\n                        int,\r\n                        qcs.set_options\r\n                    ) & 4096 = 4096\r\n                THEN ', ARITH_ABORT'\r\n                ELSE ''\r\n            END +\r\n            CASE\r\n                WHEN\r\n                    CONVERT\r\n                    (\r\n                        int,\r\n                        qcs.set_options\r\n                    ) & 8192 = 8192\r\n                THEN ', NUMERIC_ROUNDABORT'\r\n                ELSE ''\r\n            END,\r\n            2,\r\n            256\r\n        )\r\nFROM #query_store_runtime_stats AS qsrs\r\nJOIN #query_store_plan AS qsp\r\n    ON qsrs.plan_id = qsp.plan_id\r\nJOIN #query_store_query AS qsq\r\n    ON qsp.query_id = qsq.query_id\r\nJOIN #query_context_settings AS qcs\r\n    ON qsq.context_settings_id = qcs.context_settings_id\r\nOPTION(RECOMPILE);\r\n\r\n/*\r\nThis is where we start returning results\r\n*/\r\nIF EXISTS\r\n   (\r\n      SELECT\r\n          1/0\r\n      FROM #query_store_runtime_stats AS qsrs\r\n   )\r\nBEGIN\r\n\r\n    SELECT\r\n        @sql = @isolation_level,\r\n        @current_table = 'selecting #query_store_wait_stats';\r\n\r\n    SELECT\r\n        @sql += N'\r\nSELECT\r\n    x.*\r\nFROM\r\n(';\r\n\r\n    /*\r\n    Expert mode returns more columns from runtime stats\r\n    */\r\n    IF\r\n      (\r\n          @expert_mode = 1\r\n            AND @format_output = 0\r\n      )\r\n    BEGIN\r\n\r\n        SELECT\r\n            @sql += N'\r\n    SELECT\r\n        source =\r\n            ''runtime_stats'',\r\n        qsp.query_id,\r\n        qsrs.plan_id,\r\n        qsp.all_plan_ids,\r\n        qsrs.execution_type_desc,\r\n        qsq.object_name,\r\n        qsqt.query_sql_text,\r\n        qsp.compatibility_level,\r\n        query_plan = TRY_CONVERT(XML, qsp.query_plan),'\r\n        +\r\n            CASE @new\r\n                 WHEN 1\r\n                 THEN\r\n        N'\r\n        qsp.plan_forcing_type_desc,\r\n        w.top_waits,'\r\n                 ELSE\r\n        N''\r\n            END + N'\r\n        qsrs.first_execution_time,\r\n        qsrs.last_execution_time,\r\n        qsrs.count_executions,\r\n        qsrs.executions_per_second,\r\n        qsrs.avg_duration_ms,\r\n        qsrs.total_duration_ms,\r\n        qsrs.last_duration_ms,\r\n        qsrs.min_duration_ms,\r\n        qsrs.max_duration_ms,\r\n        qsrs.avg_cpu_time_ms,\r\n        qsrs.total_cpu_time_ms,\r\n        qsrs.last_cpu_time_ms,\r\n        qsrs.min_cpu_time_ms,\r\n        qsrs.max_cpu_time_ms,\r\n        qsrs.avg_logical_io_reads_mb,\r\n        qsrs.total_logical_io_reads_mb,\r\n        qsrs.last_logical_io_reads_mb,\r\n        qsrs.min_logical_io_reads_mb,\r\n        qsrs.max_logical_io_reads_mb,\r\n        qsrs.avg_logical_io_writes_mb,\r\n        qsrs.total_logical_io_writes_mb,\r\n        qsrs.last_logical_io_writes_mb,\r\n        qsrs.min_logical_io_writes_mb,\r\n        qsrs.max_logical_io_writes_mb,\r\n        qsrs.avg_physical_io_reads_mb,\r\n        qsrs.total_physical_io_reads_mb,\r\n        qsrs.last_physical_io_reads_mb,\r\n        qsrs.min_physical_io_reads_mb,\r\n        qsrs.max_physical_io_reads_mb,\r\n        qsrs.avg_clr_time_ms,\r\n        qsrs.total_clr_time_ms,\r\n        qsrs.last_clr_time_ms,\r\n        qsrs.min_clr_time_ms,\r\n        qsrs.max_clr_time_ms,\r\n        qsrs.last_dop,\r\n        qsrs.min_dop,\r\n        qsrs.max_dop,\r\n        qsrs.avg_query_max_used_memory_mb,\r\n        qsrs.total_query_max_used_memory_mb,\r\n        qsrs.last_query_max_used_memory_mb,\r\n        qsrs.min_query_max_used_memory_mb,\r\n        qsrs.max_query_max_used_memory_mb,\r\n        qsrs.avg_rowcount,\r\n        qsrs.total_rowcount,\r\n        qsrs.last_rowcount,\r\n        qsrs.min_rowcount,\r\n        qsrs.max_rowcount,'\r\n        +\r\n            CASE @new\r\n                 WHEN 1\r\n                 THEN\r\n        N'\r\n        qsrs.avg_num_physical_io_reads_mb,\r\n        qsrs.total_num_physical_io_reads_mb,\r\n        qsrs.last_num_physical_io_reads_mb,\r\n        qsrs.min_num_physical_io_reads_mb,\r\n        qsrs.max_num_physical_io_reads_mb,\r\n        qsrs.avg_log_bytes_used_mb,\r\n        qsrs.total_log_bytes_used_mb,\r\n        qsrs.last_log_bytes_used_mb,\r\n        qsrs.min_log_bytes_used_mb,\r\n        qsrs.max_log_bytes_used_mb,\r\n        qsrs.avg_tempdb_space_used_mb,\r\n        qsrs.total_tempdb_space_used_mb,\r\n        qsrs.last_tempdb_space_used_mb,\r\n        qsrs.min_tempdb_space_used_mb,\r\n        qsrs.max_tempdb_space_used_mb,'\r\n                 ELSE\r\n        N''\r\n            END + N'\r\n        qsrs.context_settings,\r\n        n =\r\n            ROW_NUMBER() OVER\r\n            (\r\n                PARTITION BY\r\n                    qsrs.plan_id\r\n                ORDER BY\r\n                    ' +\r\n    CASE @sort_order\r\n        WHEN 'cpu' THEN N'qsrs.avg_cpu_time_ms'\r\n        WHEN 'logical reads' THEN N'qsrs.avg_logical_io_reads_mb'\r\n        WHEN 'physical reads' THEN N'qsrs.avg_physical_io_reads_mb'\r\n        WHEN 'writes' THEN N'qsrs.avg_logical_io_writes_mb'\r\n        WHEN 'duration' THEN N'qsrs.avg_duration_ms'\r\n        WHEN 'memory' THEN N'qsrs.avg_query_max_used_memory_mb'\r\n        WHEN 'tempdb' THEN CASE WHEN @new = 1 THEN N'qsrs.avg_tempdb_space_used_mb' ELSE N'qsrs.avg_cpu_time' END\r\n        WHEN 'executions' THEN N'qsrs.count_executions'\r\n        ELSE N'qsrs.avg_cpu_time_ms'\r\n    END + N' DESC\r\n            )';\r\n\r\n    END;\r\n\r\n    /*\r\n    Do we want to format things?\r\n    */\r\n    IF\r\n      (\r\n          @expert_mode = 1\r\n            AND @format_output = 1\r\n      )\r\n    BEGIN\r\n\r\n        SELECT\r\n            @sql += N'\r\n    SELECT\r\n        source =\r\n            ''runtime_stats'',\r\n        qsp.query_id,\r\n        qsrs.plan_id,\r\n        qsp.all_plan_ids,\r\n        qsrs.execution_type_desc,\r\n        qsq.object_name,\r\n        qsqt.query_sql_text,\r\n        qsp.compatibility_level,\r\n        query_plan = TRY_CONVERT(XML, qsp.query_plan),'\r\n        +\r\n            CASE @new\r\n                 WHEN 1\r\n                 THEN\r\n        N'\r\n        qsp.plan_forcing_type_desc,\r\n        w.top_waits,'\r\n                 ELSE\r\n        N''\r\n            END + N'\r\n        qsrs.first_execution_time,\r\n        qsrs.last_execution_time,\r\n        count_executions = FORMAT(qsrs.count_executions, ''N0''),\r\n        executions_per_second = FORMAT(qsrs.executions_per_second, ''N0''),\r\n        avg_duration_ms = FORMAT(qsrs.avg_duration_ms, ''N0''),\r\n        total_duration_ms = FORMAT(qsrs.total_duration_ms, ''N0''),\r\n        last_duration_ms = FORMAT(qsrs.last_duration_ms, ''N0''),\r\n        min_duration_ms = FORMAT(qsrs.min_duration_ms, ''N0''),\r\n        max_duration_ms = FORMAT(qsrs.max_duration_ms, ''N0''),\r\n        avg_cpu_time_ms = FORMAT(qsrs.avg_cpu_time_ms, ''N0''),\r\n        total_cpu_time_ms = FORMAT(qsrs.total_cpu_time_ms, ''N0''),\r\n        last_cpu_time_ms = FORMAT(qsrs.last_cpu_time_ms, ''N0''),\r\n        min_cpu_time_ms = FORMAT(qsrs.min_cpu_time_ms, ''N0''),\r\n        max_cpu_time_ms = FORMAT(qsrs.max_cpu_time_ms, ''N0''),\r\n        avg_logical_io_reads_mb = FORMAT(qsrs.avg_logical_io_reads_mb, ''N0''),\r\n        total_logical_io_reads_mb = FORMAT(qsrs.total_logical_io_reads_mb, ''N0''),\r\n        last_logical_io_reads_mb = FORMAT(qsrs.last_logical_io_reads_mb, ''N0''),\r\n        min_logical_io_reads_mb = FORMAT(qsrs.min_logical_io_reads_mb, ''N0''),\r\n        max_logical_io_reads_mb = FORMAT(qsrs.max_logical_io_reads_mb, ''N0''),\r\n        avg_logical_io_writes_mb = FORMAT(qsrs.avg_logical_io_writes_mb, ''N0''),\r\n        total_logical_io_writes_mb = FORMAT(qsrs.total_logical_io_writes_mb, ''N0''),\r\n        last_logical_io_writes_mb = FORMAT(qsrs.last_logical_io_writes_mb, ''N0''),\r\n        min_logical_io_writes_mb = FORMAT(qsrs.min_logical_io_writes_mb, ''N0''),\r\n        max_logical_io_writes_mb = FORMAT(qsrs.max_logical_io_writes_mb, ''N0''),\r\n        avg_physical_io_reads_mb = FORMAT(qsrs.avg_physical_io_reads_mb, ''N0''),\r\n        total_physical_io_reads_mb = FORMAT(qsrs.total_physical_io_reads_mb, ''N0''),\r\n        last_physical_io_reads_mb = FORMAT(qsrs.last_physical_io_reads_mb, ''N0''),\r\n        min_physical_io_reads_mb = FORMAT(qsrs.min_physical_io_reads_mb, ''N0''),\r\n        max_physical_io_reads_mb = FORMAT(qsrs.max_physical_io_reads_mb, ''N0''),\r\n        avg_clr_time_ms = FORMAT(qsrs.avg_clr_time_ms, ''N0''),\r\n        total_clr_time_ms = FORMAT(qsrs.total_clr_time_ms, ''N0''),\r\n        last_clr_time_ms = FORMAT(qsrs.last_clr_time_ms, ''N0''),\r\n        min_clr_time_ms = FORMAT(qsrs.min_clr_time_ms, ''N0''),\r\n        max_clr_time_ms = FORMAT(qsrs.max_clr_time_ms, ''N0''),\r\n        qsrs.last_dop,\r\n        qsrs.min_dop,\r\n        qsrs.max_dop,\r\n        avg_query_max_used_memory_mb = FORMAT(qsrs.avg_query_max_used_memory_mb, ''N0''),\r\n        total_query_max_used_memory_mb = FORMAT(qsrs.total_query_max_used_memory_mb, ''N0''),\r\n        last_query_max_used_memory_mb = FORMAT(qsrs.last_query_max_used_memory_mb, ''N0''),\r\n        min_query_max_used_memory_mb = FORMAT(qsrs.min_query_max_used_memory_mb, ''N0''),\r\n        max_query_max_used_memory_mb = FORMAT(qsrs.max_query_max_used_memory_mb, ''N0''),\r\n        avg_rowcount = FORMAT(qsrs.avg_rowcount, ''N0''),\r\n        total_rowcount = FORMAT(qsrs.total_rowcount, ''N0''),\r\n        last_rowcount = FORMAT(qsrs.last_rowcount, ''N0''),\r\n        min_rowcount = FORMAT(qsrs.min_rowcount, ''N0''),\r\n        max_rowcount = FORMAT(qsrs.max_rowcount, ''N0''),'\r\n        +\r\n            CASE @new\r\n                 WHEN 1\r\n                 THEN\r\n        CONVERT\r\n        (\r\n            nvarchar(max),\r\n        N'\r\n        avg_num_physical_io_reads_mb = FORMAT(qsrs.avg_num_physical_io_reads_mb, ''N0''),\r\n        total_num_physical_io_reads_mb = FORMAT(qsrs.total_num_physical_io_reads_mb, ''N0''),\r\n        last_num_physical_io_reads_mb = FORMAT(qsrs.last_num_physical_io_reads_mb, ''N0''),\r\n        min_num_physical_io_reads_mb = FORMAT(qsrs.min_num_physical_io_reads_mb, ''N0''),\r\n        max_num_physical_io_reads_mb = FORMAT(qsrs.max_num_physical_io_reads_mb, ''N0''),\r\n        avg_log_bytes_used_mb = FORMAT(qsrs.avg_log_bytes_used_mb, ''N0''),\r\n        total_log_bytes_used_mb = FORMAT(qsrs.total_log_bytes_used_mb, ''N0''),\r\n        last_log_bytes_used_mb = FORMAT(qsrs.last_log_bytes_used_mb, ''N0''),\r\n        min_log_bytes_used_mb = FORMAT(qsrs.min_log_bytes_used_mb, ''N0''),\r\n        max_log_bytes_used_mb = FORMAT(qsrs.max_log_bytes_used_mb, ''N0''),\r\n        avg_tempdb_space_used_mb = FORMAT(qsrs.avg_tempdb_space_used_mb, ''N0''),\r\n        total_tempdb_space_used_mb = FORMAT(qsrs.total_tempdb_space_used_mb, ''N0''),\r\n        last_tempdb_space_used_mb = FORMAT(qsrs.last_tempdb_space_used_mb, ''N0''),\r\n        min_tempdb_space_used_mb = FORMAT(qsrs.min_tempdb_space_used_mb, ''N0''),\r\n        max_tempdb_space_used_mb = FORMAT(qsrs.max_tempdb_space_used_mb, ''N0''),'\r\n        )\r\n                 ELSE\r\n        N''\r\n            END + N'\r\n        qsrs.context_settings,\r\n        n =\r\n            ROW_NUMBER() OVER\r\n            (\r\n                PARTITION BY\r\n                    qsrs.plan_id\r\n                ORDER BY\r\n                    ' +\r\n    CASE @sort_order\r\n        WHEN 'cpu' THEN N'qsrs.avg_cpu_time_ms'\r\n        WHEN 'logical reads' THEN N'qsrs.avg_logical_io_reads_mb'\r\n        WHEN 'physical reads' THEN N'qsrs.avg_physical_io_reads_mb'\r\n        WHEN 'writes' THEN N'qsrs.avg_logical_io_writes_mb'\r\n        WHEN 'duration' THEN N'qsrs.avg_duration_ms'\r\n        WHEN 'memory' THEN N'qsrs.avg_query_max_used_memory_mb'\r\n        WHEN 'tempdb' THEN CASE WHEN @new = 1 THEN N'qsrs.avg_tempdb_space_used_mb' ELSE N'qsrs.avg_cpu_time' END\r\n        WHEN 'executions' THEN N'qsrs.count_executions'\r\n        ELSE N'qsrs.avg_cpu_time_ms'\r\n    END + N' DESC\r\n            )';\r\n\r\n    END;\r\n\r\n    /*\r\n    For non-experts only!\r\n    */\r\n    IF\r\n      (\r\n          @expert_mode = 0\r\n            AND @format_output = 0\r\n      )\r\n    BEGIN\r\n\r\n        SELECT\r\n            @sql += N'\r\n    SELECT\r\n        source =\r\n            ''runtime_stats'',\r\n        qsp.query_id,\r\n        qsrs.plan_id,\r\n        qsp.all_plan_ids,\r\n        qsrs.execution_type_desc,\r\n        qsq.object_name,\r\n        qsqt.query_sql_text,\r\n        qsp.compatibility_level,\r\n        query_plan = TRY_CONVERT(XML, qsp.query_plan),'\r\n        +\r\n            CASE @new\r\n                 WHEN 1\r\n                 THEN\r\n        N'\r\n        qsp.plan_forcing_type_desc,\r\n        w.top_waits,'\r\n                 ELSE\r\n        N''\r\n            END + N'\r\n        qsrs.first_execution_time,\r\n        qsrs.last_execution_time,\r\n        qsrs.count_executions,\r\n        qsrs.executions_per_second,\r\n        qsrs.avg_duration_ms,\r\n        qsrs.total_duration_ms,\r\n        qsrs.avg_cpu_time_ms,\r\n        qsrs.total_cpu_time_ms,\r\n        qsrs.avg_logical_io_reads_mb,\r\n        qsrs.total_logical_io_reads_mb,\r\n        qsrs.avg_logical_io_writes_mb,\r\n        qsrs.total_logical_io_writes_mb,\r\n        qsrs.avg_physical_io_reads_mb,\r\n        qsrs.total_physical_io_reads_mb,\r\n        qsrs.avg_clr_time_ms,\r\n        qsrs.total_clr_time_ms,\r\n        qsrs.min_dop,\r\n        qsrs.max_dop,\r\n        qsrs.avg_query_max_used_memory_mb,\r\n        qsrs.total_query_max_used_memory_mb,\r\n        qsrs.avg_rowcount,\r\n        qsrs.total_rowcount,'\r\n        +\r\n            CASE @new\r\n                 WHEN 1\r\n                 THEN\r\n        N'\r\n        qsrs.avg_num_physical_io_reads_mb,\r\n        qsrs.total_num_physical_io_reads_mb,\r\n        qsrs.avg_log_bytes_used_mb,\r\n        qsrs.total_log_bytes_used_mb,\r\n        qsrs.avg_tempdb_space_used_mb,\r\n        qsrs.total_tempdb_space_used_mb,'\r\n                 ELSE\r\n        N''\r\n            END + N'\r\n        qsrs.context_settings,\r\n        n =\r\n            ROW_NUMBER() OVER\r\n            (\r\n                PARTITION BY\r\n                    qsrs.plan_id\r\n                ORDER BY\r\n                    ' +\r\n    CASE @sort_order\r\n        WHEN 'cpu' THEN N'qsrs.avg_cpu_time_ms'\r\n        WHEN 'logical reads' THEN N'qsrs.avg_logical_io_reads_mb'\r\n        WHEN 'physical reads' THEN N'qsrs.avg_physical_io_reads_mb'\r\n        WHEN 'writes' THEN N'qsrs.avg_logical_io_writes_mb'\r\n        WHEN 'duration' THEN N'qsrs.avg_duration_ms'\r\n        WHEN 'memory' THEN N'qsrs.avg_query_max_used_memory_mb'\r\n        WHEN 'tempdb' THEN CASE WHEN @new = 1 THEN N'qsrs.avg_tempdb_space_used_mb' ELSE N'qsrs.avg_cpu_time' END\r\n        WHEN 'executions' THEN N'qsrs.count_executions'\r\n        ELSE N'qsrs.avg_cpu_time_ms'\r\n    END + N' DESC\r\n            )';\r\n\r\n    END;\r\n\r\n    /*\r\n    Formatted but not still not expert output\r\n    */\r\n    IF\r\n      (\r\n          @expert_mode = 0\r\n            AND @format_output = 1\r\n      )\r\n    BEGIN\r\n\r\n        SELECT\r\n            @sql += N'\r\n    SELECT\r\n        source =\r\n            ''runtime_stats'',\r\n        qsp.query_id,\r\n        qsrs.plan_id,\r\n        qsp.all_plan_ids,\r\n        qsrs.execution_type_desc,\r\n        qsq.object_name,\r\n        qsqt.query_sql_text,\r\n        qsp.compatibility_level,\r\n        query_plan = TRY_CONVERT(XML, qsp.query_plan),'\r\n        +\r\n            CASE @new\r\n                 WHEN 1\r\n                 THEN\r\n        N'\r\n        qsp.plan_forcing_type_desc,\r\n        w.top_waits,'\r\n                 ELSE\r\n        N''\r\n            END + N'\r\n        qsrs.first_execution_time,\r\n        qsrs.last_execution_time,\r\n        count_executions = FORMAT(qsrs.count_executions, ''N0''),\r\n        executions_per_second = FORMAT(qsrs.executions_per_second, ''N0''),\r\n        avg_duration_ms = FORMAT(qsrs.avg_duration_ms, ''N0''),\r\n        total_duration_ms = FORMAT(qsrs.total_duration_ms, ''N0''),\r\n        avg_cpu_time_ms = FORMAT(qsrs.avg_cpu_time_ms, ''N0''),\r\n        total_cpu_time_ms = FORMAT(qsrs.total_cpu_time_ms, ''N0''),\r\n        avg_logical_io_reads_mb = FORMAT(qsrs.avg_logical_io_reads_mb, ''N0''),\r\n        total_logical_io_reads_mb = FORMAT(qsrs.total_logical_io_reads_mb, ''N0''),\r\n        avg_logical_io_writes_mb = FORMAT(qsrs.avg_logical_io_writes_mb, ''N0''),\r\n        total_logical_io_writes_mb = FORMAT(qsrs.total_logical_io_writes_mb, ''N0''),\r\n        avg_physical_io_reads_mb = FORMAT(qsrs.avg_physical_io_reads_mb, ''N0''),\r\n        total_physical_io_reads_mb = FORMAT(qsrs.total_physical_io_reads_mb, ''N0''),\r\n        avg_clr_time_ms = FORMAT(qsrs.avg_clr_time_ms, ''N0''),\r\n        total_clr_time_ms = FORMAT(qsrs.total_clr_time_ms, ''N0''),\r\n        min_dop = FORMAT(qsrs.min_dop, ''N0''),\r\n        max_dop = FORMAT(qsrs.max_dop, ''N0''),\r\n        avg_query_max_used_memory_mb = FORMAT(qsrs.avg_query_max_used_memory_mb, ''N0''),\r\n        total_query_max_used_memory_mb = FORMAT(qsrs.total_query_max_used_memory_mb, ''N0''),\r\n        avg_rowcount = FORMAT(qsrs.avg_rowcount, ''N0''),\r\n        total_rowcount = FORMAT(qsrs.total_rowcount, ''N0''),'\r\n        +\r\n            CASE @new\r\n                 WHEN 1\r\n                 THEN\r\n        N'\r\n        avg_num_physical_io_reads_mb = FORMAT(qsrs.avg_num_physical_io_reads_mb, ''N0''),\r\n        total_num_physical_io_reads_mb = FORMAT(qsrs.total_num_physical_io_reads_mb, ''N0''),\r\n        avg_log_bytes_used_mb = FORMAT(qsrs.avg_log_bytes_used_mb, ''N0''),\r\n        total_log_bytes_used_mb = FORMAT(qsrs.total_log_bytes_used_mb, ''N0''),\r\n        avg_tempdb_space_used_mb = FORMAT(qsrs.avg_tempdb_space_used_mb, ''N0''),\r\n        total_tempdb_space_used_mb = FORMAT(qsrs.total_tempdb_space_used_mb, ''N0''),'\r\n                 ELSE\r\n        N''\r\n            END + N'\r\n        qsrs.context_settings,\r\n        n =\r\n            ROW_NUMBER() OVER\r\n            (\r\n                PARTITION BY\r\n                    qsrs.plan_id\r\n                ORDER BY\r\n                    ' +\r\n    CASE @sort_order\r\n         WHEN 'cpu' THEN N'qsrs.avg_cpu_time_ms'\r\n         WHEN 'logical reads' THEN N'qsrs.avg_logical_io_reads_mb'\r\n         WHEN 'physical reads' THEN N'qsrs.avg_physical_io_reads_mb'\r\n         WHEN 'writes' THEN N'qsrs.avg_logical_io_writes_mb'\r\n         WHEN 'duration' THEN N'qsrs.avg_duration_ms'\r\n         WHEN 'memory' THEN N'qsrs.avg_query_max_used_memory_mb'\r\n         WHEN 'tempdb' THEN CASE WHEN @new = 1 THEN N'qsrs.avg_tempdb_space_used_mb' ELSE N'qsrs.avg_cpu_time' END\r\n         WHEN 'executions' THEN N'qsrs.count_executions'\r\n         ELSE N'qsrs.avg_cpu_time_ms'\r\n    END + N' DESC\r\n            )';\r\n\r\n    END;\r\n\r\n    /*\r\n    Add on the from and stuff\r\n    */\r\n    SELECT\r\n        @sql += N'\r\n    FROM #query_store_runtime_stats AS qsrs\r\n    CROSS APPLY\r\n    (\r\n        SELECT\r\n            x.*\r\n        FROM\r\n        (\r\n            SELECT\r\n                qsp.*,\r\n                pn =\r\n                    ROW_NUMBER() OVER\r\n                    (\r\n                        PARTITION BY\r\n                            qsp.query_plan_hash\r\n                        ORDER BY\r\n                            qsp.last_execution_time DESC\r\n                    )\r\n            FROM #query_store_plan AS qsp\r\n            WHERE qsp.plan_id = qsrs.plan_id\r\n        ) AS x\r\n        WHERE x.pn = 1\r\n    ) AS qsp\r\n    CROSS APPLY\r\n    (\r\n        SELECT TOP (1)\r\n            qsqt.*\r\n        FROM #query_store_query AS qsq\r\n        JOIN #query_store_query_text AS qsqt\r\n            ON qsqt.query_text_id = qsq.query_text_id\r\n        WHERE qsq.query_id = qsp.query_id\r\n        ORDER BY qsq.last_execution_time DESC\r\n    ) AS qsqt\r\n    CROSS APPLY\r\n    (\r\n        SELECT TOP (1)\r\n            qsq.*\r\n        FROM #query_store_query AS qsq\r\n        WHERE qsq.query_id = qsp.query_id\r\n        ORDER BY qsq.last_execution_time DESC\r\n    ) AS qsq';\r\n\r\n    /*\r\n    Get wait stats if we can\r\n    */\r\n    IF\r\n      (\r\n          @new = 1\r\n            AND @format_output = 0\r\n      )\r\n    BEGIN\r\n\r\n        SELECT\r\n            @sql += N'\r\n    CROSS APPLY\r\n    (\r\n        SELECT TOP (1)\r\n            top_waits =\r\n                STUFF\r\n                (\r\n                    (\r\n                       SELECT TOP (5)\r\n                            '', '' +\r\n                            qsws.wait_category_desc +\r\n                            '' ('' +\r\n                            CONVERT\r\n                            (\r\n                                varchar(20),\r\n                                SUM\r\n                                (\r\n                                    CONVERT\r\n                                    (\r\n                                        bigint,\r\n                                        qsws.avg_query_wait_time_ms\r\n                                    )\r\n                                )\r\n                            ) +\r\n                            '' ms)''\r\n                       FROM #query_store_wait_stats AS qsws\r\n                       WHERE qsws.plan_id = qsrs.plan_id\r\n                       GROUP BY qsws.wait_category_desc\r\n                       ORDER BY SUM(qsws.avg_query_wait_time_ms) DESC\r\n                       FOR XML PATH(''''), TYPE\r\n                    ).value(''./text()[1]'', ''varchar(max)''),\r\n                    1,\r\n                    2,\r\n                    ''''\r\n                )\r\n    ) AS w';\r\n\r\n    END;\r\n\r\n    IF\r\n      (\r\n          @new = 1\r\n            AND @format_output = 1\r\n      )\r\n    BEGIN\r\n\r\n        SELECT\r\n            @sql += N'\r\n    CROSS APPLY\r\n    (\r\n        SELECT TOP (1)\r\n            top_waits =\r\n                STUFF\r\n                (\r\n                    (\r\n                       SELECT TOP (5)\r\n                            '', '' +\r\n                            qsws.wait_category_desc +\r\n                            '' ('' +\r\n                            FORMAT\r\n                            (\r\n                                SUM\r\n                                (\r\n                                    CONVERT\r\n                                    (\r\n                                        bigint,\r\n                                        qsws.avg_query_wait_time_ms\r\n                                    )\r\n                                ), ''N0''\r\n                            ) +\r\n                            '' ms)''\r\n                       FROM #query_store_wait_stats AS qsws\r\n                       WHERE qsws.plan_id = qsrs.plan_id\r\n                       GROUP BY qsws.wait_category_desc\r\n                       ORDER BY SUM(qsws.avg_query_wait_time_ms) DESC\r\n                       FOR XML PATH(''''), TYPE\r\n                    ).value(''./text()[1]'', ''varchar(max)''),\r\n                    1,\r\n                    2,\r\n                    ''''\r\n                )\r\n    ) AS w';\r\n\r\n    END;\r\n\r\n    SELECT\r\n        @sql += N'\r\n) AS x\r\nWHERE x.n = 1\r\nORDER BY ' +\r\n    CASE @format_output\r\n         WHEN 0\r\n         THEN\r\n             CASE @sort_order\r\n                  WHEN 'cpu' THEN N'x.avg_cpu_time_ms'\r\n                  WHEN 'logical reads' THEN N'x.avg_logical_io_reads_mb'\r\n                  WHEN 'physical reads' THEN N'x.avg_physical_io_reads_mb'\r\n                  WHEN 'writes' THEN N'x.avg_logical_io_writes_mb'\r\n                  WHEN 'duration' THEN N'x.avg_duration_ms'\r\n                  WHEN 'memory' THEN N'x.avg_query_max_used_memory_mb'\r\n                  WHEN 'tempdb' THEN\r\n                                CASE WHEN @new = 1\r\n                                     THEN N'x.avg_tempdb_space_used_mb'\r\n                                     ELSE N'x.avg_cpu_time'\r\n                                END\r\n                  WHEN 'executions' THEN N'x.count_executions'\r\n                  ELSE N'x.avg_cpu_time_ms'\r\n             END\r\n         WHEN 1\r\n         THEN\r\n             CASE @sort_order\r\n                  WHEN 'cpu' THEN N'CONVERT(money, x.avg_cpu_time_ms)'\r\n                  WHEN 'logical reads' THEN N'CONVERT(money, x.avg_logical_io_reads_mb)'\r\n                  WHEN 'physical reads' THEN N'CONVERT(money, x.avg_physical_io_reads_mb)'\r\n                  WHEN 'writes' THEN N'CONVERT(money, x.avg_logical_io_writes_mb)'\r\n                  WHEN 'duration' THEN N'CONVERT(money, x.avg_duration_ms)'\r\n                  WHEN 'memory' THEN N'CONVERT(money, x.avg_query_max_used_memory_mb)'\r\n                  WHEN 'tempdb' THEN\r\n                                CASE WHEN @new = 1\r\n                                     THEN N'CONVERT(money, x.avg_tempdb_space_used_mb)'\r\n                                     ELSE N'CONVERT(money, x.avg_cpu_time)'\r\n                                END\r\n                  WHEN 'executions' THEN N'CONVERT(money, x.count_executions)'\r\n                  ELSE N'CONVERT(money, x.avg_cpu_time_ms)'\r\n             END\r\n    END\r\n             + N' DESC\r\nOPTION(RECOMPILE);' + @nc10;\r\n\r\n    IF @debug = 1\r\n    BEGIN\r\n        PRINT LEN(@sql);\r\n        PRINT SUBSTRING(@sql, 0, 4000);\r\n        PRINT SUBSTRING(@sql, 4000, 8000);\r\n    END;\r\n\r\n\r\n    EXEC sys.sp_executesql\r\n        @sql;\r\n\r\nEND;\r\nELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_store_runtime_stats is empty';\r\n    END;\r\n\r\n/*\r\nReturn special things, unformatted\r\n*/\r\nIF\r\n  (\r\n      @expert_mode = 1\r\n        AND @format_output = 0\r\n  )\r\nBEGIN\r\n\r\n    IF EXISTS\r\n       (\r\n           SELECT\r\n               1/0\r\n            FROM #query_store_query\r\n       )\r\n    BEGIN\r\n\r\n        SELECT\r\n            @current_table = 'selecting compilation stats';\r\n\r\n        SELECT\r\n            x.*\r\n        FROM\r\n        (\r\n            SELECT\r\n                source =\r\n                    'compilation_stats',\r\n                qsq.query_id,\r\n                qsq.object_name,\r\n                qsq.query_text_id,\r\n                qsq.query_parameterization_type_desc,\r\n                qsq.initial_compile_start_time,\r\n                qsq.last_compile_start_time,\r\n                qsq.last_execution_time,\r\n                qsq.count_compiles,\r\n                qsq.avg_compile_duration_ms,\r\n                qsq.total_compile_duration_ms,\r\n                qsq.last_compile_duration_ms,\r\n                qsq.avg_bind_duration_ms,\r\n                qsq.total_bind_duration_ms,\r\n                qsq.last_bind_duration_ms,\r\n                qsq.avg_bind_cpu_time_ms,\r\n                qsq.total_bind_cpu_time_ms,\r\n                qsq.last_bind_cpu_time_ms,\r\n                qsq.avg_optimize_duration_ms,\r\n                qsq.total_optimize_duration_ms,\r\n                qsq.last_optimize_duration_ms,\r\n                qsq.avg_optimize_cpu_time_ms,\r\n                qsq.total_optimize_cpu_time_ms,\r\n                qsq.last_optimize_cpu_time_ms,\r\n                qsq.avg_compile_memory_mb,\r\n                qsq.total_compile_memory_mb,\r\n                qsq.last_compile_memory_mb,\r\n                qsq.max_compile_memory_mb,\r\n                qsq.query_hash,\r\n                qsq.batch_sql_handle,\r\n                qsqt.statement_sql_handle,\r\n                qsq.last_compile_batch_sql_handle,\r\n                qsq.last_compile_batch_offset_start,\r\n                qsq.last_compile_batch_offset_end,\r\n                ROW_NUMBER() OVER\r\n                (\r\n                    PARTITION BY\r\n                        qsq.query_id,\r\n                        qsq.query_text_id\r\n                    ORDER BY\r\n                        qsq.query_id\r\n                ) AS n\r\n            FROM #query_store_query AS qsq\r\n            CROSS APPLY\r\n            (\r\n                SELECT TOP (1)\r\n                    qsqt.*\r\n                FROM #query_store_query_text AS qsqt\r\n                WHERE qsqt.query_text_id = qsq.query_text_id\r\n            ) AS qsqt\r\n        ) AS x\r\n        WHERE x.n = 1\r\n        ORDER BY x.query_id\r\n        OPTION(RECOMPILE);\r\n\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_store_query is empty';\r\n    END;\r\n\r\n    IF @rc > 0\r\n    BEGIN\r\n\r\n        SELECT\r\n            @current_table = 'selecting resource stats';\r\n\r\n        SELECT\r\n            source =\r\n                'resource_stats',\r\n            qsq.query_id,\r\n            qsq.object_name,\r\n            qsqt.total_grant_mb,\r\n            qsqt.last_grant_mb,\r\n            qsqt.min_grant_mb,\r\n            qsqt.max_grant_mb,\r\n            qsqt.total_used_grant_mb,\r\n            qsqt.last_used_grant_mb,\r\n            qsqt.min_used_grant_mb,\r\n            qsqt.max_used_grant_mb,\r\n            qsqt.total_ideal_grant_mb,\r\n            qsqt.last_ideal_grant_mb,\r\n            qsqt.min_ideal_grant_mb,\r\n            qsqt.max_ideal_grant_mb,\r\n            qsqt.total_reserved_threads,\r\n            qsqt.last_reserved_threads,\r\n            qsqt.min_reserved_threads,\r\n            qsqt.max_reserved_threads,\r\n            qsqt.total_used_threads,\r\n            qsqt.last_used_threads,\r\n            qsqt.min_used_threads,\r\n            qsqt.max_used_threads\r\n        FROM #query_store_query AS qsq\r\n        JOIN #query_store_query_text AS qsqt\r\n            ON qsq.query_text_id = qsqt.query_text_id\r\n        WHERE ( qsqt.total_grant_mb IS NOT NULL\r\n        OR      qsqt.total_reserved_threads IS NOT NULL )\r\n        ORDER BY qsq.query_id\r\n        OPTION(RECOMPILE);\r\n\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#dm_exec_query_stats is empty';\r\n    END;\r\n\r\n    IF @new = 1\r\n    BEGIN\r\n\r\n        IF EXISTS\r\n           (\r\n               SELECT\r\n                   1/0\r\n                FROM #query_store_wait_stats\r\n           )\r\n        BEGIN\r\n\r\n            SELECT\r\n                @current_table = 'selecting wait stats by query';\r\n\r\n            SELECT DISTINCT\r\n                source =\r\n                    'query_store_wait_stats_by_query',\r\n                qsws.plan_id,\r\n                x.object_name,\r\n                qsws.wait_category_desc,\r\n                qsws.total_query_wait_time_ms,\r\n                total_query_duration_ms =\r\n                    x.total_duration_ms,\r\n                qsws.avg_query_wait_time_ms,\r\n                avg_query_duration_ms =\r\n                    x.avg_duration_ms,\r\n                qsws.last_query_wait_time_ms,\r\n                last_query_duration_ms =\r\n                    x.last_duration_ms,\r\n                qsws.min_query_wait_time_ms,\r\n                min_query_duration_ms =\r\n                    x.min_duration_ms,\r\n                qsws.max_query_wait_time_ms,\r\n                max_query_duration_ms =\r\n                    x.max_duration_ms\r\n            FROM #query_store_wait_stats AS qsws\r\n            CROSS APPLY\r\n            (\r\n                SELECT\r\n                    qsrs.avg_duration_ms,\r\n                    qsrs.last_duration_ms,\r\n                    qsrs.min_duration_ms,\r\n                    qsrs.max_duration_ms,\r\n                    qsrs.total_duration_ms,\r\n                    qsq.object_name\r\n                FROM #query_store_runtime_stats AS qsrs\r\n                JOIN #query_store_plan AS qsp\r\n                    ON qsrs.plan_id = qsp.plan_id\r\n                JOIN #query_store_query AS qsq\r\n                    ON qsp.query_id = qsq.query_id\r\n                WHERE qsws.plan_id = qsrs.plan_id\r\n            ) AS x\r\n            ORDER BY\r\n                qsws.plan_id,\r\n                qsws.total_query_wait_time_ms DESC\r\n            OPTION(RECOMPILE);\r\n\r\n            SELECT\r\n                @current_table = 'selecting wait stats in total';\r\n\r\n            SELECT\r\n                source =\r\n                    'query_store_wait_stats_total',\r\n                qsws.wait_category_desc,\r\n                total_query_wait_time_ms =\r\n                    SUM(qsws.total_query_wait_time_ms),\r\n                total_query_duration_ms =\r\n                    SUM(x.total_duration_ms),\r\n                avg_query_wait_time_ms =\r\n                    SUM(qsws.avg_query_wait_time_ms),\r\n                avg_query_duration_ms =\r\n                    SUM(x.avg_duration_ms),\r\n                last_query_wait_time_ms =\r\n                    SUM(qsws.last_query_wait_time_ms),\r\n                last_query_duration_ms =\r\n                    SUM(x.last_duration_ms),\r\n                min_query_wait_time_ms =\r\n                    SUM(qsws.min_query_wait_time_ms),\r\n                min_query_duration_ms =\r\n                    SUM(x.min_duration_ms),\r\n                max_query_wait_time_ms =\r\n                    SUM(qsws.max_query_wait_time_ms),\r\n                max_query_duration_ms =\r\n                    SUM(x.max_duration_ms)\r\n            FROM #query_store_wait_stats AS qsws\r\n            CROSS APPLY\r\n            (\r\n                SELECT\r\n                    qsrs.avg_duration_ms,\r\n                    qsrs.last_duration_ms,\r\n                    qsrs.min_duration_ms,\r\n                    qsrs.max_duration_ms,\r\n                    qsrs.total_duration_ms,\r\n                    qsq.object_name\r\n                FROM #query_store_runtime_stats AS qsrs\r\n                JOIN #query_store_plan AS qsp\r\n                    ON qsrs.plan_id = qsp.plan_id\r\n                JOIN #query_store_query AS qsq\r\n                    ON qsp.query_id = qsq.query_id\r\n                WHERE qsws.plan_id = qsrs.plan_id\r\n            ) AS x\r\n            GROUP BY qsws.wait_category_desc\r\n            ORDER BY SUM(qsws.total_query_wait_time_ms) DESC\r\n            OPTION(RECOMPILE);\r\n\r\n        END;\r\n        ELSE\r\n        BEGIN\r\n            SELECT\r\n                result =\r\n                    '#query_store_wait_stats is empty' +\r\n                    CASE\r\n                        WHEN (@product_version = 13\r\n                                AND @azure = 0)\r\n                        THEN ' because it''s not available < 2017'\r\n                        ELSE ''\r\n                    END;\r\n        END;\r\n\r\n    END;\r\n\r\n    SELECT\r\n        @current_table = 'selecting query store options',\r\n        @sql = N'';\r\n\r\n    SELECT\r\n        @sql += N'\r\n    SELECT\r\n        source =\r\n            ''query_store_options'',\r\n        dqso.desired_state_desc,\r\n        dqso.actual_state_desc,\r\n        dqso.readonly_reason,\r\n        dqso.current_storage_size_mb,\r\n        dqso.flush_interval_seconds,\r\n        dqso.interval_length_minutes,\r\n        dqso.max_storage_size_mb,\r\n        dqso.stale_query_threshold_days,\r\n        dqso.max_plans_per_query,\r\n        dqso.query_capture_mode_desc,';\r\n\r\n        IF\r\n          (\r\n              @azure = 1\r\n                OR @product_version > 13\r\n          )\r\n        BEGIN\r\n            SELECT\r\n                @sql += N'\r\n        dqso.wait_stats_capture_mode_desc,';\r\n        END;\r\n\r\n        IF\r\n          (\r\n              @azure = 1\r\n                OR @product_version > 14\r\n          )\r\n        BEGIN\r\n            SELECT\r\n                @sql += N'\r\n        dqso.capture_policy_execution_count,\r\n        dqso.capture_policy_total_compile_cpu_time_ms,\r\n        dqso.capture_policy_total_execution_cpu_time_ms,\r\n        dqso.capture_policy_stale_threshold_hours,';\r\n        END;\r\n\r\n    SELECT\r\n        @sql += N'\r\n    dqso.size_based_cleanup_mode_desc\r\n    FROM #database_query_store_options AS dqso\r\n    OPTION(RECOMPILE);';\r\n\r\n    IF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\n    EXEC sys.sp_executesql\r\n        @sql;\r\n\r\nEND;\r\n\r\n/*\r\nReturn special things, formatted\r\n*/\r\nIF\r\n  (\r\n      @expert_mode = 1\r\n        AND @format_output = 1\r\n  )\r\nBEGIN\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #query_store_query\r\n       )\r\n    BEGIN\r\n\r\n        SELECT\r\n            @current_table = 'selecting compilation stats';\r\n\r\n        SELECT\r\n            x.*\r\n        FROM\r\n        (\r\n            SELECT\r\n                source =\r\n                    'compilation_stats',\r\n                qsq.query_id,\r\n                qsq.object_name,\r\n                qsq.query_text_id,\r\n                qsq.query_parameterization_type_desc,\r\n                qsq.initial_compile_start_time,\r\n                qsq.last_compile_start_time,\r\n                qsq.last_execution_time,\r\n                count_compiles =\r\n                    FORMAT(qsq.count_compiles, 'N0'),\r\n                avg_compile_duration_ms =\r\n                    FORMAT(qsq.avg_compile_duration_ms, 'N0'),\r\n                total_compile_duration_ms =\r\n                    FORMAT(qsq.total_compile_duration_ms, 'N0'),\r\n                last_compile_duration_ms =\r\n                    FORMAT(qsq.last_compile_duration_ms, 'N0'),\r\n                avg_bind_duration_ms =\r\n                    FORMAT(qsq.avg_bind_duration_ms, 'N0'),\r\n                total_bind_duration_ms =\r\n                    FORMAT(qsq.total_bind_duration_ms, 'N0'),\r\n                last_bind_duration_ms =\r\n                    FORMAT(qsq.last_bind_duration_ms, 'N0'),\r\n                avg_bind_cpu_time_ms =\r\n                    FORMAT(qsq.avg_bind_cpu_time_ms, 'N0'),\r\n                total_bind_cpu_time_ms =\r\n                    FORMAT(qsq.total_bind_cpu_time_ms, 'N0'),\r\n                last_bind_cpu_time_ms =\r\n                    FORMAT(qsq.last_bind_cpu_time_ms, 'N0'),\r\n                avg_optimize_duration_ms =\r\n                    FORMAT(qsq.avg_optimize_duration_ms, 'N0'),\r\n                total_optimize_duration_ms =\r\n                    FORMAT(qsq.total_optimize_duration_ms, 'N0'),\r\n                last_optimize_duration_ms =\r\n                    FORMAT(qsq.last_optimize_duration_ms, 'N0'),\r\n                avg_optimize_cpu_time_ms =\r\n                    FORMAT(qsq.avg_optimize_cpu_time_ms, 'N0'),\r\n                total_optimize_cpu_time_ms =\r\n                    FORMAT(qsq.total_optimize_cpu_time_ms, 'N0'),\r\n                last_optimize_cpu_time_ms =\r\n                    FORMAT(qsq.last_optimize_cpu_time_ms, 'N0'),\r\n                avg_compile_memory_mb =\r\n                    FORMAT(qsq.avg_compile_memory_mb, 'N0'),\r\n                total_compile_memory_mb =\r\n                    FORMAT(qsq.total_compile_memory_mb, 'N0'),\r\n                last_compile_memory_mb =\r\n                    FORMAT(qsq.last_compile_memory_mb, 'N0'),\r\n                max_compile_memory_mb =\r\n                    FORMAT(qsq.max_compile_memory_mb, 'N0'),\r\n                qsq.query_hash,\r\n                qsq.batch_sql_handle,\r\n                qsqt.statement_sql_handle,\r\n                qsq.last_compile_batch_sql_handle,\r\n                qsq.last_compile_batch_offset_start,\r\n                qsq.last_compile_batch_offset_end,\r\n                ROW_NUMBER() OVER\r\n                (\r\n                    PARTITION BY\r\n                        qsq.query_id,\r\n                        qsq.query_text_id\r\n                    ORDER BY\r\n                        qsq.query_id\r\n                ) AS n\r\n            FROM #query_store_query AS qsq\r\n            CROSS APPLY\r\n            (\r\n                SELECT TOP (1)\r\n                    qsqt.*\r\n                FROM #query_store_query_text AS qsqt\r\n                WHERE qsqt.query_text_id = qsq.query_text_id\r\n            ) AS qsqt\r\n        ) AS x\r\n        WHERE x.n = 1\r\n        ORDER BY x.query_id\r\n        OPTION(RECOMPILE);\r\n\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_store_query is empty';\r\n    END;\r\n\r\n    IF @rc > 0\r\n    BEGIN\r\n\r\n        SELECT\r\n            @current_table = 'selecting resource stats';\r\n\r\n        SELECT\r\n            source =\r\n                'resource_stats',\r\n            qsq.query_id,\r\n            qsq.object_name,\r\n            total_grant_mb =\r\n                FORMAT(qsqt.total_grant_mb, 'N0'),\r\n            last_grant_mb =\r\n                FORMAT(qsqt.last_grant_mb, 'N0'),\r\n            min_grant_mb =\r\n                FORMAT(qsqt.min_grant_mb, 'N0'),\r\n            max_grant_mb =\r\n                FORMAT(qsqt.max_grant_mb, 'N0'),\r\n            total_used_grant_mb =\r\n                FORMAT(qsqt.total_used_grant_mb, 'N0'),\r\n            last_used_grant_mb =\r\n                FORMAT(qsqt.last_used_grant_mb, 'N0'),\r\n            min_used_grant_mb =\r\n                FORMAT(qsqt.min_used_grant_mb, 'N0'),\r\n            max_used_grant_mb =\r\n                FORMAT(qsqt.max_used_grant_mb, 'N0'),\r\n            total_ideal_grant_mb =\r\n                FORMAT(qsqt.total_ideal_grant_mb, 'N0'),\r\n            last_ideal_grant_mb =\r\n                FORMAT(qsqt.last_ideal_grant_mb, 'N0'),\r\n            min_ideal_grant_mb =\r\n                FORMAT(qsqt.min_ideal_grant_mb, 'N0'),\r\n            max_ideal_grant_mb =\r\n                FORMAT(qsqt.max_ideal_grant_mb, 'N0'),\r\n            qsqt.total_reserved_threads,\r\n            qsqt.last_reserved_threads,\r\n            qsqt.min_reserved_threads,\r\n            qsqt.max_reserved_threads,\r\n            qsqt.total_used_threads,\r\n            qsqt.last_used_threads,\r\n            qsqt.min_used_threads,\r\n            qsqt.max_used_threads\r\n        FROM #query_store_query AS qsq\r\n        JOIN #query_store_query_text AS qsqt\r\n            ON qsq.query_text_id = qsqt.query_text_id\r\n        WHERE ( qsqt.total_grant_mb IS NOT NULL\r\n        OR      qsqt.total_reserved_threads IS NOT NULL )\r\n        ORDER BY qsq.query_id\r\n        OPTION(RECOMPILE);\r\n\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#dm_exec_query_stats is empty';\r\n    END;\r\n\r\n    IF @new = 1\r\n    BEGIN\r\n\r\n        IF EXISTS\r\n           (\r\n               SELECT\r\n                   1/0\r\n                FROM #query_store_wait_stats\r\n           )\r\n        BEGIN\r\n\r\n            SELECT\r\n                @current_table = 'selecting wait stats by query';\r\n\r\n            SELECT\r\n                source =\r\n                    'query_store_wait_stats_by_query',\r\n                qsws.plan_id,\r\n                x.object_name,\r\n                qsws.wait_category_desc,\r\n                total_query_wait_time_ms =\r\n                    FORMAT(qsws.total_query_wait_time_ms, 'N0'),\r\n                total_query_duration_ms =\r\n                    FORMAT(x.total_duration_ms, 'N0'),\r\n                avg_query_wait_time_ms =\r\n                    FORMAT(qsws.avg_query_wait_time_ms, 'N0'),\r\n                avg_query_duration_ms =\r\n                    FORMAT(x.avg_duration_ms, 'N0'),\r\n                last_query_wait_time_ms =\r\n                    FORMAT(qsws.last_query_wait_time_ms, 'N0'),\r\n                last_query_duration_ms =\r\n                    FORMAT(x.last_duration_ms, 'N0'),\r\n                min_query_wait_time_ms =\r\n                    FORMAT(qsws.min_query_wait_time_ms, 'N0'),\r\n                min_query_duration_ms =\r\n                    FORMAT(x.min_duration_ms, 'N0'),\r\n                max_query_wait_time_ms =\r\n                    FORMAT(qsws.max_query_wait_time_ms, 'N0'),\r\n                max_query_duration_ms =\r\n                    FORMAT(x.max_duration_ms, 'N0')\r\n            FROM #query_store_wait_stats AS qsws\r\n            CROSS APPLY\r\n            (\r\n                SELECT DISTINCT\r\n                    qsrs.avg_duration_ms,\r\n                    qsrs.last_duration_ms,\r\n                    qsrs.min_duration_ms,\r\n                    qsrs.max_duration_ms,\r\n                    qsrs.total_duration_ms,\r\n                    qsq.object_name\r\n                FROM #query_store_runtime_stats AS qsrs\r\n                JOIN #query_store_plan AS qsp\r\n                    ON qsrs.plan_id = qsp.plan_id\r\n                JOIN #query_store_query AS qsq\r\n                    ON qsp.query_id = qsq.query_id\r\n                WHERE qsws.plan_id = qsrs.plan_id\r\n            ) AS x\r\n            ORDER BY\r\n                qsws.plan_id,\r\n                qsws.total_query_wait_time_ms DESC\r\n            OPTION(RECOMPILE);\r\n\r\n            SELECT\r\n                @current_table = 'selecting wait stats in total';\r\n\r\n            SELECT\r\n                source =\r\n                    'query_store_wait_stats_total',\r\n                qsws.wait_category_desc,\r\n                total_query_wait_time_ms =\r\n                    FORMAT(SUM(qsws.total_query_wait_time_ms), 'N0'),\r\n                total_query_duration_ms =\r\n                    FORMAT(SUM(x.total_duration_ms), 'N0'),\r\n                avg_query_wait_time_ms =\r\n                    FORMAT(SUM(qsws.avg_query_wait_time_ms), 'N0'),\r\n                avg_query_duration_ms =\r\n                    FORMAT(SUM(x.avg_duration_ms), 'N0'),\r\n                last_query_wait_time_ms =\r\n                    FORMAT(SUM(qsws.last_query_wait_time_ms), 'N0'),\r\n                last_query_duration_ms =\r\n                    FORMAT(SUM(x.last_duration_ms), 'N0'),\r\n                min_query_wait_time_ms =\r\n                    FORMAT(SUM(qsws.min_query_wait_time_ms), 'N0'),\r\n                min_query_duration_ms =\r\n                    FORMAT(SUM(x.min_duration_ms), 'N0'),\r\n                max_query_wait_time_ms =\r\n                    FORMAT(SUM(qsws.max_query_wait_time_ms), 'N0'),\r\n                max_query_duration_ms =\r\n                    FORMAT(SUM(x.max_duration_ms), 'N0')\r\n            FROM #query_store_wait_stats AS qsws\r\n            CROSS APPLY\r\n            (\r\n                SELECT\r\n                    qsrs.avg_duration_ms,\r\n                    qsrs.last_duration_ms,\r\n                    qsrs.min_duration_ms,\r\n                    qsrs.max_duration_ms,\r\n                    qsrs.total_duration_ms,\r\n                    qsq.object_name\r\n                FROM #query_store_runtime_stats AS qsrs\r\n                JOIN #query_store_plan AS qsp\r\n                    ON qsrs.plan_id = qsp.plan_id\r\n                JOIN #query_store_query AS qsq\r\n                    ON qsp.query_id = qsq.query_id\r\n                WHERE qsws.plan_id = qsrs.plan_id\r\n            ) AS x\r\n            GROUP BY qsws.wait_category_desc\r\n            ORDER BY SUM(qsws.total_query_wait_time_ms) DESC\r\n            OPTION(RECOMPILE);\r\n\r\n        END;\r\n\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_store_wait_stats is empty' +\r\n                CASE\r\n                    WHEN (@product_version = 13\r\n                            AND @azure = 0)\r\n                    THEN ' because it''s not available < 2017'\r\n                    WHEN EXISTS\r\n                         (\r\n                             SELECT\r\n                                 1/0\r\n                             FROM #database_query_store_options AS dqso\r\n                             WHERE dqso.wait_stats_capture_mode_desc <> 'ON'\r\n                         )\r\n                    THEN ' because you have it disabled in your Query Store options'\r\n                    ELSE ' for the queries in the results'\r\n                END;\r\n    END;\r\n\r\n    SELECT\r\n        @current_table = 'selecting query store options',\r\n        @sql = N'';\r\n\r\n    SELECT\r\n        @sql += N'\r\n    SELECT\r\n        source =\r\n            ''query_store_options'',\r\n        dqso.desired_state_desc,\r\n        dqso.actual_state_desc,\r\n        dqso.readonly_reason,\r\n        current_storage_size_mb =\r\n            FORMAT(dqso.current_storage_size_mb, ''N0''),\r\n        flush_interval_seconds =\r\n            FORMAT(dqso.flush_interval_seconds, ''N0''),\r\n        interval_length_minutes =\r\n            FORMAT(dqso.interval_length_minutes, ''N0''),\r\n        max_storage_size_mb =\r\n            FORMAT(dqso.max_storage_size_mb, ''N0''),\r\n        dqso.stale_query_threshold_days,\r\n        max_plans_per_query =\r\n            FORMAT(dqso.max_plans_per_query, ''N0''),\r\n        dqso.query_capture_mode_desc,';\r\n\r\n        IF\r\n          (\r\n              @azure = 1\r\n                OR @product_version > 13\r\n          )\r\n        BEGIN\r\n            SELECT\r\n                @sql += N'\r\n        dqso.wait_stats_capture_mode_desc,';\r\n        END;\r\n\r\n        IF\r\n          (\r\n              @azure = 1\r\n                OR @product_version > 14\r\n          )\r\n        BEGIN\r\n            SELECT\r\n                @sql += N'\r\n        capture_policy_execution_count =\r\n            FORMAT(dqso.capture_policy_execution_count, ''N0''),\r\n        capture_policy_total_compile_cpu_time_ms =\r\n            FORMAT(dqso.capture_policy_total_compile_cpu_time_ms, ''N0''),\r\n        capture_policy_total_execution_cpu_time_ms =\r\n           FORMAT(dqso.capture_policy_total_execution_cpu_time_ms, ''N0''),\r\n        capture_policy_stale_threshold_hours =\r\n            FORMAT(dqso.capture_policy_stale_threshold_hours, ''N0''),';\r\n        END;\r\n\r\n    SELECT\r\n        @sql += N'\r\n    dqso.size_based_cleanup_mode_desc\r\n    FROM #database_query_store_options AS dqso\r\n    OPTION(RECOMPILE);';\r\n\r\n    IF @debug = 1 BEGIN PRINT LEN(@sql); PRINT @sql; END;\r\n\r\n    EXEC sys.sp_executesql\r\n        @sql;\r\n\r\nEND;\r\n\r\nSELECT\r\n    x.all_done,\r\n    x.support,\r\n    x.help,\r\n    x.problems,\r\n    x.performance,\r\n    x.thanks\r\nFROM\r\n(\r\n    SELECT\r\n        sort =\r\n            1,\r\n        all_done =\r\n            'brought to you by erik darling data!',\r\n        support =\r\n            'for support, head over to github',\r\n        help =\r\n            'for local help, use @help = 1',\r\n        problems =\r\n            'to debug issues, use @debug = 1;',\r\n        performance =\r\n            'if this runs slowly, use to get query plans',\r\n        thanks =\r\n            'thanks for using sp_QuickieStore!'\r\n\r\n    UNION ALL\r\n\r\n    SELECT\r\n        sort =\r\n            2,\r\n        all_done =\r\n            'https://www.erikdarlingdata.com/',\r\n        support =\r\n            'https://github.com/erikdarlingdata/DarlingData',\r\n        help =\r\n            'EXEC sp_QuickieStore @help = 1;',\r\n        problems =\r\n            'EXEC sp_QuickieStore @debug = 1;',\r\n        performance =\r\n            'EXEC sp_QuickieStore @troubleshoot_performance = 1;',\r\n        thanks =\r\n            'i hope you find it useful, or whatever'\r\n) AS x\r\nORDER BY x.sort;\r\n\r\nEND TRY\r\nBEGIN CATCH\r\n\r\n    /*\r\n    Where the error happened and the message\r\n    */\r\n    IF @current_table IS NOT NULL\r\n    BEGIN\r\n        RAISERROR ('error while %s', 11, 1, @current_table) WITH NOWAIT;\r\n    END;\r\n\r\n        /*\r\n        Query that caused the error\r\n        */\r\n    IF @sql IS NOT NULL\r\n    BEGIN\r\n        RAISERROR ('offending query:', 10, 1) WITH NOWAIT;\r\n        RAISERROR('%s', 10, 1, @sql) WITH NOWAIT;\r\n    END;\r\n\r\n    /*\r\n    This reliably throws the actual error from dynamic SQL\r\n    */\r\n    THROW;\r\n\r\nEND CATCH;\r\n\r\n/*\r\nDebug elements!\r\n*/\r\nIF @debug = 1\r\nBEGIN\r\n\r\n    SELECT\r\n        parameter_type =\r\n            'procedure_parameters',\r\n        database_name =\r\n            @database_name,\r\n        sort_order =\r\n            @sort_order,\r\n        [top] =\r\n            @top,\r\n        start_date =\r\n            @start_date,\r\n        end_date =\r\n            @end_date,\r\n        execution_count =\r\n            @execution_count,\r\n        duration_ms =\r\n            @duration_ms,\r\n        procedure_schema =\r\n            @procedure_schema,\r\n        procedure_name =\r\n            @procedure_name,\r\n        include_plan_ids =\r\n            @include_plan_ids,\r\n        include_query_ids =\r\n            @include_query_ids,\r\n        ignore_plan_ids =\r\n            @ignore_plan_ids,\r\n        ignore_query_ids =\r\n            @ignore_query_ids,\r\n        query_text_search =\r\n            @query_text_search,\r\n        wait_filter =\r\n            @wait_filter,\r\n        expert_mode =\r\n            @expert_mode,\r\n        format_output =\r\n            @format_output,\r\n        version =\r\n            @version,\r\n        version_date =\r\n            @version_date,\r\n        help =\r\n            @help,\r\n        debug =\r\n            @debug,\r\n        troubleshoot_performance =\r\n            @troubleshoot_performance;\r\n\r\n    SELECT\r\n        parameter_type =\r\n            'declared_parameters',\r\n        azure =\r\n            @azure,\r\n        engine =\r\n            @engine,\r\n        product_version =\r\n            @product_version,\r\n        database_id =\r\n            @database_id,\r\n        database_name_quoted =\r\n            @database_name_quoted,\r\n        procedure_name_quoted =\r\n            @procedure_name_quoted,\r\n        collation =\r\n            @collation,\r\n        new =\r\n            @new,\r\n        [sql] =\r\n            @sql,\r\n         len_sql =\r\n             LEN(@sql),\r\n        isolation_level =\r\n            @isolation_level,\r\n        parameters =\r\n            @parameters,\r\n        plans_top =\r\n            @plans_top,\r\n        nc10 =\r\n            @nc10,\r\n        where_clause =\r\n            @where_clause,\r\n        procedure_exists =\r\n            @procedure_exists,\r\n        query_store_exists =\r\n            @query_store_exists,\r\n        query_store_waits_enabled =\r\n            @query_store_waits_enabled,\r\n        [string_split] =\r\n            @string_split,\r\n        current_table =\r\n            @current_table,\r\n        troubleshoot_insert =\r\n            @troubleshoot_insert,\r\n        troubleshoot_update =\r\n            @troubleshoot_update,\r\n        xml_info =\r\n            @troubleshoot_info,\r\n        rc =\r\n            @rc;\r\n\r\n    IF EXISTS\r\n       (\r\n           SELECT\r\n               1/0\r\n           FROM #distinct_plans AS dp\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#distinct_plans',\r\n            dp.*\r\n        FROM #distinct_plans AS dp\r\n        ORDER BY dp.plan_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#distinct_plans is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n           SELECT\r\n               1/0\r\n           FROM #procedure_plans AS pp\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#procedure_plans',\r\n            pp.*\r\n        FROM #procedure_plans AS pp\r\n        ORDER BY pp.plan_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#procedure_plans is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n           SELECT\r\n               1/0\r\n           FROM #include_plan_ids AS ipi\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#include_plan_ids',\r\n            ipi.*\r\n        FROM #include_plan_ids AS ipi\r\n        ORDER BY ipi.plan_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#include_plan_ids is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n           SELECT\r\n               1/0\r\n           FROM #include_query_ids AS iqi\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#include_query_ids',\r\n            iqi.*\r\n        FROM #include_query_ids AS iqi\r\n        ORDER BY iqi.query_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#include_query_ids is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n           SELECT\r\n               1/0\r\n           FROM #ignore_plan_ids AS ipi\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#ignore_plan_ids',\r\n            ipi.*\r\n        FROM #ignore_plan_ids AS ipi\r\n        ORDER BY ipi.plan_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#ignore_plan_ids is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n           SELECT\r\n               1/0\r\n           FROM #ignore_query_ids AS iqi\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#ignore_query_ids',\r\n            iqi.*\r\n        FROM #ignore_query_ids AS iqi\r\n        ORDER BY iqi.query_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#ignore_query_ids is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #query_text_search AS qst\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#query_text_search',\r\n            qst.*\r\n        FROM #query_text_search AS qst\r\n        ORDER BY qst.plan_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_text_search is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #wait_filter AS wf\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#wait_filter',\r\n            wf.*\r\n        FROM #wait_filter AS wf\r\n        ORDER BY wf.plan_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#wait_filter is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #maintenance_plans AS mp\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#maintenance_plans',\r\n            mp.*\r\n        FROM #maintenance_plans AS mp\r\n        ORDER BY mp.plan_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#maintenance_plans is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #database_query_store_options AS qst\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#database_query_store_options',\r\n            dqso.*\r\n        FROM #database_query_store_options AS dqso\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#database_query_store_options is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #query_store_plan AS qsp\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#query_store_plan',\r\n            qsp.*\r\n        FROM #query_store_plan AS qsp\r\n        ORDER BY qsp.plan_id, qsp.query_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_store_plan is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #query_store_query AS qsq\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#query_store_query',\r\n            qsq.*\r\n        FROM #query_store_query AS qsq\r\n        ORDER BY qsq.query_id, qsq.query_text_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_store_query is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #query_store_query_text AS qsqt\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#query_store_query_text',\r\n            qsqt.*\r\n        FROM #query_store_query_text AS qsqt\r\n        ORDER BY qsqt.query_text_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_store_query_text is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #dm_exec_query_stats AS deqs\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#dm_exec_query_stats ',\r\n            deqs.*\r\n        FROM #dm_exec_query_stats AS deqs\r\n        ORDER BY deqs.statement_sql_handle\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#dm_exec_query_stats is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #query_store_runtime_stats AS qsrs\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#query_store_runtime_stats',\r\n            qsrs.*\r\n        FROM #query_store_runtime_stats AS qsrs\r\n        ORDER BY qsrs.plan_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_store_runtime_stats is empty';\r\n    END;\r\n\r\n    IF\r\n      (\r\n          @new = 1\r\n          AND EXISTS\r\n              (\r\n                 SELECT\r\n                     1/0\r\n                 FROM #query_store_wait_stats AS qsws\r\n              )\r\n      )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#query_store_wait_stats',\r\n            qsws.*\r\n        FROM #query_store_wait_stats AS qsws\r\n        ORDER BY qsws.plan_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_store_wait_stats is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #query_context_settings AS qcs\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#query_context_settings',\r\n            qcs.*\r\n        FROM #query_context_settings AS qcs\r\n        ORDER BY qcs.context_settings_id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#query_context_settings is empty';\r\n    END;\r\n\r\n    IF EXISTS\r\n       (\r\n          SELECT\r\n              1/0\r\n          FROM #troubleshoot_performance AS qcs\r\n       )\r\n    BEGIN\r\n        SELECT\r\n            table_name =\r\n                '#troubleshoot_performance',\r\n            tp.*\r\n        FROM #troubleshoot_performance AS tp\r\n        ORDER BY tp.id\r\n        OPTION(RECOMPILE);\r\n    END;\r\n    ELSE\r\n    BEGIN\r\n        SELECT\r\n            result =\r\n                '#troubleshoot_performance is empty';\r\n    END;\r\n\r\n    RETURN;\r\n\r\nEND;\r\n\r\nRETURN;\r\n\r\nEND;\r\n/*\r\nFinal End\r\n*/\r\nGO"
}