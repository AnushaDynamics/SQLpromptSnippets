{
  "id": "0158b47d-136f-4f37-9bb6-8f7c87768e1a",
  "prefix": "GetReduntantIndexes",
  "description": "Get Reduntant Indexes which are Part of Another Indexes(aka Containing Indexes)",
  "body": "/* =============================================================================================================================================================\r\n-- Database\t\t: User Database\r\n-- Script\t\t: GetReduntantIndexes\r\n-- Description\t: Get Reduntant Indexes which are Part of Another Indexes(aka Containing Indexes)\r\n**Note: If an Index Columns Order are Part of Another Index Columns Order, Then it is marked as Reduntant\r\n-- Refer Links\t: https://github.com/MadeiraData/MadeiraToolbox/blob/master/Best%20Practices%20Checklists/Redundant%20Indexes%20Detailed.sql\r\n============================================================================================================================================================= */\r\nDECLARE @MinimumRowsInTable INT = 0;\r\n--\r\nSET NOCOUNT ON;\r\nIF OBJECT_ID('tempdb..#FindOnThisDB') IS NOT NULL\r\n\tDROP TABLE #FindOnThisDB;\r\n--\r\n;WITH Indexes\r\nAS (\r\n\t   SELECT sets.schema_id,\r\n\t\t\t  sets.table_o_id,\r\n\t\t\t  sets.key_column_list,\r\n\t\t\t  sets.include_column_list,\r\n\t\t\t  sets.is_unique,\r\n\t\t\t  sets.index_number\r\n\t   FROM (\r\n\t\t\t\tSELECT SCHEMA_DATA.schema_id,\r\n\t\t\t\t\t   TABLE_DATA.object_id AS \"table_o_id\",\r\n\t\t\t\t\t   INDEX_DATA.object_id AS \"index_o_id\",\r\n\t\t\t\t\t   INDEX_DATA.index_id AS \"index_number\",\r\n\t\t\t\t\t   INDEX_DATA.is_unique,\r\n\t\t\t\t\t   INDEX_DATA.name,\r\n\t\t\t\t\t   (\r\n\t\t\t\t\t\t   SELECT QUOTENAME(CAST(keyCol.column_id AS VARCHAR) + CASE WHEN keyCol.is_descending_key = 1 THEN 'd' ELSE 'a' END, '{')\r\n\t\t\t\t\t\t   FROM sys.tables AS T\r\n\t\t\t\t\t\t   INNER JOIN sys.indexes AS idx ON T.object_id = idx.object_id\r\n\t\t\t\t\t\t   INNER JOIN sys.index_columns AS keyCol ON idx.object_id = keyCol.object_id AND idx.index_id = keyCol.index_id\r\n\t\t\t\t\t\t   WHERE INDEX_DATA.object_id = idx.object_id AND INDEX_DATA.index_id = idx.index_id AND keyCol.is_included_column = 0\r\n\t\t\t\t\t\t   ORDER BY keyCol.key_ordinal\r\n\t\t\t\t\t\t   FOR XML PATH('')\r\n\t\t\t\t\t   ) AS \"key_column_list\",\r\n\t\t\t\t\t   (\r\n\t\t\t\t\t\t   SELECT QUOTENAME(CAST(keyColINC.column_id AS VARCHAR), '{')\r\n\t\t\t\t\t\t   FROM sys.tables AS T\r\n\t\t\t\t\t\t   INNER JOIN sys.indexes AS idxINC ON T.object_id = idxINC.object_id\r\n\t\t\t\t\t\t   INNER JOIN sys.index_columns AS keyColINC ON idxINC.object_id = keyColINC.object_id AND idxINC.index_id = keyColINC.index_id\r\n\t\t\t\t\t\t   WHERE INDEX_DATA.object_id = idxINC.object_id AND INDEX_DATA.index_id = idxINC.index_id AND keyColINC.is_included_column = 1\r\n\t\t\t\t\t\t   ORDER BY keyColINC.column_id\r\n\t\t\t\t\t\t   FOR XML PATH('')\r\n\t\t\t\t\t   ) AS \"include_column_list\"\r\n\t\t\t\tFROM sys.indexes AS INDEX_DATA\r\n\t\t\t\tINNER JOIN sys.tables AS TABLE_DATA ON TABLE_DATA.object_id = INDEX_DATA.object_id\r\n\t\t\t\tINNER JOIN sys.schemas AS SCHEMA_DATA ON SCHEMA_DATA.schema_id = TABLE_DATA.schema_id\r\n\t\t\t\tWHERE TABLE_DATA.is_ms_shipped = 0 AND INDEX_DATA.is_disabled = 0 AND INDEX_DATA.data_space_id > 0\r\n\t\t\t) AS sets\r\n\t   LEFT JOIN sys.partitions AS p ON sets.table_o_id = p.object_id AND sets.index_number = p.index_id\r\n\t   WHERE sets.key_column_list IS NOT NULL\r\n\t   GROUP BY sets.schema_id, sets.table_o_id, sets.index_number, sets.is_unique, sets.key_column_list, sets.include_column_list\r\n\t   HAVING SUM(p.rows) >= @MinimumRowsInTable\r\n   )\r\nSELECT DISTINCT DUPE1.schema_id AS \"schema_id\",\r\n\t\t\t\tDUPE1.table_o_id AS \"table_object_id\",\r\n\t\t\t\tDUPE1.index_number AS \"redundant_index_id\",\r\n\t\t\t\tDUPE2.index_number AS \"containing_index_id\",\r\n\t\t\t\tDUPE1.key_column_list,\r\n\t\t\t\tDUPE1.include_column_list\r\nINTO #FindOnThisDB\r\nFROM Indexes AS DUPE1\r\nINNER JOIN Indexes AS DUPE2\r\n\tON DUPE1.schema_id = DUPE2.schema_id\r\n\t   AND DUPE1.table_o_id = DUPE2.table_o_id\r\n\t   AND DUPE1.index_number <> 1 -- do not consider clustered indexes as redundant\r\n\t   AND DUPE1.is_unique = 0 -- do not consider unique indexes as redundant\r\n\t   AND (\r\n\t\t\t   DUPE1.key_column_list = LEFT(DUPE2.key_column_list, LEN(DUPE1.key_column_list))\r\n\t\t\t   AND (\r\n\t\t\t\t\t   DUPE1.include_column_list IS NULL\r\n\t\t\t\t\t   OR DUPE1.include_column_list = LEFT(DUPE2.include_column_list, LEN(DUPE1.include_column_list))\r\n\t\t\t\t   )\r\n\t\t   )\r\n\t   AND DUPE1.index_number <> DUPE2.index_number;\r\n--\r\nSELECT DB_NAME() AS \"Database_Name\",\r\n\t   sch.name AS \"Schema_Name\",\r\n\t   tb.name AS \"Table_Name\",\r\n\t   ind1.name AS \"Redundant_Index_Name\",\r\n\t   STUFF((\r\n\t\t\t\t SELECT ', ' + QUOTENAME(col.name) + CASE WHEN keyCol.is_descending_key = 1 THEN ' DESC' ELSE ' ASC' END\r\n\t\t\t\t FROM sys.index_columns AS keyCol\r\n\t\t\t\t INNER JOIN sys.columns AS col ON keyCol.object_id = col.object_id AND keyCol.column_id = col.column_id\r\n\t\t\t\t WHERE ind1.object_id = keyCol.object_id AND ind1.index_id = keyCol.index_id AND keyCol.is_included_column = 0\r\n\t\t\t\t ORDER BY keyCol.key_ordinal\r\n\t\t\t\t FOR XML PATH('')), 1, 2, ''\r\n\t\t\t) AS \"Redundant_Key_Columns\",\r\n\t   STUFF((\r\n\t\t\t\t SELECT ', ' + QUOTENAME(col.name)\r\n\t\t\t\t FROM sys.index_columns AS keyCol\r\n\t\t\t\t INNER JOIN sys.columns AS col ON keyCol.object_id = col.object_id AND keyCol.column_id = col.column_id\r\n\t\t\t\t WHERE ind1.object_id = keyCol.object_id AND ind1.index_id = keyCol.index_id AND keyCol.is_included_column = 1\r\n\t\t\t\t ORDER BY keyCol.key_ordinal\r\n\t\t\t\t FOR XML PATH('')), 1, 2, ''\r\n\t\t\t) AS \"Redundant_Include_Columns\",\r\n\t   us1.user_seeks AS \"Redundant_Index_Seeks\",\r\n\t   us1.user_scans AS \"Redundant_Index_Scans\",\r\n\t   us1.user_updates AS \"Redundant_Index_Updates\",\r\n\t   ind2.name AS \"Containing_Index_Name\",\r\n\t   STUFF((\r\n\t\t\t\t SELECT ', ' + QUOTENAME(col.name) + CASE WHEN keyCol.is_descending_key = 1 THEN ' DESC' ELSE ' ASC' END\r\n\t\t\t\t FROM sys.index_columns AS keyCol\r\n\t\t\t\t INNER JOIN sys.columns AS col ON keyCol.object_id = col.object_id AND keyCol.column_id = col.column_id\r\n\t\t\t\t WHERE ind2.object_id = keyCol.object_id AND ind2.index_id = keyCol.index_id AND keyCol.is_included_column = 0\r\n\t\t\t\t ORDER BY keyCol.key_ordinal\r\n\t\t\t\t FOR XML PATH('')), 1, 2, ''\r\n\t\t\t) AS \"Containing_Key_Columns\",\r\n\t   STUFF((\r\n\t\t\t\t SELECT ', ' + QUOTENAME(col.name)\r\n\t\t\t\t FROM sys.index_columns AS keyCol\r\n\t\t\t\t INNER JOIN sys.columns AS col ON keyCol.object_id = col.object_id AND keyCol.column_id = col.column_id\r\n\t\t\t\t WHERE ind2.object_id = keyCol.object_id AND ind2.index_id = keyCol.index_id AND keyCol.is_included_column = 1\r\n\t\t\t\t ORDER BY keyCol.key_ordinal\r\n\t\t\t\t FOR XML PATH('')), 1, 2, ''\r\n\t\t\t) AS \"Containing_Include_Columns\",\r\n\t   us2.user_seeks AS \"Containing_Index_Seeks\",\r\n\t   us2.user_scans AS \"Containing_Index_Scans\",\r\n\t   us2.user_updates AS \"Containing_Index_Updates\",\r\n\t   N'USE ' + QUOTENAME(DB_NAME()) + N'; DROP INDEX ' + QUOTENAME(ind1.name) + N' ON ' + QUOTENAME(sch.name) + N'.' + QUOTENAME(tb.name) + N';' AS \"Redundant_Index_Drop_Command\"\r\nFROM #FindOnThisDB AS tbl\r\nINNER JOIN sys.tables AS tb ON tb.object_id = tbl.table_object_id\r\nINNER JOIN sys.schemas AS sch ON sch.schema_id = tbl.schema_id\r\nINNER JOIN sys.indexes AS ind1 ON ind1.object_id = tbl.table_object_id AND ind1.index_id = tbl.redundant_index_id\r\nINNER JOIN sys.indexes AS ind2 ON ind2.object_id = tbl.table_object_id AND ind2.index_id = tbl.containing_index_id\r\nLEFT JOIN sys.dm_db_index_usage_stats AS us1 ON us1.database_id = DB_ID() AND us1.object_id = ind1.object_id AND us1.index_id = ind1.index_id\r\nLEFT JOIN sys.dm_db_index_usage_stats AS us2 ON us2.database_id = DB_ID() AND us2.object_id = ind2.object_id AND us2.index_id = ind2.index_id;"
}